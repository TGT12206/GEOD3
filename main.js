/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GEOD3
});
module.exports = __toCommonJS(main_exports);

// classes/geod3-view.ts
var import_obsidian5 = require("obsidian");

// classes/project.ts
var import_obsidian4 = require("obsidian");

// classes/tabs/file-manager.ts
var import_obsidian3 = require("obsidian");

// classes/tabs/tab.ts
var Tab = class {
  /**
   * @param anp a reference to the obsidian app to read and write files as well as the geod3 project this tab should look at
   */
  constructor(anp) {
    this.anp = anp;
  }
};

// classes/tabs/file-types/geod3-file.ts
var import_obsidian = require("obsidian");
var GEOD3File = class {
  getParent(manager) {
    return manager.GetFile(this.parentPath);
  }
  get name() {
    const pathParts = this.path.valueOf().split("/");
    if (this.path.valueOf() === "/") {
      return "root";
    }
    return pathParts[pathParts.length - 1];
  }
  constructor(path, parentPath) {
    this.parentPath = parentPath;
    this.path = path;
  }
  async GrabDependencies(anp) {
  }
  async DisplayThumbnail(anp, thumbnailDiv) {
    const manager = anp.project.fileManager;
    thumbnailDiv.empty();
    thumbnailDiv.onclick = async () => {
      this.getParent(manager).SelectFile(anp, this, thumbnailDiv);
    };
    thumbnailDiv.createEl("div", { text: this.name });
    thumbnailDiv.createEl("div", { text: "Type: " + this.type });
  }
  async Open(anp) {
    const manager = anp.project.fileManager;
    manager.fileDiv.empty();
    manager.fileDiv.className = "vbox";
    const backButton = manager.fileDiv.createEl("button", { text: "Go back to " + this.getParent(manager).name });
    backButton.onclick = async () => {
      this.getParent(manager).Open(anp);
    };
  }
  async DisplayProperties(anp, thumbnailDiv) {
    const manager = anp.project.fileManager;
    manager.propertiesDiv.empty();
    const nameInput = manager.propertiesDiv.createEl("input", { type: "text", value: this.name });
    manager.propertiesDiv.createEl("div", { text: "Type: " + this.type });
    const vault = anp.app.vault;
    const project = anp.project;
    nameInput.onchange = async () => {
      const originalPath = this.path;
      const tFile = vault.getFileByPath(project.pathToProject + originalPath + ".md");
      const currName = this.name;
      const newPath = this.path.slice(0, -currName.length) + nameInput.value;
      if (tFile !== null) {
        vault.rename(tFile, project.pathToProject + newPath + ".md");
      }
      this.path = newPath;
      this.DisplayThumbnail(anp, thumbnailDiv);
    };
  }
  async Save(anp) {
    const path = (0, import_obsidian.normalizePath)(anp.project.pathToProject + this.path + ".md");
    anp.app.vault.adapter.write(path, JSON.stringify(this.data));
  }
};

// classes/tabs/file-types/geod3-folder.ts
var GEOD3Folder = class extends GEOD3File {
  constructor(path, parentPath) {
    super(path, parentPath);
    this.type = "\u{1F4C1}Folder";
    this.files = [];
  }
  get data() {
    return this.files;
  }
  async Open(anp) {
    const manager = anp.project.fileManager;
    super.Open(anp);
    const vault = anp.app.vault;
    const project = anp.project;
    const createDiv = manager.fileDiv.createDiv("hbox");
    const typeDropdown = createDiv.createEl("select");
    for (let i = 0; i < GEOD3FileManager.KNOWN_FILE_TYPES.length; i++) {
      const currType = GEOD3FileManager.KNOWN_FILE_TYPES[i];
      typeDropdown.createEl("option", { text: currType, value: currType });
    }
    typeDropdown.value = GEOD3FileManager.KNOWN_FILE_TYPES[0];
    const nameInput = createDiv.createEl("input", { type: "text", value: "Unnamed" });
    const addButton = createDiv.createEl("button", { text: "+" });
    addButton.onclick = async () => {
      const newRelPath = this.path + (this.path.valueOf() === "/" ? "" : "/") + nameInput.value;
      const newPath = project.pathToProject + newRelPath;
      const newGEOD3File = GEOD3FileManager.CreateFileOfType(newRelPath, this.path, typeDropdown.value);
      if (typeDropdown.value === "\u{1F4C1}Folder") {
        vault.createFolder(newPath);
      } else {
        vault.create(newPath + ".md", JSON.stringify(newGEOD3File));
      }
      manager.files.push(newGEOD3File);
      this.files.push(newGEOD3File);
      this.Open(anp);
    };
    this.selectedThumbnail = void 0;
    const folderDiv = manager.fileDiv.createDiv("geod3-folder");
    for (let i = 0; i < this.files.length; i++) {
      this.files[i].DisplayThumbnail(anp, folderDiv.createDiv("geod3-file-thumbnail pointer-hover"));
    }
  }
  SelectFile(anp, newSelectedFile, thumbnailDiv) {
    if (this.selectedThumbnail !== void 0 && this.selectedThumbnail[0] === newSelectedFile && this.selectedThumbnail[1] === thumbnailDiv) {
      this.selectedThumbnail[0].Open(anp);
    } else {
      if (this.selectedThumbnail !== void 0) {
        this.selectedThumbnail[1].className = "geod3-file-thumbnail pointer-hover";
      }
      this.selectedThumbnail = [newSelectedFile, thumbnailDiv];
      this.selectedThumbnail[1].className = "geod3-file-thumbnail selected pointer-hover";
      this.selectedThumbnail[0].DisplayProperties(anp, thumbnailDiv);
    }
  }
  async DisplayProperties(anp, thumbnailDiv) {
    const manager = anp.project.fileManager;
    manager.propertiesDiv.empty();
    const nameInput = manager.propertiesDiv.createEl("input", { type: "text", value: this.name });
    manager.propertiesDiv.createEl("div", { text: "Type: " + this.type });
    const vault = anp.app.vault;
    const project = anp.project;
    nameInput.onchange = async () => {
      const originalPath = this.path;
      const tFile = vault.getFolderByPath(project.pathToProject + originalPath);
      const currName = this.name;
      const newPath = this.path.slice(0, -currName.length) + nameInput.value;
      if (tFile !== null) {
        vault.rename(tFile, project.pathToProject + newPath);
      }
      this.path = newPath;
      const folderStack = [];
      const GFindex = 0;
      const CFindex = 1;
      folderStack.push([this, 0]);
      let depth = 0;
      while (folderStack[0][CFindex] < this.files.length) {
        const currFolder = folderStack[depth];
        const currIndex = currFolder[CFindex];
        const currFile = currFolder[GFindex].files[currIndex];
        currFile.path = currFile.path.replace(originalPath.valueOf(), newPath);
        if (currFile instanceof GEOD3Folder) {
          folderStack.push([currFile, 0]);
          depth++;
        } else {
          currFolder[CFindex]++;
        }
        if (folderStack[depth][CFindex] >= folderStack[depth][GFindex].files.length) {
          while (depth > 0 && folderStack[depth][CFindex] >= folderStack[depth][GFindex].files.length) {
            depth--;
            folderStack.pop();
            if (depth >= 0) {
              folderStack[depth][CFindex]++;
            }
          }
        }
      }
      this.DisplayThumbnail(anp, thumbnailDiv);
    };
  }
};

// classes/tabs/file-types/real-file.ts
var import_obsidian2 = require("obsidian");
var RealFile = class extends GEOD3File {
  constructor(path, parentPath) {
    super(path, parentPath);
    this.src = "";
  }
  get data() {
    return this.src;
  }
  async Open(anp) {
    const manager = anp.project.fileManager;
    super.Open(anp);
    this.DisplayActualFile(manager.fileDiv);
  }
  async GrabDependencies(anp) {
    try {
      const app = anp.app;
      const vault = app.vault;
      const project = anp.project;
      const pathToActualFile = project.pathToProject + this.path + ".actual-file";
      const tFile = vault.getFileByPath(pathToActualFile);
      if (tFile === null) {
        throw new Error("");
      }
      const arrayBuffer = await vault.readBinary(tFile);
      const blob = new Blob([arrayBuffer]);
      this.src = URL.createObjectURL(blob);
    } catch (e) {
    }
  }
  async DisplayProperties(anp, thumbnailDiv) {
    const manager = anp.project.fileManager;
    manager.propertiesDiv.empty();
    const nameInput = manager.propertiesDiv.createEl("input", { type: "text", value: this.name });
    manager.propertiesDiv.createEl("div", { text: "Type: " + this.type });
    const currFileDiv = manager.propertiesDiv.createDiv();
    this.DisplayActualFile(currFileDiv);
    const fileInput = manager.propertiesDiv.createEl("input", { type: "file" });
    const vault = anp.app.vault;
    const project = anp.project;
    nameInput.onchange = async () => {
      const originalPath = this.path;
      const tFile1 = vault.getFileByPath(project.pathToProject + originalPath + ".md");
      const tFile2 = vault.getFileByPath(project.pathToProject + originalPath + ".actual-file");
      const currName = this.name;
      const newPath = this.path.slice(0, -currName.length) + nameInput.value;
      if (tFile1 !== null) {
        vault.rename(tFile1, project.pathToProject + newPath + ".md");
      }
      if (tFile2 !== null) {
        vault.rename(tFile2, project.pathToProject + newPath + ".actual-file");
      }
      this.path = newPath;
      this.DisplayThumbnail(anp, thumbnailDiv);
    };
    fileInput.onchange = async () => {
      const fileArray = fileInput.files;
      if (fileArray !== null) {
        const arrayBuffer = await fileArray[0].arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        this.src = URL.createObjectURL(blob);
        const pathToMDFile = (0, import_obsidian2.normalizePath)(anp.project.pathToProject + this.path + ".md");
        const pathToActualFile = (0, import_obsidian2.normalizePath)(anp.project.pathToProject + this.path + ".actual-file");
        await anp.app.vault.adapter.write(pathToMDFile, JSON.stringify(this));
        await anp.app.vault.adapter.writeBinary(pathToActualFile, arrayBuffer);
      }
      currFileDiv.empty();
      this.DisplayActualFile(currFileDiv);
    };
  }
  async Save(anp) {
    await super.Save(anp);
    try {
      const response = await fetch(this.data);
      const arrayBuffer = await response.arrayBuffer();
      const pathToActualFile = (0, import_obsidian2.normalizePath)(anp.project.pathToProject + this.path + ".actual-file");
      await anp.app.vault.adapter.writeBinary(pathToActualFile, arrayBuffer);
    } catch (e) {
      console.log("Error converting " + this.path.valueOf() + " to an actual file");
    }
  }
};
var ImageFile = class extends RealFile {
  constructor() {
    super(...arguments);
    this.type = "\u{1F5BC}\uFE0FImage";
  }
  async DisplayActualFile(div) {
    const img = div.createEl("img");
    img.style.objectFit = "contain";
    img.src = this.src;
    return img;
  }
};
var SoundFile = class extends RealFile {
  constructor() {
    super(...arguments);
    this.type = "\u{1F50A}Sound";
  }
  async DisplayActualFile(div) {
    const el = div.createEl("audio");
    el.src = this.src;
    return el;
  }
};
var VideoFile = class extends RealFile {
  constructor() {
    super(...arguments);
    this.type = "\u{1F39E}\uFE0FVideo";
  }
  async DisplayActualFile(div) {
    const vid = div.createEl("video");
    vid.style.objectFit = "contain";
    vid.src = this.src;
    return vid;
  }
};

// classes/tabs/file-manager.ts
var GEOD3FileManager = class extends Tab {
  constructor(anp) {
    super(anp);
    this.files = [];
  }
  get imageFiles() {
    const output = [];
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i] instanceof ImageFile) {
        output.push(this.files[i]);
      }
    }
    return output;
  }
  get soundFiles() {
    const output = [];
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i] instanceof SoundFile) {
        output.push(this.files[i]);
      }
    }
    return output;
  }
  get videoFiles() {
    const output = [];
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i] instanceof VideoFile) {
        output.push(this.files[i]);
      }
    }
    return output;
  }
  GetFile(path) {
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i].path === path) {
        return this.files[i];
      }
    }
    throw new Error("Path " + path + " not found");
  }
  GetFileByPrimitivePath(path) {
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i].path.valueOf() === path) {
        return this.files[i];
      }
    }
    throw new Error("Path " + path + " not found");
  }
  AssignObjectFromFileType(plainObj, path, parentPath) {
    plainObj.path = path;
    plainObj.parentPath = parentPath;
    switch (plainObj.type) {
      case "\u{1F4C1}Folder":
      default:
        return Object.assign(new GEOD3Folder(path, parentPath), plainObj);
      case "\u{1F5BC}\uFE0FImage":
        return Object.assign(new ImageFile(path, parentPath), plainObj);
      case "\u{1F50A}Sound":
        return Object.assign(new SoundFile(path, parentPath), plainObj);
      case "\u{1F39E}\uFE0FVideo":
        return Object.assign(new VideoFile(path, parentPath), plainObj);
    }
  }
  static CreateFileOfType(path, parentPath, type) {
    switch (type) {
      case "\u{1F4C1}Folder":
      default:
        return new GEOD3Folder(path, parentPath);
      case "\u{1F5BC}\uFE0FImage":
        return new ImageFile(path, parentPath);
      case "\u{1F50A}Sound":
        return new SoundFile(path, parentPath);
      case "\u{1F39E}\uFE0FVideo":
        return new VideoFile(path, parentPath);
    }
  }
  async LoadFiles(anp) {
    this.files = [];
    const app = anp.app;
    const vault = app.vault;
    const project = anp.project;
    const projectFolder = vault.getFolderByPath(project.pathToProject);
    if (projectFolder === null) {
      throw new Error("Project folder does not exist");
    }
    const folderStack = [];
    const TFindex = 0;
    const GFindex = 1;
    const CFindex = 2;
    const rootPath = new String("/");
    const root = new GEOD3Folder(rootPath, rootPath);
    folderStack.push([projectFolder, root, 0]);
    this.files.push(root);
    let depth = 0;
    while (folderStack[0][CFindex] < projectFolder.children.length) {
      const currFolder = folderStack[depth];
      const currIndex = currFolder[CFindex];
      const currFile = currFolder[TFindex].children[currIndex];
      const relativePath = currFile.path.replace(project.pathToProject, "");
      if (currFile.name !== "RESERVED FOLDER DO NOT RENAME") {
        if (currFile instanceof import_obsidian3.TFolder) {
          const newGEOD3Folder = new GEOD3Folder(relativePath, currFolder[GFindex].path);
          this.files.push(newGEOD3Folder);
          currFolder[GFindex].files.push(newGEOD3Folder);
          folderStack.push([currFile, newGEOD3Folder, 0]);
          depth++;
        } else if (currFile instanceof import_obsidian3.TFile) {
          if (currFile.extension === "md") {
            const data = await vault.cachedRead(currFile);
            const plainObj = JSON.parse(data);
            const newFile = this.AssignObjectFromFileType(plainObj, relativePath.slice(0, -3), currFolder[GFindex].path);
            currFolder[GFindex].files.push(newFile);
            this.files.push(newFile);
          }
          currFolder[CFindex]++;
        }
      } else {
        currFolder[CFindex]++;
      }
      if (folderStack[depth][CFindex] >= folderStack[depth][TFindex].children.length) {
        while (depth > 0 && folderStack[depth][CFindex] >= folderStack[depth][TFindex].children.length) {
          depth--;
          folderStack.pop();
          if (depth >= 0) {
            folderStack[depth][CFindex]++;
          }
        }
      }
    }
  }
  async Focus(div) {
    div.empty();
    this.mainDiv = div;
    this.mainDiv.className = "geod3-tab-container hbox";
    this.fileDiv = div.createDiv("vbox");
    this.propertiesDiv = div.createDiv("geod3-file-properties vbox");
    this.fileDiv.style.width = "70%";
    this.propertiesDiv.style.width = "30%";
    this.files[0].Open(this.anp);
  }
  UnFocus(div) {
    div.empty();
  }
};
GEOD3FileManager.icon = "\u{1F4C1}";
GEOD3FileManager.KNOWN_FILE_TYPES = [
  "\u{1F4C1}Folder",
  "\u{1F5BC}\uFE0FImage",
  "\u{1F50A}Sound",
  "\u{1F39E}\uFE0FVideo"
];

// colors.ts
var BG_COLOR_2 = "rgb(18, 18, 24)";
var BG_COLOR_3 = "rgb(5, 5, 8)";
var ACCENT_COLOR_1 = "rgb(223, 236, 255)";
var ACCENT_COLOR_2 = "rgb(160, 169, 184)";
var ACCENT_COLOR_3 = "rgb(100, 109, 123)";
var CENTRAL_COLOR_1 = "rgb(111, 46, 169)";
var CENTRAL_COLOR_2 = "rgb(78, 17, 131)";
var CENTRAL_COLOR_3 = "rgb(29, 0, 54)";

// classes/structs/struct.ts
var AS = /* @__PURE__ */ ((AS2) => {
  AS2[AS2["none"] = 0] = "none";
  AS2[AS2["boolean"] = 1] = "boolean";
  AS2[AS2["number"] = 2] = "number";
  AS2[AS2["string"] = 3] = "string";
  return AS2;
})(AS || {});
var ASHandler = class {
  static Copy(obj) {
    let newObj;
    switch (obj.type) {
      case 0 /* none */:
      case 1 /* boolean */:
      default:
        newObj = new ABooleanI(obj.scope, obj.name);
        break;
      case 2 /* number */:
        newObj = new ANumberI(obj.scope, obj.name);
        break;
      case 3 /* string */:
        newObj = new AStringI(obj.scope, obj.name);
        break;
    }
    newObj.value = obj.value;
    return newObj;
  }
  static CreateI(type, scope, name) {
    switch (type) {
      case 0 /* none */:
      case 1 /* boolean */:
      default:
        return new ABooleanI(scope, name);
      case 2 /* number */:
        return new ANumberI(scope, name);
      case 3 /* string */:
        return new AStringI(scope, name);
    }
  }
  static CreateII(struct, inspectorDiv, color = void 0) {
    switch (struct.type) {
      case 0 /* none */:
      case 1 /* boolean */:
      default:
        return new ABooleanII(struct, inspectorDiv, color);
      case 2 /* number */:
        return new ANumberII(struct, inspectorDiv, color);
      case 3 /* string */:
        return new AStringII(struct, inspectorDiv, color);
    }
  }
};
var ASI = class {
  constructor(scope, name = "") {
    this.name = name;
    this.scope = scope;
  }
};
var ASII = class {
  static AdjustInputWidth(input, div) {
    const tempEl = div.createEl("div", { text: input.value });
    tempEl.style.position = "absolute";
    tempEl.style.visibility = "hidden";
    tempEl.style.whiteSpace = "nowrap";
    tempEl.style.font = "inherit";
    tempEl.style.padding = input instanceof HTMLInputElement ? "1vh" : "2vh";
    input.style.width = tempEl.getBoundingClientRect().width + "px";
    tempEl.remove();
  }
};
var ABooleanI = class extends ASI {
  constructor(scope, name = "") {
    super(scope, name);
    this.type = 1 /* boolean */;
    this.value = false;
  }
};
var ABooleanII = class extends ASII {
  constructor(instance, div, color = void 0) {
    super();
    this.instance = instance;
    const input = div.createEl("input", { type: "checkbox" });
    input.checked = this.instance.value;
    input.style.backgroundColor = color === void 0 ? CENTRAL_COLOR_3 : color;
    input.onclick = () => {
      this.instance.value = input.checked;
      input.style.backgroundColor = input.checked ? CENTRAL_COLOR_1 : CENTRAL_COLOR_3;
    };
  }
};
var ANumberI = class extends ASI {
  constructor(scope, name = "") {
    super(scope, name);
    this.type = 2 /* number */;
    this.value = 0;
  }
};
var ANumberII = class extends ASII {
  constructor(instance, div, color = void 0) {
    super();
    this.instance = instance;
    const input = div.createEl("input", { type: "text", value: this.instance.value + "" });
    ASII.AdjustInputWidth(input, div);
    input.style.backgroundColor = color === void 0 ? CENTRAL_COLOR_3 : color;
    input.oninput = () => {
      ASII.AdjustInputWidth(input, div);
    };
    input.onchange = () => {
      this.instance.value = parseFloat(input.value);
    };
  }
};
var AStringI = class extends ASI {
  constructor(scope, name = "") {
    super(scope, name);
    this.type = 3 /* string */;
    this.value = "";
  }
};
var AStringII = class extends ASII {
  constructor(instance, div, color = void 0) {
    super();
    this.instance = instance;
    const input = div.createEl("input", { type: "text", value: this.instance.value + "" });
    ASII.AdjustInputWidth(input, div);
    input.style.backgroundColor = color === void 0 ? CENTRAL_COLOR_3 : color;
    input.oninput = () => {
      ASII.AdjustInputWidth(input, div);
    };
    input.onchange = () => {
      this.instance.value = input.value;
    };
  }
};

// classes/tabs/geod3-object.ts
var GEOD3ObjectHandler = class {
  static GetVariable(obj, name) {
    for (let i = 0; i < obj.variables.length; i++) {
      if (obj.variables[i].name === name) {
        return obj.variables[i];
      }
    }
    throw new Error("Variable " + name + " not found on object " + obj.idInScene + ": " + obj.name);
  }
  static CreateII(obj, anp, inspectorDiv) {
    return new GEOD3ObjectII(obj, anp, inspectorDiv);
  }
  static CreateRI(obj, anp, objDiv) {
    return new GEOD3ObjectRI(obj, anp, objDiv);
  }
};
var GEOD3Object = class {
  constructor(id) {
    this.idInScene = id;
    this.name = "object";
    this.variables = [];
    this.onStart = [];
    this.onNewFrame = [];
    this.variables.push(ASHandler.CreateI(3 /* string */, 1 /* Public */, "Sprite Path"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Sprite Width"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Sprite Height"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "x"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "y"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "z"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Speed x"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Speed y"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Speed z"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Acceleration x"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Acceleration y"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Acceleration z"));
    this.variables.push(ASHandler.CreateI(1 /* boolean */, 1 /* Public */, "Do Rectangular Hitbox"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Hitbox Radius/Half Width"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Hitbox Half Height"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Hitbox Half Thickness"));
    this.variables[1].value = 100;
    this.variables[2].value = 100;
  }
};
var GEOD3ObjectII = class {
  constructor(instance, anp, div) {
    this.instance = instance;
    this.anp = anp;
    div.empty();
    const nameDiv = div.createDiv("geod3-inspector-top-bar hbox");
    nameDiv.createEl("div", { text: this.instance.idInScene + ":" });
    const nameInput = nameDiv.createEl("input", { type: "text", value: this.instance.name });
    const editScriptsButton = nameDiv.createEl("button", { text: "Edit Scripts\u{1F4DC}" });
    editScriptsButton.className = "geod3-secondary-button";
    nameInput.onchange = () => {
      this.instance.name = nameInput.value;
    };
    editScriptsButton.onclick = () => {
      anp.project.scriptEditor.currentObject = this.instance;
      anp.project.SwitchToTab(anp.project.scriptEditorTabID);
    };
    const variablesDiv = div.createDiv("geod3-inspector-variable-list vbox");
    for (let i = 0; i < this.instance.variables.length; i++) {
      const asI = this.instance.variables[i];
      const varDiv = variablesDiv.createDiv("geod3-inspector-variable hbox");
      varDiv.createEl("div", { text: asI.name });
      ASHandler.CreateII(asI, varDiv.createDiv());
    }
    const addNewDiv = div.createDiv("geod3-inspector-new-var hbox");
    const variableNameInput = addNewDiv.createEl("input", { type: "text", value: "unnamed" });
    const variableTypeInput = addNewDiv.createEl("select");
    const addVariableButton = addNewDiv.createEl("button", { text: "+" });
    addVariableButton.className = "geod3-add-button";
    for (let i = 1; i < 4; i++) {
      const type = AS[i];
      variableTypeInput.createEl("option", { text: type, value: i + "" });
    }
    variableTypeInput.value = "1";
    addVariableButton.onclick = () => {
      const name = variableNameInput.value;
      for (let i = 0; i < this.instance.variables.length; i++) {
        if (this.instance.variables[i].name === name) {
          return;
        }
      }
      const newVar = ASHandler.CreateI(parseInt(variableTypeInput.value), 1 /* Public */, name);
      this.instance.variables.push(newVar);
      const newVarDiv = variablesDiv.createDiv("geod3-inspector-variable hbox");
      newVarDiv.createEl("div", { text: newVar.name });
      ASHandler.CreateII(newVar, newVarDiv);
    };
  }
};
var GEOD3ObjectRI = class {
  constructor(obj, anp, objDiv) {
    this.idInScene = obj.idInScene;
    this.name = obj.name;
    this.variables = [];
    this.onStart = [];
    this.onNewFrame = [];
    for (let i = 0; i < obj.variables.length; i++) {
      this.variables.push(ASHandler.Copy(obj.variables[i]));
    }
    for (let i = 0; i < obj.onStart.length; i++) {
      this.onStart.push(AFHandler.CreateRI(obj.onStart[i], anp));
    }
    for (let i = 0; i < obj.onNewFrame.length; i++) {
      this.onNewFrame.push(AFHandler.CreateRI(obj.onNewFrame[i], anp));
    }
    this.objDiv = objDiv;
    this.anp = anp;
    this.prevSpritePath = "";
    this.SetObjDivCSSProperties();
  }
  SetObjDivCSSProperties() {
    this.objDiv.style.transform = "translate(-50%, 50%)";
    this.objDiv.style.position = "absolute";
  }
  RefreshSprite() {
    const spritePath = GEOD3ObjectHandler.GetVariable(this, "Sprite Path").value;
    if (this.prevSpritePath !== spritePath) {
      try {
        const mediaFile = this.anp.project.fileManager.GetFileByPrimitivePath(spritePath);
        const spriteSrc = mediaFile.data;
        let mediaEl;
        this.objDiv.empty();
        if (mediaFile instanceof ImageFile) {
          mediaEl = this.objDiv.createEl("img");
        } else {
          mediaEl = this.objDiv.createEl("video");
          mediaEl.controls = false;
          mediaEl.loop = true;
        }
        mediaEl.src = spriteSrc;
        mediaEl.style.width = "100%";
        mediaEl.style.height = "100%";
        this.prevSpritePath = spritePath;
      } catch (e) {
        console.log("failed to find image/video path");
      }
    }
  }
  SetLocationAndWidth() {
    const width = GEOD3ObjectHandler.GetVariable(this, "Sprite Width");
    const height = GEOD3ObjectHandler.GetVariable(this, "Sprite Height");
    const x = GEOD3ObjectHandler.GetVariable(this, "x");
    const y = GEOD3ObjectHandler.GetVariable(this, "y");
    const z = GEOD3ObjectHandler.GetVariable(this, "z");
    const xVel = GEOD3ObjectHandler.GetVariable(this, "Speed x");
    const yVel = GEOD3ObjectHandler.GetVariable(this, "Speed y");
    const zVel = GEOD3ObjectHandler.GetVariable(this, "Speed z");
    const xAccel = GEOD3ObjectHandler.GetVariable(this, "Acceleration x");
    const yAccel = GEOD3ObjectHandler.GetVariable(this, "Acceleration y");
    const zAccel = GEOD3ObjectHandler.GetVariable(this, "Acceleration z");
    this.objDiv.style.width = width.value + "px";
    this.objDiv.style.height = height.value + "px";
    xVel.value += xAccel.value;
    yVel.value += yAccel.value;
    zVel.value += zAccel.value;
    x.value += xVel.value;
    y.value += yVel.value;
    z.value += zVel.value;
    this.objDiv.style.left = x.value + "px";
    this.objDiv.style.bottom = y.value + "px";
  }
  Render() {
    this.RefreshSprite();
    this.SetLocationAndWidth();
  }
  OnStart() {
    for (let i = 0; i < this.onStart.length; i++) {
      this.onStart[i].Execute();
    }
  }
  OnNewFrame() {
    for (let i = 0; i < this.onNewFrame.length; i++) {
      this.onNewFrame[i].Execute();
    }
  }
};

// classes/functions/function.ts
var AFHandler = class {
  static Copy(obj) {
    const newParams = [];
    for (let i = 0; i < obj.parameters.length; i++) {
      const currParam = obj.parameters[i];
      if (currParam instanceof AFI2) {
        newParams.push(this.Copy(currParam));
      } else {
        newParams.push(ASHandler.Copy(currParam));
      }
    }
    switch (obj.type) {
      case 0 /* none */:
      default:
        return new ADoNothingI();
      case 1 /* chain */:
        return new AChainI(newParams);
      case 2 /* get */:
        return new AGetI(newParams);
      case 3 /* set */:
        return new ASetI(newParams);
      case 4 /* if */:
        return new AIfI(newParams);
      case 5 /* ifelse */:
        return new AIfElseI(newParams);
      case 6 /* compare */:
        return new ACompareI(newParams);
      case 7 /* keydown */:
        return new AKeydownI(newParams);
      case 8 /* add */:
        return new AAddI(newParams);
    }
  }
  static CreateI(type, parameters) {
    switch (type) {
      case 0 /* none */:
      default:
        return new ADoNothingI();
      case 1 /* chain */:
        return new AChainI(parameters);
      case 2 /* get */:
        return new AGetI(parameters);
      case 3 /* set */:
        return new ASetI(parameters);
      case 4 /* if */:
        return new AIfI(parameters);
      case 5 /* ifelse */:
        return new AIfElseI(parameters);
      case 6 /* compare */:
        return new ACompareI(parameters);
      case 7 /* keydown */:
        return new AKeydownI(parameters);
      case 8 /* add */:
        return new AAddI(parameters);
    }
  }
  static CreateEI(obj, blockDiv, anp) {
    switch (obj.type) {
      case 0 /* none */:
      default:
        return new ADoNothingEI(obj, blockDiv, anp);
      case 1 /* chain */:
        return new AChainEI(obj, blockDiv, anp);
      case 2 /* get */:
        return new AGetEI(obj, blockDiv, anp);
      case 3 /* set */:
        return new ASetEI(obj, blockDiv, anp);
      case 4 /* if */:
        return new AIfEI(obj, blockDiv, anp);
      case 5 /* ifelse */:
        return new AIfElseEI(obj, blockDiv, anp);
      case 6 /* compare */:
        return new ACompareEI(obj, blockDiv, anp);
      case 7 /* keydown */:
        return new AKeydownEI(obj, blockDiv, anp);
      case 8 /* add */:
        return new AAddEI(obj, blockDiv, anp);
    }
  }
  static CreateRI(obj, anp) {
    switch (obj.type) {
      case 0 /* none */:
      default:
        return new ADoNothingRI(obj, anp);
      case 1 /* chain */:
        return new AChainRI(obj, anp);
      case 2 /* get */:
        return new AGetRI(obj, anp);
      case 3 /* set */:
        return new ASetRI(obj, anp);
      case 4 /* if */:
        return new AIfRI(obj, anp);
      case 5 /* ifelse */:
        return new AIfElseRI(obj, anp);
      case 6 /* compare */:
        return new ACompareRI(obj, anp);
      case 7 /* keydown */:
        return new AKeydownRI(obj, anp);
      case 8 /* add */:
        return new AAddRI(obj, anp);
    }
  }
};
var AFI2 = class {
  constructor() {
    this.defaultParameters = [];
    this.parameters = [];
  }
};
var AFEI = class {
  constructor(instance, blockDiv, anp) {
    this.instance = instance;
    this.div = blockDiv;
    this.anp = anp;
    this.DisplayBlock();
  }
  static AdjustInputWidth(input, div) {
    const tempEl = div.createEl("div", { text: input.value });
    tempEl.style.position = "absolute";
    tempEl.style.visibility = "hidden";
    tempEl.style.whiteSpace = "nowrap";
    tempEl.style.font = "inherit";
    tempEl.style.padding = "1vh";
    input.style.width = tempEl.getBoundingClientRect().width + "px";
    tempEl.remove();
  }
  CreateASIOrAFIParameterDiv(index, paramDiv, backgroundColor) {
    const param = this.instance.parameters[index];
    if (param instanceof ASI) {
      return this.CreateASIParameterDiv(index, paramDiv, backgroundColor);
    } else {
      return this.CreateAFIParameterDiv(index, paramDiv, backgroundColor);
    }
  }
  CreateASIParameterDiv(index, paramDiv, backgroundColor) {
    AFEI.SetParameterDiv(this.anp, this, paramDiv, index);
    const param = this.instance.parameters[index];
    ASHandler.CreateII(param, paramDiv, backgroundColor);
  }
  CreateAFIParameterDiv(index, paramDiv, backgroundColor) {
    AFEI.SetParameterDiv(this.anp, this, paramDiv, index);
    const param = this.instance.parameters[index];
    const paramEI = AFHandler.CreateEI(param, paramDiv, this.anp);
    paramEI.parentEI = this;
    if (paramEI.instance.type === 0 /* none */) {
      paramEI.div.style.backgroundColor = backgroundColor;
    } else {
      AFEI.MakeBlockDraggable(paramEI, this.anp, false);
    }
    return paramEI;
  }
  RemoveParameter(parameter) {
    for (let i = 0; i < this.instance.parameters.length; i++) {
      if (this.instance.parameters[i] === parameter) {
        const currDefaultParam = this.instance.defaultParameters[i];
        this.instance.parameters[i] = currDefaultParam instanceof ASI ? ASHandler.Copy(currDefaultParam) : AFHandler.Copy(currDefaultParam);
      }
    }
  }
  static MakeBlockDraggable(block, anp, isCopy) {
    const scriptEditor = anp.project.scriptEditor;
    block.div.draggable = true;
    block.div.addEventListener("dragstart", (event) => {
      event.stopPropagation();
      if (event.dataTransfer !== null) {
        event.dataTransfer.effectAllowed = "copy";
      }
      scriptEditor.currentlyDraggedBlockIsCopy = isCopy;
      scriptEditor.currentlyDraggedBlock = block;
      scriptEditor.blocksDiv.style.height = "90%";
      scriptEditor.delDiv.style.height = "10%";
    });
    block.div.addEventListener("dragend", (event) => {
      event.stopPropagation();
      event.preventDefault();
      scriptEditor.blocksDiv.style.height = "100%";
      scriptEditor.delDiv.style.height = "0%";
    });
  }
  static SetParameterDiv(anp, afei, paramDiv, paramIndex) {
    const scriptEditor = anp.project.scriptEditor;
    paramDiv.addEventListener("dragover", (event) => {
      event.stopPropagation();
      event.preventDefault();
      if (event.dataTransfer !== null) {
        event.dataTransfer.dropEffect = "copy";
      }
      paramDiv.style.borderStyle = "solid";
      paramDiv.style.borderColor = ACCENT_COLOR_1;
    });
    paramDiv.addEventListener("dragleave", (event) => {
      event.stopPropagation();
      paramDiv.style.borderStyle = "";
    });
    paramDiv.addEventListener("drop", (event) => {
      event.stopPropagation();
      if (scriptEditor.currentlyDraggedBlock === void 0) {
        return;
      }
      let newBlock;
      let newBlockDiv;
      if (scriptEditor.currentlyDraggedBlockIsCopy) {
        const newBlockInstance = AFHandler.Copy(scriptEditor.currentlyDraggedBlock.instance);
        newBlockDiv = scriptEditor.currentlyDraggedBlock.div.cloneNode(true);
        newBlock = AFHandler.CreateEI(newBlockInstance, newBlockDiv, anp);
      } else {
        if (scriptEditor.currentlyDraggedBlock.parentEI !== void 0) {
          const parentEI = scriptEditor.currentlyDraggedBlock.parentEI;
          parentEI.RemoveParameter(scriptEditor.currentlyDraggedBlock.instance);
          parentEI.DisplayBlock();
        }
        newBlockDiv = scriptEditor.currentlyDraggedBlock.div;
        newBlock = scriptEditor.currentlyDraggedBlock;
        newBlockDiv.detach();
      }
      afei.instance.parameters[paramIndex] = newBlock.instance;
      afei.DisplayBlock();
      event.preventDefault();
      scriptEditor.currentlyDraggedBlock = void 0;
    });
  }
};
var AFRI2 = class {
  constructor(ogFunction, anp) {
    this.type = ogFunction.type;
    this.parameters = [];
    this.anp = anp;
    for (let i = 0; i < ogFunction.parameters.length; i++) {
      const ogParam = ogFunction.parameters[i];
      let copy;
      if (ogParam instanceof ASI) {
        copy = ASHandler.Copy(ogParam);
      } else {
        copy = AFHandler.CreateRI(ogParam, anp);
      }
      this.parameters.push(copy);
    }
  }
};
var ADoNothingI = class extends AFI2 {
  constructor() {
    super(...arguments);
    this.type = 0 /* none */;
  }
};
var ADoNothingEI = class extends AFEI {
  DisplayBlock() {
    this.div.className = "geod3-script-block";
    this.div.style.backgroundColor = BG_COLOR_3;
  }
  RemoveParameter(parameter) {
  }
};
var ADoNothingRI = class extends AFRI2 {
  async Execute() {
  }
};
var AChainI = class extends AFI2 {
  constructor(parameters = void 0) {
    super();
    this.type = 1 /* chain */;
    const doNothing = new ADoNothingI();
    this.defaultParameters.push(doNothing);
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(AFHandler.Copy(doNothing));
    }
  }
};
var AChainEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block vbox";
    div.style.backgroundColor = BG_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    div.style.width = "fit-content";
    div.style.padding = "1vh";
    div.style.gap = "1vh";
    for (let i = 0; i < this.instance.parameters.length; i++) {
      const index = i;
      const currBlockDiv = div.createDiv("geod3-script-block-inner-section hbox");
      const deleteButton = currBlockDiv.createEl("button", { text: "-" });
      const addButton2 = currBlockDiv.createEl("button", { text: "+" });
      deleteButton.className = "geod3-remove-button";
      addButton2.className = "geod3-add-button";
      deleteButton.onclick = () => {
        this.instance.parameters.splice(index, 1);
        this.DisplayBlock();
      };
      addButton2.onclick = () => {
        this.instance.parameters.splice(index, 0, new ADoNothingI());
        this.DisplayBlock();
      };
      this.CreateAFIParameterDiv(index, currBlockDiv.createDiv(), BG_COLOR_3);
    }
    const addButton = div.createEl("button", { text: "+" });
    addButton.className = "geod3-add-button";
    addButton.onclick = () => {
      this.instance.parameters.splice(this.instance.parameters.length, 0, new ADoNothingI());
      this.DisplayBlock();
    };
  }
  RemoveParameter(parameter) {
    for (let i = 0; i < this.instance.parameters.length; i++) {
      if (this.instance.parameters[i] === parameter) {
        this.instance.parameters[i] = AFHandler.Copy(this.instance.defaultParameters[0]);
      }
    }
  }
};
var AChainRI = class extends AFRI2 {
  async Execute() {
    for (let i = 0; i < this.parameters.length; i++) {
      await this.parameters[i].Execute();
    }
  }
};
var AGetI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 2 /* get */;
    const objIndex = new ANumberI(0 /* Value */, "Object Index");
    const varName = new AStringI(0 /* Value */, "Variable Name");
    objIndex.value = 0;
    varName.value = "Sprite Path";
    this.defaultParameters = [varName, objIndex];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(varName));
      this.parameters.push(ASHandler.Copy(objIndex));
    }
  }
};
var AGetEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const anp = this.anp;
    const varName = this.instance.parameters[0];
    const objID = this.instance.parameters[1];
    div.createEl("div", { text: "Get" });
    const varDiv = div.createDiv();
    div.createEl("div", { text: "from" });
    const objDiv = div.createDiv();
    const objIDInput = objDiv.createEl("select");
    const varNameInput = varDiv.createEl("select");
    objIDInput.style.backgroundColor = CENTRAL_COLOR_3;
    varNameInput.style.backgroundColor = CENTRAL_COLOR_3;
    objIDInput.style.paddingRight = "0";
    varNameInput.style.paddingRight = "0";
    const objArr = anp.project.sceneView.objects;
    for (let i = 0; i < objArr.length; i++) {
      objIDInput.createEl("option", { text: i + ": " + objArr[i].name, value: i + ": " + objArr[i].name });
    }
    const GetAllVarNames = () => {
      varNameInput.empty();
      const objArr2 = anp.project.sceneView.objects;
      const varArr = objArr2[this.instance.parameters[1].value].variables;
      for (let i = 0; i < varArr.length; i++) {
        varNameInput.createEl("option", { text: varArr[i].name, value: varArr[i].name });
      }
    };
    objIDInput.onchange = () => {
      this.instance.parameters[1].value = parseInt(objIDInput.value.split(":")[0]);
      AFEI.AdjustInputWidth(objIDInput, div);
      GetAllVarNames();
    };
    varNameInput.onchange = () => {
      this.instance.parameters[0].value = varNameInput.value;
      AFEI.AdjustInputWidth(varNameInput, div);
    };
    GetAllVarNames();
    objIDInput.value = objID.value + ": " + objArr[objID.value].name;
    varNameInput.value = varName.value;
    AFEI.AdjustInputWidth(objIDInput, div);
    AFEI.AdjustInputWidth(varNameInput, div);
  }
};
var AGetRI = class extends AFRI2 {
  async Execute() {
    const varName = this.parameters[0];
    const objIndex = this.parameters[1];
    const obj = this.anp.project.gameView.objects[objIndex.value];
    return GEOD3ObjectHandler.GetVariable(obj, varName.value);
  }
};
var ASetI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 3 /* set */;
    const varName = new AStringI(0 /* Value */, "Variable Name");
    const objIndex = new ANumberI(0 /* Value */, "Object Index");
    varName.value = "Sprite Path";
    objIndex.value = 0;
    this.defaultParameters = [varName, objIndex];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(varName));
      this.parameters.push(ASHandler.Copy(objIndex));
      this.parameters.push(ASHandler.CreateI(2 /* number */, 0 /* Value */, ""));
    }
  }
};
var ASetEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const anp = this.anp;
    const varName = this.instance.parameters[0];
    const objID = this.instance.parameters[1];
    div.createEl("div", { text: "Set" });
    const varDiv = div.createDiv();
    div.createEl("div", { text: "from" });
    const objDiv = div.createDiv();
    div.createEl("div", { text: "to" });
    const valueDiv = div.createDiv();
    const objIDInput = objDiv.createEl("select");
    const varNameInput = varDiv.createEl("select");
    objIDInput.style.backgroundColor = CENTRAL_COLOR_3;
    varNameInput.style.backgroundColor = CENTRAL_COLOR_3;
    objIDInput.style.paddingRight = "0";
    varNameInput.style.paddingRight = "0";
    const objArr = anp.project.sceneView.objects;
    for (let i = 0; i < objArr.length; i++) {
      objIDInput.createEl("option", { text: i + ": " + objArr[i].name, value: i + ": " + objArr[i].name });
    }
    const GetAllVarNames = () => {
      varNameInput.empty();
      const objArr2 = anp.project.sceneView.objects;
      const varArr = objArr2[this.instance.parameters[1].value].variables;
      for (let i = 0; i < varArr.length; i++) {
        varNameInput.createEl("option", { text: varArr[i].name, value: varArr[i].name });
      }
      valueDiv.empty();
      if (this.instance.parameters[2] instanceof AFI2) {
        this.CreateAFIParameterDiv(2, valueDiv, CENTRAL_COLOR_3);
      } else {
        this.CreateASIParameterDiv(2, valueDiv, CENTRAL_COLOR_3);
      }
    };
    objIDInput.onchange = () => {
      this.instance.parameters[1].value = parseInt(objIDInput.value.split(":")[0]);
      AFEI.AdjustInputWidth(objIDInput, div);
      GetAllVarNames();
    };
    varNameInput.onchange = () => {
      this.instance.parameters[0].value = varNameInput.value;
      AFEI.AdjustInputWidth(varNameInput, div);
    };
    GetAllVarNames();
    objIDInput.value = objID.value + ": " + objArr[objID.value].name;
    varNameInput.value = varName.value;
    AFEI.AdjustInputWidth(objIDInput, div);
    AFEI.AdjustInputWidth(varNameInput, div);
  }
  RemoveParameter(parameter) {
    if (this.instance.parameters[2] === parameter) {
      const defaultParam = ASHandler.CreateI(this.instance.parameters[0].type, 0 /* Value */, "");
      this.instance.parameters[2] = defaultParam;
    }
  }
};
var ASetRI = class extends AFRI2 {
  async Execute() {
    const varName = this.parameters[0];
    const objIndex = this.parameters[1];
    const val = this.parameters[2];
    const obj = this.anp.project.gameView.objects[objIndex.value];
    const varToSet = GEOD3ObjectHandler.GetVariable(obj, varName.value);
    varToSet.value = val instanceof AFRI2 ? (await val.Execute()).value : val.value;
  }
};
var AIfI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 4 /* if */;
    const condition = new ABooleanI(0 /* Value */, "condition");
    const doNothing = new ADoNothingI();
    condition.value = false;
    this.defaultParameters = [condition, doNothing];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(condition));
      this.parameters.push(AFHandler.Copy(doNothing));
    }
  }
};
var AIfEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block vbox";
    div.style.backgroundColor = ACCENT_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const topDiv = div.createDiv("geod3-script-block-inner-section hbox");
    topDiv.createEl("div", { text: "If" });
    const conditionDiv = topDiv.createDiv();
    const functionDiv = div.createDiv();
    this.CreateASIOrAFIParameterDiv(0, conditionDiv, ACCENT_COLOR_3);
    this.CreateAFIParameterDiv(1, functionDiv, ACCENT_COLOR_3);
  }
};
var AIfRI = class extends AFRI2 {
  async Execute() {
    const param1 = this.parameters[0];
    const param1IsAFRI = param1 instanceof AFRI2;
    const condition = param1IsAFRI ? (await param1.Execute()).value : param1.value;
    if (condition) {
      const param2 = this.parameters[1];
      await param2.Execute();
    }
  }
};
var AIfElseI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 5 /* ifelse */;
    const condition = new ABooleanI(0 /* Value */, "condition");
    const doNothing = new ADoNothingI();
    const doNothing2 = new ADoNothingI();
    condition.value = false;
    this.defaultParameters = [condition, doNothing, doNothing2];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(condition));
      this.parameters.push(AFHandler.Copy(doNothing));
      this.parameters.push(AFHandler.Copy(doNothing2));
    }
  }
};
var AIfElseEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block vbox";
    div.style.backgroundColor = ACCENT_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const topDiv = div.createDiv("geod3-script-block-inner-section hbox");
    topDiv.createEl("div", { text: "If" });
    const conditionDiv = topDiv.createDiv();
    const function1Div = div.createDiv();
    div.createEl("div", { text: "Else" });
    const function2Div = div.createDiv();
    this.CreateASIOrAFIParameterDiv(0, conditionDiv, ACCENT_COLOR_3);
    this.CreateAFIParameterDiv(1, function1Div, ACCENT_COLOR_3);
    this.CreateAFIParameterDiv(2, function2Div, ACCENT_COLOR_3);
  }
};
var AIfElseRI = class extends AFRI2 {
  async Execute() {
    const param1 = this.parameters[0];
    const param1IsAFRI = param1 instanceof AFRI2;
    const condition = param1IsAFRI ? (await param1.Execute()).value : param1.value;
    if (condition) {
      const param2 = this.parameters[1];
      await param2.Execute();
    } else {
      const param3 = this.parameters[2];
      await param3.Execute();
    }
  }
};
var ACompareI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 6 /* compare */;
    const val1 = new ANumberI(0 /* Value */, "val1");
    const type = new AStringI(0 /* Value */, "comparison type");
    const val2 = new ANumberI(0 /* Value */, "val2");
    val1.value = 0;
    type.value = "=";
    val2.value = 0;
    this.defaultParameters = [val1, type, val2];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(val1));
      this.parameters.push(ASHandler.Copy(type));
      this.parameters.push(ASHandler.Copy(val2));
    }
  }
};
var ACompareEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_1;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const val1Div = div.createDiv();
    const typeSelect = div.createEl("select");
    const val2Div = div.createDiv();
    this.CreateASIOrAFIParameterDiv(0, val1Div, CENTRAL_COLOR_3);
    this.CreateASIOrAFIParameterDiv(2, val2Div, CENTRAL_COLOR_3);
    typeSelect.createEl("option", { text: "=", value: "=" });
    typeSelect.createEl("option", { text: "!=", value: "!=" });
    typeSelect.createEl("option", { text: "<", value: "<" });
    typeSelect.createEl("option", { text: ">", value: ">" });
    typeSelect.createEl("option", { text: "<=", value: "<=" });
    typeSelect.createEl("option", { text: ">=", value: ">=" });
    typeSelect.value = this.instance.parameters[1].value;
    AFEI.AdjustInputWidth(typeSelect, div);
    typeSelect.onchange = () => {
      this.instance.parameters[1].value = typeSelect.value;
      AFEI.AdjustInputWidth(typeSelect, div);
    };
    typeSelect.style.backgroundColor = CENTRAL_COLOR_3;
    typeSelect.style.paddingRight = "0";
  }
};
var ACompareRI = class extends AFRI2 {
  async Execute() {
    const param1 = this.parameters[0];
    const param2 = this.parameters[1];
    const param3 = this.parameters[2];
    const param1IsAFRI = param1 instanceof AFRI2;
    const param3IsAFRI = param3 instanceof AFRI2;
    const val1 = param1IsAFRI ? (await param1.Execute()).value : param1.value;
    const val2 = param3IsAFRI ? (await param3.Execute()).value : param3.value;
    const output = new ABooleanI(0 /* Value */, "output");
    switch (param2.value) {
      case "=":
      default:
        output.value = val1 === val2;
        break;
      case "!=":
        output.value = val1 !== val2;
        break;
      case "<":
        output.value = val1 < val2;
        break;
      case ">":
        output.value = val1 > val2;
        break;
      case "<=":
        output.value = val1 <= val2;
        break;
      case ">=":
        output.value = val1 >= val2;
        break;
    }
    return output;
  }
};
var AKeydownI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 7 /* keydown */;
    const key = new AStringI(0 /* Value */, "key");
    key.value = "Any";
    this.defaultParameters = [key];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(key));
    }
  }
};
AKeydownI.keylist = [
  "Any",
  "Space",
  "Up Arrow",
  "Down Arrow",
  "Left Arrow",
  "Right Arrow",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z"
];
var AKeydownEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_1;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const keySelect = div.createEl("select");
    div.createEl("div", { text: "Key Down?" });
    for (let i = 0; i < AKeydownI.keylist.length; i++) {
      const currKey = AKeydownI.keylist[i];
      keySelect.createEl("option", { text: currKey, value: currKey });
    }
    keySelect.value = this.instance.parameters[0].value;
    AFEI.AdjustInputWidth(keySelect, div);
    keySelect.onchange = () => {
      this.instance.parameters[0].value = keySelect.value;
      AFEI.AdjustInputWidth(keySelect, div);
    };
    keySelect.style.backgroundColor = CENTRAL_COLOR_3;
    keySelect.style.paddingRight = "0";
  }
};
var AKeydownRI = class extends AFRI2 {
  async Execute() {
    const key = this.parameters[0];
    const output = new ABooleanI(0 /* Value */, "output");
    const isKeyDown = this.anp.project.gameView.pressedKeys.get(key.value);
    output.value = isKeyDown === void 0 ? false : isKeyDown;
    console.log(isKeyDown);
    return output;
  }
};
var AAddI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 8 /* add */;
    const num1 = new ANumberI(0 /* Value */, "num1");
    const num2 = new ANumberI(0 /* Value */, "num2");
    num1.value = 0;
    num2.value = 0;
    this.defaultParameters = [num1, num2];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(num1));
      this.parameters.push(ASHandler.Copy(num2));
    }
  }
};
var AAddEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_1;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const num1Div = div.createDiv();
    div.createEl("div", { text: "+" });
    const num2Div = div.createDiv();
    this.CreateASIOrAFIParameterDiv(0, num1Div, CENTRAL_COLOR_3);
    this.CreateASIOrAFIParameterDiv(1, num2Div, CENTRAL_COLOR_3);
  }
};
var AAddRI = class extends AFRI2 {
  async Execute() {
    const param1 = this.parameters[0];
    const param2 = this.parameters[1];
    const param1IsAFRI = param1 instanceof AFRI2;
    const param2IsAFRI = param2 instanceof AFRI2;
    const num1 = param1IsAFRI ? (await param1.Execute()).value : param1.value;
    const num2 = param2IsAFRI ? (await param2.Execute()).value : param2.value;
    const output = new ANumberI(0 /* Value */, "sum");
    output.value = num1 + num2;
    return output;
  }
};

// classes/tabs/game-view.ts
var GameView = class extends Tab {
  get pressedKeysArray() {
    return Array.from(this.pressedKeys.entries());
  }
  async Focus(div) {
    div.empty();
    div.className = "geod3-game-view-main-div geod3-tab-container";
    const gameWrapper = div.createDiv("geod3-game-wrapper");
    this.gameDiv = gameWrapper.createDiv("geod3-game");
    this.stillRunning = true;
    this.objects = [];
    this.pressedKeys = /* @__PURE__ */ new Map();
    this.ListenForKeyPresses();
    await this.OnStart();
    while (this.stillRunning) {
      this.OnNewFrame();
      await sleep(15);
    }
  }
  UnFocus(div) {
    div.empty();
    this.stillRunning = false;
  }
  ListenForKeyPresses() {
    this.gameDiv.tabIndex = -1;
    this.gameDiv.focus();
    for (let i = 0; i < AKeydownI.keylist.length; i++) {
      const currKey = AKeydownI.keylist[i];
      this.pressedKeys.set(currKey, false);
    }
    this.gameDiv.onkeydown = (event) => {
      console.log(event.key);
      this.pressedKeys.set("Any", true);
      switch (event.key) {
        case " ":
          this.pressedKeys.set("Space", true);
          return;
        case "ArrowUp":
          this.pressedKeys.set("Up Arrow", true);
          return;
        case "ArrowDown":
          this.pressedKeys.set("Down Arrow", true);
          return;
        case "ArrowLeft":
          this.pressedKeys.set("Left Arrow", true);
          return;
        case "ArrowRight":
          this.pressedKeys.set("Right Arrow", true);
          return;
        case "A":
        case "a":
          this.pressedKeys.set("A", true);
          return;
        case "B":
        case "b":
          this.pressedKeys.set("B", true);
          return;
        case "C":
        case "c":
          this.pressedKeys.set("C", true);
          return;
        case "D":
        case "d":
          this.pressedKeys.set("D", true);
          return;
        case "E":
        case "e":
          this.pressedKeys.set("E", true);
          return;
        case "F":
        case "f":
          this.pressedKeys.set("F", true);
          return;
        case "G":
        case "g":
          this.pressedKeys.set("G", true);
          return;
        case "H":
        case "h":
          this.pressedKeys.set("H", true);
          return;
        case "I":
        case "i":
          this.pressedKeys.set("I", true);
          return;
        case "J":
        case "j":
          this.pressedKeys.set("J", true);
          return;
        case "K":
        case "k":
          this.pressedKeys.set("K", true);
          return;
        case "L":
        case "l":
          this.pressedKeys.set("L", true);
          return;
        case "M":
        case "m":
          this.pressedKeys.set("M", true);
          return;
        case "N":
        case "n":
          this.pressedKeys.set("N", true);
          return;
        case "O":
        case "o":
          this.pressedKeys.set("O", true);
          return;
        case "P":
        case "p":
          this.pressedKeys.set("P", true);
          return;
        case "Q":
        case "q":
          this.pressedKeys.set("Q", true);
          return;
        case "R":
        case "r":
          this.pressedKeys.set("R", true);
          return;
        case "S":
        case "s":
          this.pressedKeys.set("S", true);
          return;
        case "T":
        case "t":
          this.pressedKeys.set("T", true);
          return;
        case "U":
        case "u":
          this.pressedKeys.set("U", true);
          return;
        case "V":
        case "v":
          this.pressedKeys.set("V", true);
          return;
        case "W":
        case "w":
          this.pressedKeys.set("W", true);
          return;
        case "X":
        case "x":
          this.pressedKeys.set("X", true);
          return;
        case "Y":
        case "y":
          this.pressedKeys.set("Y", true);
          return;
        case "Z":
        case "z":
          this.pressedKeys.set("Z", true);
          return;
      }
    };
    this.gameDiv.onkeyup = (event) => {
      switch (event.key) {
        case " ":
          this.pressedKeys.set("Space", false);
          break;
        case "ArrowUp":
          this.pressedKeys.set("Up Arrow", false);
          break;
        case "ArrowDown":
          this.pressedKeys.set("Down Arrow", false);
          break;
        case "ArrowLeft":
          this.pressedKeys.set("Left Arrow", false);
          break;
        case "ArrowRight":
          this.pressedKeys.set("Right Arrow", false);
          break;
        case "A":
        case "a":
          this.pressedKeys.set("A", false);
          break;
        case "B":
        case "b":
          this.pressedKeys.set("B", false);
          break;
        case "C":
        case "c":
          this.pressedKeys.set("C", false);
          break;
        case "D":
        case "d":
          this.pressedKeys.set("D", false);
          break;
        case "E":
        case "e":
          this.pressedKeys.set("E", false);
          break;
        case "F":
        case "f":
          this.pressedKeys.set("F", false);
          break;
        case "G":
        case "g":
          this.pressedKeys.set("G", false);
          break;
        case "H":
        case "h":
          this.pressedKeys.set("H", false);
          break;
        case "I":
        case "i":
          this.pressedKeys.set("I", false);
          break;
        case "J":
        case "j":
          this.pressedKeys.set("J", false);
          break;
        case "K":
        case "k":
          this.pressedKeys.set("K", false);
          break;
        case "L":
        case "l":
          this.pressedKeys.set("L", false);
          break;
        case "M":
        case "m":
          this.pressedKeys.set("M", false);
          break;
        case "N":
        case "n":
          this.pressedKeys.set("N", false);
          break;
        case "O":
        case "o":
          this.pressedKeys.set("O", false);
          break;
        case "P":
        case "p":
          this.pressedKeys.set("P", false);
          break;
        case "Q":
        case "q":
          this.pressedKeys.set("Q", false);
          break;
        case "R":
        case "r":
          this.pressedKeys.set("R", false);
          break;
        case "S":
        case "s":
          this.pressedKeys.set("S", false);
          break;
        case "T":
        case "t":
          this.pressedKeys.set("T", false);
          break;
        case "U":
        case "u":
          this.pressedKeys.set("U", false);
          break;
        case "V":
        case "v":
          this.pressedKeys.set("V", false);
          break;
        case "W":
        case "w":
          this.pressedKeys.set("W", false);
          break;
        case "X":
        case "x":
          this.pressedKeys.set("X", false);
          break;
        case "Y":
        case "y":
          this.pressedKeys.set("Y", false);
          break;
        case "Z":
        case "z":
          this.pressedKeys.set("Z", false);
          break;
      }
      const pressedKeysArray = this.pressedKeysArray;
      for (let i = 1; i < pressedKeysArray.length; i++) {
        if (pressedKeysArray[i][1]) {
          return;
        }
      }
      this.pressedKeys.set("Any", false);
    };
  }
  async OnStart() {
    const objInstances = this.anp.project.sceneView.objects;
    for (let i = 0; i < objInstances.length; i++) {
      this.objects.push(GEOD3ObjectHandler.CreateRI(objInstances[i], this.anp, this.gameDiv.createDiv()));
    }
    for (let i = 0; i < this.objects.length; i++) {
      this.objects[i].OnStart();
    }
  }
  async OnNewFrame() {
    this.gameDiv.focus();
    const renderingOrder = [];
    for (let i = 0; i < this.objects.length; i++) {
      const currObj = this.objects[i];
      currObj.Render();
      this.PlaceIntoSpriteArray(renderingOrder, currObj);
    }
    for (let i = 0; i < renderingOrder.length; i++) {
      const currSprite = renderingOrder[i];
      currSprite.objDiv.style.zIndex = i + "";
    }
    for (let i = 0; i < this.objects.length; i++) {
      this.objects[i].OnNewFrame();
    }
  }
  PlaceIntoSpriteArray(arr, newItem) {
    let low = 0;
    let high = arr.length;
    const newZ = GEOD3ObjectHandler.GetVariable(newItem, "z");
    while (low < high) {
      const mid = Math.floor((low + high) / 2);
      const midZ = GEOD3ObjectHandler.GetVariable(arr[mid], "z");
      if (midZ < newZ) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    arr.splice(low, 0, newItem);
  }
};
GameView.icon = "\u25B6\uFE0F";

// classes/tabs/scene-view.ts
var SceneView = class extends Tab {
  constructor(anp) {
    super(anp);
    this.objects = [];
  }
  Focus(div) {
    div.empty();
    div.className = "geod3-tab-container hbox";
    this.hierarchyDiv = div.createDiv("geod3-object-list vbox");
    const sceneScrollWrapper = div.createDiv("geod3-scene-scroll-wrapper");
    const sceneWrapper = sceneScrollWrapper.createDiv("geod3-scene-wrapper");
    this.sceneDiv = sceneWrapper.createDiv("geod3-scene");
    this.inspectorDiv = div.createDiv("geod3-inspector vbox");
    const listDiv = this.hierarchyDiv.createDiv("vbox");
    for (let i = 0; i < this.objects.length; i++) {
      const objectDiv = listDiv.createDiv("geod3-object-in-list hbox pointer-hover");
      const currObj = this.objects[i];
      objectDiv.textContent = currObj.idInScene + ": " + currObj.name;
      objectDiv.onclick = () => {
        GEOD3ObjectHandler.CreateII(currObj, this.anp, this.inspectorDiv);
      };
    }
    const buttonsDiv = this.hierarchyDiv.createDiv("hbox");
    const refreshButton = buttonsDiv.createEl("button", { text: "\u27F3" });
    const addObjButton = buttonsDiv.createEl("button", { text: "+" });
    refreshButton.className = "geod3-secondary-button";
    addObjButton.className = "geod3-add-button";
    refreshButton.style.width = "50%";
    addObjButton.style.width = "50%";
    refreshButton.onclick = () => {
      this.sceneDiv.empty();
      for (let i = 0; i < this.objects.length; i++) {
        const currObj = GEOD3ObjectHandler.CreateRI(this.objects[i], this.anp, this.sceneDiv.createDiv());
        currObj.Render();
      }
    };
    addObjButton.onclick = () => {
      const index = this.objects.length;
      const newObj = new GEOD3Object(index);
      const objectDiv = listDiv.createDiv("geod3-object-in-list hbox pointer-hover");
      objectDiv.createEl("div", { text: newObj.idInScene + ": " + newObj.name });
      this.objects.push(newObj);
      objectDiv.onclick = () => {
        GEOD3ObjectHandler.CreateII(newObj, this.anp, this.inspectorDiv);
      };
    };
  }
  UnFocus(div) {
    div.empty();
  }
};
SceneView.icon = "\u{1F310}";

// classes/tabs/script-editor.ts
var ScriptEditor = class extends Tab {
  async Focus(div) {
    div.empty();
    const objs = this.anp.project.sceneView.objects;
    if (this.currentObject === void 0) {
      if (objs.length > 0) {
        this.currentObject = objs[0];
      } else {
        div.createEl("h1", { text: "Create Objects in the Scene View first!" });
        return;
      }
    }
    div.className = "geod3-tab-container hbox";
    const leftSide = div.createDiv("geod3-script-wrapper vbox");
    const topDiv = leftSide.createDiv("geod3-script-navigator hbox");
    const objIDInput = topDiv.createEl("select");
    const clusterTypeInput = topDiv.createEl("select");
    const clusterNumberInput = topDiv.createEl("input", { type: "number", value: "0" });
    for (let i = 0; i < objs.length; i++) {
      const currObj = objs[i];
      objIDInput.createEl("option", { text: currObj.idInScene + ": " + currObj.name, value: i + "" });
    }
    objIDInput.value = this.currentObject.idInScene + "";
    clusterTypeInput.createEl("option", { text: "On Start", value: "On Start" });
    clusterTypeInput.createEl("option", { text: "On New Frame", value: "On New Frame" });
    clusterTypeInput.value = "On Start";
    clusterNumberInput.min = "0";
    this.scriptDiv = leftSide.createDiv("geod3-script");
    const blockPool = div.createDiv("geod3-block-pool");
    this.blocksDiv = blockPool.createDiv("geod3-blocks-list vbox");
    this.delDiv = blockPool.createDiv("geod3-block-delete-div");
    const LoadScript = () => {
      this.scriptDiv.empty();
      const obj = this.currentObject;
      const scriptType = clusterTypeInput.value === "On Start" ? obj.onStart : obj.onNewFrame;
      const index = parseInt(clusterNumberInput.value);
      if (index >= scriptType.length) {
        scriptType.push(new AChainI([new ADoNothingI()]));
        clusterNumberInput.max = scriptType.length + "";
      }
      AFHandler.CreateEI(scriptType[index], this.scriptDiv.createDiv(), this.anp);
    };
    this.CreateBlockPool();
    LoadScript();
    objIDInput.onchange = () => {
      this.currentObject = objs[parseInt(objIDInput.value)];
      const obj = this.currentObject;
      const scriptType = clusterTypeInput.value === "On Start" ? obj.onStart : obj.onNewFrame;
      clusterNumberInput.value = "0";
      clusterNumberInput.max = scriptType.length + "";
      LoadScript();
    };
    clusterTypeInput.onchange = () => {
      const obj = this.currentObject;
      const scriptType = clusterTypeInput.value === "On Start" ? obj.onStart : obj.onNewFrame;
      clusterNumberInput.value = "0";
      clusterNumberInput.max = scriptType.length + "";
      LoadScript();
    };
    clusterNumberInput.onchange = () => {
      LoadScript();
    };
  }
  CreateBlockPool() {
    this.blocksDiv.empty();
    this.delDiv.addEventListener("dragover", (event) => {
      event.preventDefault();
      if (event.dataTransfer !== null) {
        event.dataTransfer.dropEffect = "copy";
      }
      this.delDiv.className = "geod3-block-delete-div-hover";
    });
    this.delDiv.addEventListener("dragleave", (event) => {
      event.stopPropagation();
      this.delDiv.className = "geod3-block-delete-div";
    });
    this.delDiv.addEventListener("drop", (event) => {
      if (!(this.currentlyDraggedBlock === void 0 || this.currentlyDraggedBlockIsCopy)) {
        this.currentlyDraggedBlock.div.remove();
        const parentEI = this.currentlyDraggedBlock.parentEI;
        if (parentEI !== void 0) {
          parentEI.RemoveParameter(this.currentlyDraggedBlock.instance);
          parentEI.DisplayBlock();
        }
      }
    });
    const chainI = AFHandler.CreateI(1 /* chain */, void 0);
    const getI = AFHandler.CreateI(2 /* get */, void 0);
    const setI = AFHandler.CreateI(3 /* set */, void 0);
    const ifI = AFHandler.CreateI(4 /* if */, void 0);
    const ifElseI = AFHandler.CreateI(5 /* ifelse */, void 0);
    const compareI = AFHandler.CreateI(6 /* compare */, void 0);
    const keydownI = AFHandler.CreateI(7 /* keydown */, void 0);
    const addI = AFHandler.CreateI(8 /* add */, void 0);
    const chainBlock = AFHandler.CreateEI(chainI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const getBlock = AFHandler.CreateEI(getI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const setBlock = AFHandler.CreateEI(setI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const ifBlock = AFHandler.CreateEI(ifI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const ifElseBlock = AFHandler.CreateEI(ifElseI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const compareBlock = AFHandler.CreateEI(compareI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const keydownBlock = AFHandler.CreateEI(keydownI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const addBlock = AFHandler.CreateEI(addI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    AFEI.MakeBlockDraggable(chainBlock, this.anp, true);
    AFEI.MakeBlockDraggable(getBlock, this.anp, true);
    AFEI.MakeBlockDraggable(setBlock, this.anp, true);
    AFEI.MakeBlockDraggable(ifBlock, this.anp, true);
    AFEI.MakeBlockDraggable(ifElseBlock, this.anp, true);
    AFEI.MakeBlockDraggable(compareBlock, this.anp, true);
    AFEI.MakeBlockDraggable(keydownBlock, this.anp, true);
    AFEI.MakeBlockDraggable(addBlock, this.anp, true);
  }
  UnFocus(div) {
    div.empty();
  }
};
ScriptEditor.icon = "\u{1F4DC}";

// classes/project.ts
var Project = class {
  get fileManager() {
    return this.tabs[0];
  }
  get sceneView() {
    return this.tabs[1];
  }
  get scriptEditor() {
    return this.tabs[2];
  }
  get gameView() {
    return this.tabs[3];
  }
  get fileManagerTabID() {
    return 0;
  }
  get sceneViewTabID() {
    return 1;
  }
  get scriptEditorTabID() {
    return 2;
  }
  get gameViewTabID() {
    return 3;
  }
  constructor(app) {
    this.anp = new AppAndProject(app, this);
    this.tabs = [];
    this.tabs.push(new GEOD3FileManager(this.anp));
    this.tabs.push(new SceneView(this.anp));
    this.tabs.push(new ScriptEditor(this.anp));
    this.tabs.push(new GameView(this.anp));
    this.activeTabID = 0;
  }
  async Load() {
    await this.LoadFiles();
    await this.GrabFileDependencies();
    await this.LoadObjects();
  }
  async LoadFiles() {
    await this.fileManager.LoadFiles(this.anp);
  }
  async GrabFileDependencies() {
    const fm = this.fileManager;
    for (let i = 0; i < fm.files.length; i++) {
      await fm.files[i].GrabDependencies(this.anp);
    }
  }
  async LoadObjects() {
    const sv = this.sceneView;
    const path = (0, import_obsidian4.normalizePath)(this.anp.project.pathToProject + "/RESERVED FOLDER DO NOT RENAME/Objects.md");
    const tFile = this.anp.app.vault.getFileByPath(path);
    if (tFile === null) {
      return;
    }
    const data = await this.anp.app.vault.cachedRead(tFile);
    const plainObj = JSON.parse(data);
    sv.objects = plainObj.objects;
    const loadFunction = (plainFunct) => {
      const newFunct = Object.assign(AFHandler.CreateI(plainFunct.type, plainFunct.parameters), plainFunct);
      for (let i = 0; i < newFunct.defaultParameters.length; i++) {
        const isStruct = plainFunct.defaultParameters[i].name !== void 0;
        if (isStruct) {
          const plainStruct = plainFunct.defaultParameters[i];
          newFunct.defaultParameters[i] = Object.assign(ASHandler.CreateI(plainStruct.type, plainStruct.scope, plainStruct.name), plainStruct);
        } else {
          newFunct.defaultParameters[i] = loadFunction(plainFunct.defaultParameters[i]);
        }
      }
      for (let i = 0; i < newFunct.parameters.length; i++) {
        const isStruct = plainFunct.parameters[i].name !== void 0;
        if (isStruct) {
          const plainStruct = plainFunct.parameters[i];
          newFunct.parameters[i] = Object.assign(ASHandler.CreateI(plainStruct.type, plainStruct.scope, plainStruct.name), plainStruct);
        } else {
          newFunct.parameters[i] = loadFunction(plainFunct.parameters[i]);
        }
      }
      return newFunct;
    };
    for (let i = 0; i < plainObj.objects.length; i++) {
      const newObj = Object.assign(new GEOD3Object(i), plainObj.objects[i]);
      sv.objects[i] = newObj;
      for (let j = 0; j < newObj.variables.length; j++) {
        const plainVar = sv.objects[i].variables[j];
        const newVar = Object.assign(ASHandler.CreateI(plainVar.type, plainVar.scope, plainVar.name), plainVar);
        sv.objects[i].variables[j] = newVar;
      }
      for (let j = 0; j < newObj.onStart.length; j++) {
        const plainFunct = sv.objects[i].onStart[j];
        const newFunct = loadFunction(plainFunct);
        sv.objects[i].onStart[j] = newFunct;
      }
      for (let j = 0; j < newObj.onNewFrame.length; j++) {
        const plainFunct = sv.objects[i].onNewFrame[j];
        const newFunct = loadFunction(plainFunct);
        sv.objects[i].onNewFrame[j] = newFunct;
      }
    }
  }
  async Display(div) {
    div.empty();
    const tabBar = div.createDiv("geod3-tab-bar hbox");
    const tabContainer = div.createDiv("geod3-tab-container");
    const tabIcons = [];
    const filesTab = tabBar.createEl("button", { text: GEOD3FileManager.icon });
    const sceneViewTab = tabBar.createEl("button", { text: SceneView.icon });
    const scriptEditorTab = tabBar.createEl("button", { text: ScriptEditor.icon });
    const gameTab = tabBar.createEl("button", { text: GameView.icon });
    const saveButton = tabBar.createEl("button", { text: "\u{1F4BE}Save" });
    saveButton.className = "geod3-secondary-button";
    saveButton.onclick = async () => {
      saveButton.disabled = true;
      saveButton.textContent = "\u27F3Saving...";
      const path = (0, import_obsidian4.normalizePath)(this.anp.project.pathToProject + "/RESERVED FOLDER DO NOT RENAME/Objects.md");
      const data = JSON.stringify(new SceneDTO(this.anp.project.sceneView.objects));
      await this.anp.app.vault.adapter.write(path, data);
      saveButton.disabled = false;
      saveButton.textContent = "\u{1F4BE}Save";
    };
    filesTab.className = "geod3-tab-icon";
    sceneViewTab.className = "geod3-tab-icon";
    scriptEditorTab.className = "geod3-tab-icon";
    gameTab.className = "geod3-tab-icon";
    tabIcons.push(filesTab);
    tabIcons.push(sceneViewTab);
    tabIcons.push(scriptEditorTab);
    tabIcons.push(gameTab);
    tabIcons[this.activeTabID].className = "geod3-tab-icon-opened";
    this.tabs[this.activeTabID].Focus(tabContainer);
    const switchToTab = async (index) => {
      tabIcons[this.activeTabID].className = "geod3-tab-icon";
      await this.tabs[this.activeTabID].UnFocus(tabContainer);
      this.activeTabID = index;
      tabIcons[this.activeTabID].className = "geod3-tab-icon-opened";
      this.tabs[this.activeTabID].Focus(tabContainer);
    };
    this.SwitchToTab = switchToTab;
    filesTab.onclick = () => {
      switchToTab(0);
    };
    sceneViewTab.onclick = () => {
      switchToTab(1);
    };
    scriptEditorTab.onclick = () => {
      switchToTab(2);
    };
    gameTab.onclick = () => {
      switchToTab(3);
    };
  }
};
var AppAndProject = class {
  constructor(app, project) {
    this.app = app;
    this.project = project;
  }
};
var SceneDTO = class {
  constructor(objects = []) {
    this.objects = objects;
  }
};

// classes/geod3-view.ts
var VIEW_TYPE_GEOD3_PROJECT = "geod3-view";
var GEOD3View = class extends import_obsidian5.ItemView {
  constructor(leaf, defaultPath) {
    super(leaf);
    this.defaultPath = defaultPath;
  }
  getViewType() {
    return VIEW_TYPE_GEOD3_PROJECT;
  }
  getDisplayText() {
    return "GEO:D3";
  }
  async onOpen() {
    const mainEl = this.containerEl.children[1];
    mainEl.empty();
    const mainDiv = mainEl.createDiv("geod3-main-div");
    const mainDivTemp = mainDiv.createDiv("geod3-main-div");
    mainDivTemp.tabIndex = -1;
    mainDivTemp.focus();
    mainDivTemp.createEl("h1", { text: "Path to project:" });
    const pathInput = mainDivTemp.createEl("input", { type: "text", value: this.defaultPath });
    const submitButton = mainDivTemp.createEl("button", { text: "Open" });
    const onSubmit = async () => {
      const folderPath = (0, import_obsidian5.normalizePath)(pathInput.value);
      const dataPath = folderPath + "/RESERVED FOLDER DO NOT RENAME/Objects.md";
      this.project = new Project(this.app);
      this.project.pathToProject = folderPath;
      if (!await this.app.vault.adapter.exists(dataPath)) {
        const newDTO = new SceneDTO();
        const pathParts = dataPath.split("/");
        let pathSoFar = "";
        for (let i = 0; !await this.app.vault.adapter.exists(dataPath) && i < pathParts.length; i++) {
          const isLast = i === pathParts.length - 1;
          pathSoFar += pathParts[i] + (isLast ? "" : "/");
          if (isLast) {
            await this.app.vault.create(pathSoFar, JSON.stringify(newDTO));
          } else {
            await this.app.vault.createFolder(pathSoFar);
          }
        }
      }
      await this.project.Load();
      await this.project.Display(mainDiv);
    };
    submitButton.onclick = onSubmit;
    mainDivTemp.onkeydown = (e) => {
      if (e.key === "Enter") {
        mainDivTemp.blur();
        mainDivTemp.onkeydown = () => {
        };
        onSubmit();
      }
    };
  }
  async onClose() {
    this.project.gameView.stillRunning = false;
  }
};

// main.ts
var import_obsidian6 = require("obsidian");
var DEFAULT_SETTINGS = {
  projectPath: "New GEOD3 Project"
};
var GEOD3 = class extends import_obsidian6.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_GEOD3_PROJECT,
      (leaf) => new GEOD3View(leaf, this.settings.projectPath)
    );
    this.addRibbonIcon("boxes", "Open GEOD3", () => {
      this.activateView(VIEW_TYPE_GEOD3_PROJECT);
    });
    this.addCommand({
      id: "open-geod3-view",
      name: "Open GEOD3",
      callback: () => {
        this.activateView(VIEW_TYPE_GEOD3_PROJECT);
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  activateView(view_type) {
    let leaf = null;
    leaf = this.app.workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian6.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    leaf.setViewState({ type: view_type, active: true });
  }
};
var SampleSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian6.Setting(containerEl).setName("Default Source Path").setDesc("The vault path to automatically fill in for the source path").addText((text) => text.setPlaceholder("Default Source Path").setValue(this.plugin.settings.projectPath).onChange(async (value) => {
      this.plugin.settings.projectPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjbGFzc2VzL2dlb2QzLXZpZXcudHMiLCAiY2xhc3Nlcy9wcm9qZWN0LnRzIiwgImNsYXNzZXMvdGFicy9maWxlLW1hbmFnZXIudHMiLCAiY2xhc3Nlcy90YWJzL3RhYi50cyIsICJjbGFzc2VzL3RhYnMvZmlsZS10eXBlcy9nZW9kMy1maWxlLnRzIiwgImNsYXNzZXMvdGFicy9maWxlLXR5cGVzL2dlb2QzLWZvbGRlci50cyIsICJjbGFzc2VzL3RhYnMvZmlsZS10eXBlcy9yZWFsLWZpbGUudHMiLCAiY29sb3JzLnRzIiwgImNsYXNzZXMvc3RydWN0cy9zdHJ1Y3QudHMiLCAiY2xhc3Nlcy90YWJzL2dlb2QzLW9iamVjdC50cyIsICJjbGFzc2VzL2Z1bmN0aW9ucy9mdW5jdGlvbi50cyIsICJjbGFzc2VzL3RhYnMvZ2FtZS12aWV3LnRzIiwgImNsYXNzZXMvdGFicy9zY2VuZS12aWV3LnRzIiwgImNsYXNzZXMvdGFicy9zY3JpcHQtZWRpdG9yLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBHRU9EM1ZpZXcsIFZJRVdfVFlQRV9HRU9EM19QUk9KRUNUIH0gZnJvbSAnY2xhc3Nlcy9nZW9kMy12aWV3JztcclxuaW1wb3J0IHsgQXBwLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbi8qKlxyXG4gKiBHRU86RDMgc3RhbmRzIGZvciBHYW1lIEVuZ2luZSBpbiBPYnNpZGlhbjogRGV2ZWxvcGVkIGJ5IDNyZC1wYXJ0eS5cclxuICovXHJcbmludGVyZmFjZSBHRU9EM1NldHRpbmdzIHtcclxuXHRwcm9qZWN0UGF0aDogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBHRU9EM1NldHRpbmdzID0ge1xyXG5cdHByb2plY3RQYXRoOiAnTmV3IEdFT0QzIFByb2plY3QnXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdFT0QzIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogR0VPRDNTZXR0aW5ncztcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyVmlldyhcclxuXHRcdFx0VklFV19UWVBFX0dFT0QzX1BST0pFQ1QsXHJcblx0XHRcdChsZWFmKSA9PiBuZXcgR0VPRDNWaWV3KGxlYWYsIHRoaXMuc2V0dGluZ3MucHJvamVjdFBhdGgpXHJcblx0XHQpO1xyXG5cclxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbignYm94ZXMnLCAnT3BlbiBHRU9EMycsICgpID0+IHtcclxuXHRcdFx0dGhpcy5hY3RpdmF0ZVZpZXcoVklFV19UWVBFX0dFT0QzX1BST0pFQ1QpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdvcGVuLWdlb2QzLXZpZXcnLFxyXG5cdFx0XHRuYW1lOiAnT3BlbiBHRU9EMycsXHJcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5hY3RpdmF0ZVZpZXcoVklFV19UWVBFX0dFT0QzX1BST0pFQ1QpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTYW1wbGVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG5cclxuXHRhY3RpdmF0ZVZpZXcodmlld190eXBlOiBzdHJpbmcpIHtcclxuXHRcdGxldCBsZWFmOiBXb3Jrc3BhY2VMZWFmIHwgbnVsbCA9IG51bGw7XHJcblxyXG5cdFx0bGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcclxuXHRcdGlmIChsZWFmID09PSBudWxsKSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJGYWlsZWQgdG8gY3JlYXRlIHZpZXc6IHdvcmtzcGFjZSBsZWFmIHdhcyBudWxsXCIpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRsZWFmLnNldFZpZXdTdGF0ZSh7IHR5cGU6IHZpZXdfdHlwZSwgYWN0aXZlOiB0cnVlIH0pO1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgU2FtcGxlU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogR0VPRDM7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEdFT0QzKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcclxuXHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnRGVmYXVsdCBTb3VyY2UgUGF0aCcpXHJcblx0XHRcdC5zZXREZXNjKCdUaGUgdmF1bHQgcGF0aCB0byBhdXRvbWF0aWNhbGx5IGZpbGwgaW4gZm9yIHRoZSBzb3VyY2UgcGF0aCcpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRGVmYXVsdCBTb3VyY2UgUGF0aCcpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb2plY3RQYXRoKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnByb2plY3RQYXRoID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KSk7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBJdGVtVmlldywgbm9ybWFsaXplUGF0aCwgV29ya3NwYWNlTGVhZiB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgUHJvamVjdCwgU2NlbmVEVE8gfSBmcm9tICcuL3Byb2plY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRV9HRU9EM19QUk9KRUNUID0gJ2dlb2QzLXZpZXcnO1xyXG5cclxuLyoqXHJcbiAqIE9wZW5zIGEgcHJvamVjdFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdFT0QzVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuICAgIGRlZmF1bHRQYXRoOiBzdHJpbmc7XHJcbiAgICBwcm9qZWN0OiBQcm9qZWN0O1xyXG4gICAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgZGVmYXVsdFBhdGg6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFBhdGggPSBkZWZhdWx0UGF0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWaWV3VHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gVklFV19UWVBFX0dFT0QzX1BST0pFQ1Q7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGlzcGxheVRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuICdHRU86RDMnO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uT3BlbigpIHtcclxuICAgICAgICBjb25zdCBtYWluRWwgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdO1xyXG4gICAgICAgIG1haW5FbC5lbXB0eSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG1haW5EaXYgPSBtYWluRWwuY3JlYXRlRGl2KCdnZW9kMy1tYWluLWRpdicpO1xyXG4gICAgICAgIGNvbnN0IG1haW5EaXZUZW1wID0gbWFpbkRpdi5jcmVhdGVEaXYoJ2dlb2QzLW1haW4tZGl2Jyk7XHJcblxyXG4gICAgICAgIG1haW5EaXZUZW1wLnRhYkluZGV4ID0gLTE7XHJcbiAgICAgICAgbWFpbkRpdlRlbXAuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgbWFpbkRpdlRlbXAuY3JlYXRlRWwoJ2gxJywgeyB0ZXh0OiAnUGF0aCB0byBwcm9qZWN0OicgfSApO1xyXG4gICAgICAgIGNvbnN0IHBhdGhJbnB1dCA9IG1haW5EaXZUZW1wLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogdGhpcy5kZWZhdWx0UGF0aCB9ICk7XHJcbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gbWFpbkRpdlRlbXAuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ09wZW4nIH0gKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBvblN1Ym1pdCA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IG5vcm1hbGl6ZVBhdGgocGF0aElucHV0LnZhbHVlKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YVBhdGggPSBmb2xkZXJQYXRoICsgJy9SRVNFUlZFRCBGT0xERVIgRE8gTk9UIFJFTkFNRS9PYmplY3RzLm1kJztcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0ID0gbmV3IFByb2plY3QodGhpcy5hcHApO1xyXG4gICAgICAgICAgICB0aGlzLnByb2plY3QucGF0aFRvUHJvamVjdCA9IGZvbGRlclBhdGg7XHJcbiAgICAgICAgICAgIGlmICghYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZGF0YVBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdEVE8gPSBuZXcgU2NlbmVEVE8oKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoUGFydHMgPSBkYXRhUGF0aC5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhdGhTb0ZhciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7ICEoYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZGF0YVBhdGgpKSAmJiBpIDwgcGF0aFBhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNMYXN0ID0gaSA9PT0gcGF0aFBhcnRzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aFNvRmFyICs9IHBhdGhQYXJ0c1tpXSArIChpc0xhc3QgPyAnJyA6ICcvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUocGF0aFNvRmFyLCBKU09OLnN0cmluZ2lmeShuZXdEVE8pKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGVGb2xkZXIocGF0aFNvRmFyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9qZWN0LkxvYWQoKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9qZWN0LkRpc3BsYXkobWFpbkRpdik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5vbmNsaWNrID0gb25TdWJtaXQ7XHJcbiAgICAgICAgbWFpbkRpdlRlbXAub25rZXlkb3duID0gKGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICBtYWluRGl2VGVtcC5ibHVyKCk7XHJcbiAgICAgICAgICAgICAgICBtYWluRGl2VGVtcC5vbmtleWRvd24gPSAoKSA9PiB7fTtcclxuICAgICAgICAgICAgICAgIG9uU3VibWl0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25DbG9zZSgpIHtcclxuICAgICAgICB0aGlzLnByb2plY3QuZ2FtZVZpZXcuc3RpbGxSdW5uaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEFwcCwgbm9ybWFsaXplUGF0aCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBHRU9EM0ZpbGVNYW5hZ2VyIH0gZnJvbSBcIi4vdGFicy9maWxlLW1hbmFnZXJcIjtcclxuaW1wb3J0IHsgR2FtZVZpZXcgfSBmcm9tIFwiLi90YWJzL2dhbWUtdmlld1wiO1xyXG5pbXBvcnQgeyBTY2VuZVZpZXcgfSBmcm9tIFwiLi90YWJzL3NjZW5lLXZpZXdcIjtcclxuaW1wb3J0IHsgU2NyaXB0RWRpdG9yIH0gZnJvbSBcIi4vdGFicy9zY3JpcHQtZWRpdG9yXCI7XHJcbmltcG9ydCB7IFRhYiB9IGZyb20gXCIuL3RhYnMvdGFiXCI7XHJcbmltcG9ydCB7IEdFT0QzT2JqZWN0IH0gZnJvbSBcIi4vdGFicy9nZW9kMy1vYmplY3RcIjtcclxuaW1wb3J0IHsgQVNIYW5kbGVyIH0gZnJvbSBcIi4vc3RydWN0cy9zdHJ1Y3RcIjtcclxuaW1wb3J0IHsgQUYsIEFGSGFuZGxlciwgQUZJIH0gZnJvbSBcIi4vZnVuY3Rpb25zL2Z1bmN0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XHJcbiAgICBwYXRoVG9Qcm9qZWN0OiBzdHJpbmc7XHJcbiAgICB0YWJzOiBUYWJbXTtcclxuXHJcbiAgICBnZXQgZmlsZU1hbmFnZXIoKTogR0VPRDNGaWxlTWFuYWdlciB7XHJcbiAgICAgICAgcmV0dXJuIDxHRU9EM0ZpbGVNYW5hZ2VyPiB0aGlzLnRhYnNbMF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNjZW5lVmlldygpOiBTY2VuZVZpZXcge1xyXG4gICAgICAgIHJldHVybiA8U2NlbmVWaWV3PiB0aGlzLnRhYnNbMV07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNjcmlwdEVkaXRvcigpOiBTY3JpcHRFZGl0b3Ige1xyXG4gICAgICAgIHJldHVybiA8U2NyaXB0RWRpdG9yPiB0aGlzLnRhYnNbMl07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGdhbWVWaWV3KCk6IEdhbWVWaWV3IHtcclxuICAgICAgICByZXR1cm4gPEdhbWVWaWV3PiB0aGlzLnRhYnNbM107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZpbGVNYW5hZ2VyVGFiSUQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2NlbmVWaWV3VGFiSUQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2NyaXB0RWRpdG9yVGFiSUQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZ2FtZVZpZXdUYWJJRCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAzO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2ZVRhYklEOiBudW1iZXI7XHJcbiAgICBhbnA6IEFwcEFuZFByb2plY3RcclxuXHJcbiAgICBTd2l0Y2hUb1RhYjogKGluZGV4OiBudW1iZXIpID0+IFByb21pc2U8dm9pZD47XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHApIHtcclxuICAgICAgICB0aGlzLmFucCA9IG5ldyBBcHBBbmRQcm9qZWN0KGFwcCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy50YWJzID0gW107XHJcbiAgICAgICAgdGhpcy50YWJzLnB1c2gobmV3IEdFT0QzRmlsZU1hbmFnZXIodGhpcy5hbnApKTtcclxuICAgICAgICB0aGlzLnRhYnMucHVzaChuZXcgU2NlbmVWaWV3KHRoaXMuYW5wKSk7XHJcbiAgICAgICAgdGhpcy50YWJzLnB1c2gobmV3IFNjcmlwdEVkaXRvcih0aGlzLmFucCkpO1xyXG4gICAgICAgIHRoaXMudGFicy5wdXNoKG5ldyBHYW1lVmlldyh0aGlzLmFucCkpO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlVGFiSUQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIExvYWQoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5Mb2FkRmlsZXMoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLkdyYWJGaWxlRGVwZW5kZW5jaWVzKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5Mb2FkT2JqZWN0cygpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgTG9hZEZpbGVzKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZmlsZU1hbmFnZXIuTG9hZEZpbGVzKHRoaXMuYW5wKTtcclxuICAgIH1cclxuICAgIGFzeW5jIEdyYWJGaWxlRGVwZW5kZW5jaWVzKCkge1xyXG4gICAgICAgIGNvbnN0IGZtID0gdGhpcy5maWxlTWFuYWdlcjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZtLmZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGZtLmZpbGVzW2ldLkdyYWJEZXBlbmRlbmNpZXModGhpcy5hbnApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIExvYWRPYmplY3RzKCkge1xyXG4gICAgICAgIGNvbnN0IHN2ID0gdGhpcy5zY2VuZVZpZXc7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IG5vcm1hbGl6ZVBhdGgodGhpcy5hbnAucHJvamVjdC5wYXRoVG9Qcm9qZWN0ICsgJy9SRVNFUlZFRCBGT0xERVIgRE8gTk9UIFJFTkFNRS9PYmplY3RzLm1kJyk7XHJcbiAgICAgICAgY29uc3QgdEZpbGUgPSB0aGlzLmFucC5hcHAudmF1bHQuZ2V0RmlsZUJ5UGF0aChwYXRoKTtcclxuICAgICAgICBpZiAodEZpbGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hbnAuYXBwLnZhdWx0LmNhY2hlZFJlYWQodEZpbGUpO1xyXG4gICAgICAgIGNvbnN0IHBsYWluT2JqID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICBzdi5vYmplY3RzID0gcGxhaW5PYmoub2JqZWN0cztcclxuICAgICAgICBjb25zdCBsb2FkRnVuY3Rpb24gPSAocGxhaW5GdW5jdDogYW55KTogQUZJID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmV3RnVuY3QgPSBPYmplY3QuYXNzaWduKEFGSGFuZGxlci5DcmVhdGVJKHBsYWluRnVuY3QudHlwZSwgcGxhaW5GdW5jdC5wYXJhbWV0ZXJzKSwgcGxhaW5GdW5jdCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3RnVuY3QuZGVmYXVsdFBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzU3RydWN0ID0gcGxhaW5GdW5jdC5kZWZhdWx0UGFyYW1ldGVyc1tpXS5uYW1lICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFpblN0cnVjdCA9IHBsYWluRnVuY3QuZGVmYXVsdFBhcmFtZXRlcnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RnVuY3QuZGVmYXVsdFBhcmFtZXRlcnNbaV0gPSBPYmplY3QuYXNzaWduKEFTSGFuZGxlci5DcmVhdGVJKHBsYWluU3RydWN0LnR5cGUsIHBsYWluU3RydWN0LnNjb3BlLCBwbGFpblN0cnVjdC5uYW1lKSwgcGxhaW5TdHJ1Y3QpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdGdW5jdC5kZWZhdWx0UGFyYW1ldGVyc1tpXSA9IGxvYWRGdW5jdGlvbihwbGFpbkZ1bmN0LmRlZmF1bHRQYXJhbWV0ZXJzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0Z1bmN0LnBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzU3RydWN0ID0gcGxhaW5GdW5jdC5wYXJhbWV0ZXJzW2ldLm5hbWUgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGlmIChpc1N0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYWluU3RydWN0ID0gcGxhaW5GdW5jdC5wYXJhbWV0ZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0Z1bmN0LnBhcmFtZXRlcnNbaV0gPSBPYmplY3QuYXNzaWduKEFTSGFuZGxlci5DcmVhdGVJKHBsYWluU3RydWN0LnR5cGUsIHBsYWluU3RydWN0LnNjb3BlLCBwbGFpblN0cnVjdC5uYW1lKSwgcGxhaW5TdHJ1Y3QpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdGdW5jdC5wYXJhbWV0ZXJzW2ldID0gbG9hZEZ1bmN0aW9uKHBsYWluRnVuY3QucGFyYW1ldGVyc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ld0Z1bmN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYWluT2JqLm9iamVjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3T2JqID0gT2JqZWN0LmFzc2lnbihuZXcgR0VPRDNPYmplY3QoaSksIHBsYWluT2JqLm9iamVjdHNbaV0pO1xyXG4gICAgICAgICAgICBzdi5vYmplY3RzW2ldID0gbmV3T2JqO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld09iai52YXJpYWJsZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWluVmFyID0gc3Yub2JqZWN0c1tpXS52YXJpYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWYXIgPSBPYmplY3QuYXNzaWduKEFTSGFuZGxlci5DcmVhdGVJKHBsYWluVmFyLnR5cGUsIHBsYWluVmFyLnNjb3BlLCBwbGFpblZhci5uYW1lKSwgcGxhaW5WYXIpO1xyXG4gICAgICAgICAgICAgICAgc3Yub2JqZWN0c1tpXS52YXJpYWJsZXNbal0gPSBuZXdWYXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdPYmoub25TdGFydC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhaW5GdW5jdCA9IHN2Lm9iamVjdHNbaV0ub25TdGFydFtqXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Z1bmN0ID0gbG9hZEZ1bmN0aW9uKHBsYWluRnVuY3QpO1xyXG4gICAgICAgICAgICAgICAgc3Yub2JqZWN0c1tpXS5vblN0YXJ0W2pdID0gbmV3RnVuY3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdPYmoub25OZXdGcmFtZS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhaW5GdW5jdCA9IHN2Lm9iamVjdHNbaV0ub25OZXdGcmFtZVtqXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Z1bmN0ID0gbG9hZEZ1bmN0aW9uKHBsYWluRnVuY3QpO1xyXG4gICAgICAgICAgICAgICAgc3Yub2JqZWN0c1tpXS5vbk5ld0ZyYW1lW2pdID0gbmV3RnVuY3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgRGlzcGxheShkaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcbiAgICAgICAgZGl2LmVtcHR5KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRhYkJhciA9IGRpdi5jcmVhdGVEaXYoJ2dlb2QzLXRhYi1iYXIgaGJveCcpO1xyXG4gICAgICAgIGNvbnN0IHRhYkNvbnRhaW5lciA9IGRpdi5jcmVhdGVEaXYoJ2dlb2QzLXRhYi1jb250YWluZXInKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGFiSWNvbnM6IEhUTUxFbGVtZW50W10gPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgZmlsZXNUYWIgPSB0YWJCYXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogR0VPRDNGaWxlTWFuYWdlci5pY29uIH0gKTtcclxuICAgICAgICBjb25zdCBzY2VuZVZpZXdUYWIgPSB0YWJCYXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogU2NlbmVWaWV3Lmljb24gfSApO1xyXG4gICAgICAgIGNvbnN0IHNjcmlwdEVkaXRvclRhYiA9IHRhYkJhci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiBTY3JpcHRFZGl0b3IuaWNvbiB9ICk7XHJcbiAgICAgICAgY29uc3QgZ2FtZVRhYiA9IHRhYkJhci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiBHYW1lVmlldy5pY29uIH0gKTtcclxuICAgICAgICBjb25zdCBzYXZlQnV0dG9uID0gdGFiQmFyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdcdUQ4M0RcdURDQkVTYXZlJyB9ICk7XHJcbiAgICAgICAgc2F2ZUJ1dHRvbi5jbGFzc05hbWUgPSAnZ2VvZDMtc2Vjb25kYXJ5LWJ1dHRvbic7XHJcbiAgICAgICAgc2F2ZUJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBzYXZlQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdcdTI3RjNTYXZpbmcuLi4nO1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gbm9ybWFsaXplUGF0aCh0aGlzLmFucC5wcm9qZWN0LnBhdGhUb1Byb2plY3QgKyAnL1JFU0VSVkVEIEZPTERFUiBETyBOT1QgUkVOQU1FL09iamVjdHMubWQnKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04uc3RyaW5naWZ5KG5ldyBTY2VuZURUTyh0aGlzLmFucC5wcm9qZWN0LnNjZW5lVmlldy5vYmplY3RzKSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYW5wLmFwcC52YXVsdC5hZGFwdGVyLndyaXRlKHBhdGgsIGRhdGEpO1xyXG4gICAgICAgICAgICBzYXZlQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNhdmVCdXR0b24udGV4dENvbnRlbnQgPSAnXHVEODNEXHVEQ0JFU2F2ZSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmaWxlc1RhYi5jbGFzc05hbWUgPSAnZ2VvZDMtdGFiLWljb24nO1xyXG4gICAgICAgIHNjZW5lVmlld1RhYi5jbGFzc05hbWUgPSAnZ2VvZDMtdGFiLWljb24nO1xyXG4gICAgICAgIHNjcmlwdEVkaXRvclRhYi5jbGFzc05hbWUgPSAnZ2VvZDMtdGFiLWljb24nO1xyXG4gICAgICAgIGdhbWVUYWIuY2xhc3NOYW1lID0gJ2dlb2QzLXRhYi1pY29uJztcclxuXHJcbiAgICAgICAgdGFiSWNvbnMucHVzaChmaWxlc1RhYik7XHJcbiAgICAgICAgdGFiSWNvbnMucHVzaChzY2VuZVZpZXdUYWIpO1xyXG4gICAgICAgIHRhYkljb25zLnB1c2goc2NyaXB0RWRpdG9yVGFiKTtcclxuICAgICAgICB0YWJJY29ucy5wdXNoKGdhbWVUYWIpO1xyXG5cclxuICAgICAgICB0YWJJY29uc1t0aGlzLmFjdGl2ZVRhYklEXS5jbGFzc05hbWUgPSAnZ2VvZDMtdGFiLWljb24tb3BlbmVkJztcclxuICAgICAgICB0aGlzLnRhYnNbdGhpcy5hY3RpdmVUYWJJRF0uRm9jdXModGFiQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3dpdGNoVG9UYWIgPSBhc3luYyAoaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICB0YWJJY29uc1t0aGlzLmFjdGl2ZVRhYklEXS5jbGFzc05hbWUgPSAnZ2VvZDMtdGFiLWljb24nO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnRhYnNbdGhpcy5hY3RpdmVUYWJJRF0uVW5Gb2N1cyh0YWJDb250YWluZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVRhYklEID0gaW5kZXg7XHJcbiAgICAgICAgICAgIHRhYkljb25zW3RoaXMuYWN0aXZlVGFiSURdLmNsYXNzTmFtZSA9ICdnZW9kMy10YWItaWNvbi1vcGVuZWQnO1xyXG4gICAgICAgICAgICB0aGlzLnRhYnNbdGhpcy5hY3RpdmVUYWJJRF0uRm9jdXModGFiQ29udGFpbmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuU3dpdGNoVG9UYWIgPSBzd2l0Y2hUb1RhYjtcclxuXHJcbiAgICAgICAgZmlsZXNUYWIub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoVG9UYWIoMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNjZW5lVmlld1RhYi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2hUb1RhYigxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NyaXB0RWRpdG9yVGFiLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaFRvVGFiKDIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnYW1lVGFiLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaFRvVGFiKDMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFwcEFuZFByb2plY3Qge1xyXG4gICAgYXBwOiBBcHA7XHJcbiAgICBwcm9qZWN0OiBQcm9qZWN0O1xyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHByb2plY3Q6IFByb2plY3QpIHtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2NlbmVEVE8ge1xyXG4gICAgb2JqZWN0czogR0VPRDNPYmplY3RbXTtcclxuICAgIGNvbnN0cnVjdG9yKG9iamVjdHM6IEdFT0QzT2JqZWN0W10gPSBbXSkge1xyXG4gICAgICAgIHRoaXMub2JqZWN0cyA9IG9iamVjdHM7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgVEZpbGUsIFRGb2xkZXIgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgVGFiIH0gZnJvbSBcIi4vdGFiXCI7XHJcbmltcG9ydCB7IEFwcEFuZFByb2plY3QgfSBmcm9tIFwiY2xhc3Nlcy9wcm9qZWN0XCI7XHJcbmltcG9ydCB7IEdFT0QzRmlsZSB9IGZyb20gXCIuL2ZpbGUtdHlwZXMvZ2VvZDMtZmlsZVwiO1xyXG5pbXBvcnQgeyBHRU9EM0ZvbGRlciB9IGZyb20gXCIuL2ZpbGUtdHlwZXMvZ2VvZDMtZm9sZGVyXCI7XHJcbmltcG9ydCB7IEltYWdlRmlsZSwgU291bmRGaWxlLCBWaWRlb0ZpbGUgfSBmcm9tIFwiLi9maWxlLXR5cGVzL3JlYWwtZmlsZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdFT0QzRmlsZU1hbmFnZXIgZXh0ZW5kcyBUYWIge1xyXG4gICAgc3RhdGljIG92ZXJyaWRlIGljb24gPSAnXHVEODNEXHVEQ0MxJztcclxuICAgIGZpbGVzOiBHRU9EM0ZpbGVbXTtcclxuICAgIG1haW5EaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgZmlsZURpdjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBwcm9wZXJ0aWVzRGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIFxyXG4gICAgZ2V0IGltYWdlRmlsZXMoKTogSW1hZ2VGaWxlW10ge1xyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maWxlc1tpXSBpbnN0YW5jZW9mIEltYWdlRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goPEltYWdlRmlsZT4gdGhpcy5maWxlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHNvdW5kRmlsZXMoKTogU291bmRGaWxlW10ge1xyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maWxlc1tpXSBpbnN0YW5jZW9mIFNvdW5kRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goPFNvdW5kRmlsZT4gdGhpcy5maWxlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IHZpZGVvRmlsZXMoKTogVmlkZW9GaWxlW10ge1xyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maWxlc1tpXSBpbnN0YW5jZW9mIFZpZGVvRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goPFZpZGVvRmlsZT4gdGhpcy5maWxlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxuXHJcbiAgICBHZXRGaWxlKHBhdGg6IFN0cmluZykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maWxlc1tpXS5wYXRoID09PSBwYXRoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWxlc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhdGggJyArIHBhdGggKyAnIG5vdCBmb3VuZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIEdldEZpbGVCeVByaW1pdGl2ZVBhdGgocGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVzW2ldLnBhdGgudmFsdWVPZigpID09PSBwYXRoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWxlc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhdGggJyArIHBhdGggKyAnIG5vdCBmb3VuZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFucDogQXBwQW5kUHJvamVjdCkge1xyXG4gICAgICAgIHN1cGVyKGFucCk7XHJcbiAgICAgICAgdGhpcy5maWxlcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBLTk9XTl9GSUxFX1RZUEVTID0gW1xyXG4gICAgICAgICdcdUQ4M0RcdURDQzFGb2xkZXInLFxyXG4gICAgICAgICdcdUQ4M0RcdUREQkNcdUZFMEZJbWFnZScsXHJcbiAgICAgICAgJ1x1RDgzRFx1REQwQVNvdW5kJyxcclxuICAgICAgICAnXHVEODNDXHVERjlFXHVGRTBGVmlkZW8nXHJcbiAgICBdXHJcblxyXG4gICAgcHJpdmF0ZSBBc3NpZ25PYmplY3RGcm9tRmlsZVR5cGUocGxhaW5PYmo6IGFueSwgcGF0aDogc3RyaW5nLCBwYXJlbnRQYXRoOiBTdHJpbmcpOiBHRU9EM0ZpbGUge1xyXG4gICAgICAgIHBsYWluT2JqLnBhdGggPSBwYXRoO1xyXG4gICAgICAgIHBsYWluT2JqLnBhcmVudFBhdGggPSBwYXJlbnRQYXRoO1xyXG4gICAgICAgIHN3aXRjaChwbGFpbk9iai50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ1x1RDgzRFx1RENDMUZvbGRlcic6XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgR0VPRDNGb2xkZXIocGF0aCwgcGFyZW50UGF0aCksIHBsYWluT2JqKTtcclxuICAgICAgICAgICAgY2FzZSAnXHVEODNEXHVEREJDXHVGRTBGSW1hZ2UnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEltYWdlRmlsZShwYXRoLCBwYXJlbnRQYXRoKSwgcGxhaW5PYmopO1xyXG4gICAgICAgICAgICBjYXNlICdcdUQ4M0RcdUREMEFTb3VuZCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgU291bmRGaWxlKHBhdGgsIHBhcmVudFBhdGgpLCBwbGFpbk9iaik7XHJcbiAgICAgICAgICAgIGNhc2UgJ1x1RDgzQ1x1REY5RVx1RkUwRlZpZGVvJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBWaWRlb0ZpbGUocGF0aCwgcGFyZW50UGF0aCksIHBsYWluT2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIENyZWF0ZUZpbGVPZlR5cGUocGF0aDogc3RyaW5nLCBwYXJlbnRQYXRoOiBTdHJpbmcsIHR5cGU6IHN0cmluZyk6IEdFT0QzRmlsZSB7XHJcbiAgICAgICAgc3dpdGNoKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnXHVEODNEXHVEQ0MxRm9sZGVyJzpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR0VPRDNGb2xkZXIocGF0aCwgcGFyZW50UGF0aCk7XHJcbiAgICAgICAgICAgIGNhc2UgJ1x1RDgzRFx1RERCQ1x1RkUwRkltYWdlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW1hZ2VGaWxlKHBhdGgsIHBhcmVudFBhdGgpO1xyXG4gICAgICAgICAgICBjYXNlICdcdUQ4M0RcdUREMEFTb3VuZCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNvdW5kRmlsZShwYXRoLCBwYXJlbnRQYXRoKTtcclxuICAgICAgICAgICAgY2FzZSAnXHVEODNDXHVERjlFXHVGRTBGVmlkZW8nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBWaWRlb0ZpbGUocGF0aCwgcGFyZW50UGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIExvYWRGaWxlcyhhbnA6IEFwcEFuZFByb2plY3QpIHtcclxuICAgICAgICB0aGlzLmZpbGVzID0gW107XHJcbiAgICAgICAgY29uc3QgYXBwID0gYW5wLmFwcDtcclxuICAgICAgICBjb25zdCB2YXVsdCA9IGFwcC52YXVsdDtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYW5wLnByb2plY3Q7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RGb2xkZXIgPSB2YXVsdC5nZXRGb2xkZXJCeVBhdGgocHJvamVjdC5wYXRoVG9Qcm9qZWN0KTtcclxuICAgICAgICBpZiAocHJvamVjdEZvbGRlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2plY3QgZm9sZGVyIGRvZXMgbm90IGV4aXN0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBmb2xkZXJTdGFjazogW1RGb2xkZXIsIEdFT0QzRm9sZGVyLCBudW1iZXJdW10gPSBbXTtcclxuICAgICAgICBjb25zdCBURmluZGV4ID0gMDtcclxuICAgICAgICBjb25zdCBHRmluZGV4ID0gMTtcclxuICAgICAgICBjb25zdCBDRmluZGV4ID0gMjtcclxuXHJcbiAgICAgICAgY29uc3Qgcm9vdFBhdGggPSBuZXcgU3RyaW5nKCcvJyk7XHJcbiAgICAgICAgY29uc3Qgcm9vdCA9IG5ldyBHRU9EM0ZvbGRlcihyb290UGF0aCwgcm9vdFBhdGgpO1xyXG4gICAgICAgIGZvbGRlclN0YWNrLnB1c2goW3Byb2plY3RGb2xkZXIsIHJvb3QsIDBdKTtcclxuICAgICAgICB0aGlzLmZpbGVzLnB1c2gocm9vdCk7XHJcbiAgICAgICAgbGV0IGRlcHRoID0gMDtcclxuXHJcbiAgICAgICAgd2hpbGUgKGZvbGRlclN0YWNrWzBdW0NGaW5kZXhdIDwgcHJvamVjdEZvbGRlci5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VyckZvbGRlciA9IGZvbGRlclN0YWNrW2RlcHRoXTtcclxuICAgICAgICAgICAgY29uc3QgY3VyckluZGV4ID0gY3VyckZvbGRlcltDRmluZGV4XTtcclxuICAgICAgICAgICAgY29uc3QgY3VyckZpbGUgPSBjdXJyRm9sZGVyW1RGaW5kZXhdLmNoaWxkcmVuW2N1cnJJbmRleF07XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IGN1cnJGaWxlLnBhdGgucmVwbGFjZShwcm9qZWN0LnBhdGhUb1Byb2plY3QsICcnKTtcclxuICAgICAgICAgICAgaWYgKGN1cnJGaWxlLm5hbWUgIT09ICdSRVNFUlZFRCBGT0xERVIgRE8gTk9UIFJFTkFNRScpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyRmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdHRU9EM0ZvbGRlciA9IG5ldyBHRU9EM0ZvbGRlcihyZWxhdGl2ZVBhdGgsIGN1cnJGb2xkZXJbR0ZpbmRleF0ucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlcy5wdXNoKG5ld0dFT0QzRm9sZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyRm9sZGVyW0dGaW5kZXhdLmZpbGVzLnB1c2gobmV3R0VPRDNGb2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbGRlclN0YWNrLnB1c2goW2N1cnJGaWxlLCBuZXdHRU9EM0ZvbGRlciwgMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlcHRoKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyckZpbGUuZXh0ZW5zaW9uID09PSAnbWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB2YXVsdC5jYWNoZWRSZWFkKDxURmlsZT4gY3VyckZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFpbk9iaiA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0ZpbGUgPSB0aGlzLkFzc2lnbk9iamVjdEZyb21GaWxlVHlwZShwbGFpbk9iaiwgcmVsYXRpdmVQYXRoLnNsaWNlKDAsIC0zKSwgY3VyckZvbGRlcltHRmluZGV4XS5wYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyckZvbGRlcltHRmluZGV4XS5maWxlcy5wdXNoKG5ld0ZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGVzLnB1c2gobmV3RmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJGb2xkZXJbQ0ZpbmRleF0rKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN1cnJGb2xkZXJbQ0ZpbmRleF0rKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZm9sZGVyU3RhY2tbZGVwdGhdW0NGaW5kZXhdID49IGZvbGRlclN0YWNrW2RlcHRoXVtURmluZGV4XS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChkZXB0aCA+IDAgJiYgZm9sZGVyU3RhY2tbZGVwdGhdW0NGaW5kZXhdID49IGZvbGRlclN0YWNrW2RlcHRoXVtURmluZGV4XS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXB0aC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbGRlclN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXB0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbGRlclN0YWNrW2RlcHRoXVtDRmluZGV4XSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBhc3luYyBGb2N1cyhkaXY6IEhUTUxEaXZFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgZGl2LmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5tYWluRGl2ID0gZGl2O1xyXG4gICAgICAgIHRoaXMubWFpbkRpdi5jbGFzc05hbWUgPSAnZ2VvZDMtdGFiLWNvbnRhaW5lciBoYm94JztcclxuICAgICAgICB0aGlzLmZpbGVEaXYgPSBkaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzRGl2ID0gZGl2LmNyZWF0ZURpdignZ2VvZDMtZmlsZS1wcm9wZXJ0aWVzIHZib3gnKTtcclxuICAgICAgICB0aGlzLmZpbGVEaXYuc3R5bGUud2lkdGggPSAnNzAlJztcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXNEaXYuc3R5bGUud2lkdGggPSAnMzAlJztcclxuICAgICAgICB0aGlzLmZpbGVzWzBdLk9wZW4odGhpcy5hbnApO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIFVuRm9jdXMoZGl2OiBIVE1MRGl2RWxlbWVudCk6IHZvaWQgfCBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBkaXYuZW1wdHkoKTtcclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBBcHBBbmRQcm9qZWN0IH0gZnJvbSBcImNsYXNzZXMvcHJvamVjdFwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRhYiB7XHJcbiAgICBzdGF0aWMgaWNvbjogc3RyaW5nO1xyXG4gICAgYW5wOiBBcHBBbmRQcm9qZWN0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gYW5wIGEgcmVmZXJlbmNlIHRvIHRoZSBvYnNpZGlhbiBhcHAgdG8gcmVhZCBhbmQgd3JpdGUgZmlsZXMgYXMgd2VsbCBhcyB0aGUgZ2VvZDMgcHJvamVjdCB0aGlzIHRhYiBzaG91bGQgbG9vayBhdFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihhbnA6IEFwcEFuZFByb2plY3QpIHtcclxuICAgICAgICB0aGlzLmFucCA9IGFucDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wZW4gKGZvY3VzIG9uKSB0aGUgdGFiXHJcbiAgICAgKiBAcGFyYW0gZGl2IHRoZSBtYWluIGRpdiBvZiB0aGUgdmlld1xyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCBGb2N1cyhkaXY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB8IFByb21pc2U8dm9pZD47XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogVW5mb2N1cyB0aGlzIHRhYiBiZWZvcmUgZm9jdXNpbmcgb24gYW5vdGhlciBvbmUuXHJcbiAgICAgKiBUaGlzIHByZXZlbnRzIHRoaW5ncyBoYXBwZW5pbmcgaW4gdGhlIGJhY2tncm91bmQgd2hpbGUgdGhlIHVzZXIgaXNuJ3QgbG9va2luZyxcclxuICAgICAqIG9yIGp1c3QgcGF1c2luZyBsb29wc1xyXG4gICAgICogQHBhcmFtIGRpdiB0aGUgbWFpbiBkaXYgb2YgdGhlIHZpZXdcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgVW5Gb2N1cyhkaXY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB8IFByb21pc2U8dm9pZD47XHJcbn0iLCAiaW1wb3J0IHsgQXBwQW5kUHJvamVjdCB9IGZyb20gJ2NsYXNzZXMvcHJvamVjdCc7XHJcbmltcG9ydCB7IEdFT0QzRmlsZU1hbmFnZXIgfSBmcm9tICcuLi9maWxlLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBHRU9EM0ZvbGRlciB9IGZyb20gJy4vZ2VvZDMtZm9sZGVyJztcclxuaW1wb3J0IHsgbm9ybWFsaXplUGF0aCB9IGZyb20gJ29ic2lkaWFuJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHRU9EM0ZpbGUge1xyXG4gICAgcGFyZW50UGF0aDogU3RyaW5nO1xyXG4gICAgZ2V0UGFyZW50KG1hbmFnZXI6IEdFT0QzRmlsZU1hbmFnZXIpOiBHRU9EM0ZvbGRlciB7XHJcbiAgICAgICAgcmV0dXJuIDxHRU9EM0ZvbGRlcj4gbWFuYWdlci5HZXRGaWxlKHRoaXMucGFyZW50UGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcGF0aCB0byB0aGlzIGZpbGUgUkVMQVRJVkUgVE8gVEhFIFBST0pFQ1QgRk9MREVSLCBOT1QgVEhFIFZBVUxUXHJcbiAgICAgKi9cclxuICAgIHBhdGg6IFN0cmluZztcclxuICAgIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcGF0aFBhcnRzID0gdGhpcy5wYXRoLnZhbHVlT2YoKS5zcGxpdCgnLycpO1xyXG4gICAgICAgIGlmICh0aGlzLnBhdGgudmFsdWVPZigpID09PSAnLycpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdyb290JztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGhQYXJ0c1twYXRoUGFydHMubGVuZ3RoIC0gMV07XHJcbiAgICB9XHJcblxyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgYWJzdHJhY3QgZ2V0IGRhdGEoKTogYW55O1xyXG4gICAgY29uc3RydWN0b3IocGF0aDogU3RyaW5nLCBwYXJlbnRQYXRoOiBTdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnBhcmVudFBhdGggPSBwYXJlbnRQYXRoO1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICB9XHJcbiAgICBhc3luYyBHcmFiRGVwZW5kZW5jaWVzKGFucDogQXBwQW5kUHJvamVjdCk6IFByb21pc2U8dm9pZD4ge31cclxuICAgIGFzeW5jIERpc3BsYXlUaHVtYm5haWwoYW5wOiBBcHBBbmRQcm9qZWN0LCB0aHVtYm5haWxEaXY6IEhUTUxEaXZFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgbWFuYWdlciA9IGFucC5wcm9qZWN0LmZpbGVNYW5hZ2VyO1xyXG4gICAgICAgIHRodW1ibmFpbERpdi5lbXB0eSgpO1xyXG5cdFx0dGh1bWJuYWlsRGl2Lm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UGFyZW50KG1hbmFnZXIpLlNlbGVjdEZpbGUoYW5wLCB0aGlzLCB0aHVtYm5haWxEaXYpO1xyXG5cdFx0fVxyXG5cdFx0dGh1bWJuYWlsRGl2LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IHRoaXMubmFtZSB9ICk7XHJcblx0XHR0aHVtYm5haWxEaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogJ1R5cGU6ICcgKyB0aGlzLnR5cGUgfSApO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgT3BlbihhbnA6IEFwcEFuZFByb2plY3QpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBtYW5hZ2VyID0gYW5wLnByb2plY3QuZmlsZU1hbmFnZXI7XHJcbiAgICAgICAgbWFuYWdlci5maWxlRGl2LmVtcHR5KCk7XHJcbiAgICAgICAgbWFuYWdlci5maWxlRGl2LmNsYXNzTmFtZSA9ICd2Ym94JztcclxuXHJcbiAgICAgICAgY29uc3QgYmFja0J1dHRvbiA9IG1hbmFnZXIuZmlsZURpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnR28gYmFjayB0byAnICsgdGhpcy5nZXRQYXJlbnQobWFuYWdlcikubmFtZSB9ICk7XHJcblxyXG4gICAgICAgIGJhY2tCdXR0b24ub25jbGljayA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nZXRQYXJlbnQobWFuYWdlcikuT3BlbihhbnApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIERpc3BsYXlQcm9wZXJ0aWVzKGFucDogQXBwQW5kUHJvamVjdCwgdGh1bWJuYWlsRGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IG1hbmFnZXIgPSBhbnAucHJvamVjdC5maWxlTWFuYWdlcjtcclxuICAgICAgICBtYW5hZ2VyLnByb3BlcnRpZXNEaXYuZW1wdHkoKTtcclxuXHRcdGNvbnN0IG5hbWVJbnB1dCA9IG1hbmFnZXIucHJvcGVydGllc0Rpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRoaXMubmFtZSB9ICk7XHJcblx0XHRtYW5hZ2VyLnByb3BlcnRpZXNEaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogJ1R5cGU6ICcgKyB0aGlzLnR5cGUgfSApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHZhdWx0ID0gYW5wLmFwcC52YXVsdDtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gYW5wLnByb2plY3Q7XHJcblxyXG4gICAgICAgIG5hbWVJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxQYXRoID0gdGhpcy5wYXRoO1xyXG4gICAgICAgICAgICBjb25zdCB0RmlsZSA9IHZhdWx0LmdldEZpbGVCeVBhdGgocHJvamVjdC5wYXRoVG9Qcm9qZWN0ICsgb3JpZ2luYWxQYXRoICsgJy5tZCcpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyTmFtZSA9IHRoaXMubmFtZTtcclxuICAgICAgICAgICAgY29uc3QgbmV3UGF0aCA9IHRoaXMucGF0aC5zbGljZSgwLCAtY3Vyck5hbWUubGVuZ3RoKSArIG5hbWVJbnB1dC52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHRGaWxlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXVsdC5yZW5hbWUodEZpbGUsIHByb2plY3QucGF0aFRvUHJvamVjdCArIG5ld1BhdGggKyAnLm1kJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wYXRoID0gbmV3UGF0aDtcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5VGh1bWJuYWlsKGFucCwgdGh1bWJuYWlsRGl2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhc3luYyBTYXZlKGFucDogQXBwQW5kUHJvamVjdCkge1xyXG4gICAgICAgIGNvbnN0IHBhdGggPSBub3JtYWxpemVQYXRoKGFucC5wcm9qZWN0LnBhdGhUb1Byb2plY3QgKyB0aGlzLnBhdGggKyAnLm1kJyk7XHJcbiAgICAgICAgYW5wLmFwcC52YXVsdC5hZGFwdGVyLndyaXRlKHBhdGgsIEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSkpO1xyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBBcHBBbmRQcm9qZWN0IH0gZnJvbSBcImNsYXNzZXMvcHJvamVjdFwiO1xyXG5pbXBvcnQgeyBHRU9EM0ZpbGVNYW5hZ2VyIH0gZnJvbSBcIi4uL2ZpbGUtbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBHRU9EM0ZpbGUgfSBmcm9tIFwiLi9nZW9kMy1maWxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR0VPRDNGb2xkZXIgZXh0ZW5kcyBHRU9EM0ZpbGUge1xyXG4gICAgb3ZlcnJpZGUgdHlwZSA9ICdcdUQ4M0RcdURDQzFGb2xkZXInO1xyXG4gICAgZmlsZXM6IEdFT0QzRmlsZVtdO1xyXG4gICAgc2VsZWN0ZWRUaHVtYm5haWw6IFtHRU9EM0ZpbGUsIEhUTUxEaXZFbGVtZW50XSB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBvdmVycmlkZSBnZXQgZGF0YSgpOiBHRU9EM0ZpbGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocGF0aDogU3RyaW5nLCBwYXJlbnRQYXRoOiBTdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihwYXRoLCBwYXJlbnRQYXRoKTtcclxuICAgICAgICB0aGlzLmZpbGVzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgYXN5bmMgT3BlbihhbnA6IEFwcEFuZFByb2plY3QpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBtYW5hZ2VyID0gYW5wLnByb2plY3QuZmlsZU1hbmFnZXI7XHJcbiAgICAgICAgc3VwZXIuT3BlbihhbnApO1xyXG5cclxuICAgICAgICBjb25zdCB2YXVsdCA9IGFucC5hcHAudmF1bHQ7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFucC5wcm9qZWN0O1xyXG4gICAgICAgIGNvbnN0IGNyZWF0ZURpdiA9IG1hbmFnZXIuZmlsZURpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuICAgICAgICBjb25zdCB0eXBlRHJvcGRvd24gPSBjcmVhdGVEaXYuY3JlYXRlRWwoJ3NlbGVjdCcpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgR0VPRDNGaWxlTWFuYWdlci5LTk9XTl9GSUxFX1RZUEVTLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJUeXBlID0gR0VPRDNGaWxlTWFuYWdlci5LTk9XTl9GSUxFX1RZUEVTW2ldO1xyXG4gICAgICAgICAgICB0eXBlRHJvcGRvd24uY3JlYXRlRWwoJ29wdGlvbicsIHsgdGV4dDogY3VyclR5cGUsIHZhbHVlOiBjdXJyVHlwZSB9ICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHR5cGVEcm9wZG93bi52YWx1ZSA9IEdFT0QzRmlsZU1hbmFnZXIuS05PV05fRklMRV9UWVBFU1swXTtcclxuICAgICAgICBjb25zdCBuYW1lSW5wdXQgPSBjcmVhdGVEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiAnVW5uYW1lZCcgfSApO1xyXG4gICAgICAgIGNvbnN0IGFkZEJ1dHRvbiA9IGNyZWF0ZURpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnKycgfSApO1xyXG4gICAgICAgIGFkZEJ1dHRvbi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdSZWxQYXRoID0gdGhpcy5wYXRoICsgKHRoaXMucGF0aC52YWx1ZU9mKCkgPT09ICcvJyA/ICcnIDogJy8nKSArIG5hbWVJbnB1dC52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgbmV3UGF0aCA9IHByb2plY3QucGF0aFRvUHJvamVjdCArIG5ld1JlbFBhdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0dFT0QzRmlsZSA9IEdFT0QzRmlsZU1hbmFnZXIuQ3JlYXRlRmlsZU9mVHlwZShuZXdSZWxQYXRoLCB0aGlzLnBhdGgsIHR5cGVEcm9wZG93bi52YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlRHJvcGRvd24udmFsdWUgPT09ICdcdUQ4M0RcdURDQzFGb2xkZXInKSB7XHJcbiAgICAgICAgICAgICAgICB2YXVsdC5jcmVhdGVGb2xkZXIobmV3UGF0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXVsdC5jcmVhdGUobmV3UGF0aCArICcubWQnLCBKU09OLnN0cmluZ2lmeShuZXdHRU9EM0ZpbGUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYW5hZ2VyLmZpbGVzLnB1c2gobmV3R0VPRDNGaWxlKTtcclxuICAgICAgICAgICAgdGhpcy5maWxlcy5wdXNoKG5ld0dFT0QzRmlsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuT3BlbihhbnApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNlbGVjdGVkVGh1bWJuYWlsID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBjb25zdCBmb2xkZXJEaXYgPSBtYW5hZ2VyLmZpbGVEaXYuY3JlYXRlRGl2KCdnZW9kMy1mb2xkZXInKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5maWxlc1tpXS5EaXNwbGF5VGh1bWJuYWlsKGFucCwgZm9sZGVyRGl2LmNyZWF0ZURpdignZ2VvZDMtZmlsZS10aHVtYm5haWwgcG9pbnRlci1ob3ZlcicpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgU2VsZWN0RmlsZShhbnA6IEFwcEFuZFByb2plY3QsIG5ld1NlbGVjdGVkRmlsZTogR0VPRDNGaWxlLCB0aHVtYm5haWxEaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRUaHVtYm5haWwgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnNlbGVjdGVkVGh1bWJuYWlsWzBdID09PSBuZXdTZWxlY3RlZEZpbGUgJiYgdGhpcy5zZWxlY3RlZFRodW1ibmFpbFsxXSA9PT0gdGh1bWJuYWlsRGl2KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUaHVtYm5haWxbMF0uT3BlbihhbnApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVGh1bWJuYWlsICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUaHVtYm5haWxbMV0uY2xhc3NOYW1lID0gJ2dlb2QzLWZpbGUtdGh1bWJuYWlsIHBvaW50ZXItaG92ZXInO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUaHVtYm5haWwgPSBbbmV3U2VsZWN0ZWRGaWxlLCB0aHVtYm5haWxEaXZdO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGh1bWJuYWlsWzFdLmNsYXNzTmFtZSA9ICdnZW9kMy1maWxlLXRodW1ibmFpbCBzZWxlY3RlZCBwb2ludGVyLWhvdmVyJztcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRodW1ibmFpbFswXS5EaXNwbGF5UHJvcGVydGllcyhhbnAsIHRodW1ibmFpbERpdik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIGFzeW5jIERpc3BsYXlQcm9wZXJ0aWVzKGFucDogQXBwQW5kUHJvamVjdCwgdGh1bWJuYWlsRGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IG1hbmFnZXIgPSBhbnAucHJvamVjdC5maWxlTWFuYWdlcjtcclxuICAgICAgICBtYW5hZ2VyLnByb3BlcnRpZXNEaXYuZW1wdHkoKTtcclxuICAgICAgICBjb25zdCBuYW1lSW5wdXQgPSBtYW5hZ2VyLnByb3BlcnRpZXNEaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAndGV4dCcsIHZhbHVlOiB0aGlzLm5hbWUgfSApO1xyXG4gICAgICAgIG1hbmFnZXIucHJvcGVydGllc0Rpdi5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnVHlwZTogJyArIHRoaXMudHlwZSB9ICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgdmF1bHQgPSBhbnAuYXBwLnZhdWx0O1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhbnAucHJvamVjdDtcclxuXHJcbiAgICAgICAgbmFtZUlucHV0Lm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFBhdGggPSB0aGlzLnBhdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHRGaWxlID0gdmF1bHQuZ2V0Rm9sZGVyQnlQYXRoKHByb2plY3QucGF0aFRvUHJvamVjdCArIG9yaWdpbmFsUGF0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJOYW1lID0gdGhpcy5uYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdQYXRoID0gdGhpcy5wYXRoLnNsaWNlKDAsIC1jdXJyTmFtZS5sZW5ndGgpICsgbmFtZUlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodEZpbGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhdWx0LnJlbmFtZSh0RmlsZSwgcHJvamVjdC5wYXRoVG9Qcm9qZWN0ICsgbmV3UGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wYXRoID0gbmV3UGF0aDtcclxuICAgICAgICAgICAgY29uc3QgZm9sZGVyU3RhY2s6IFtHRU9EM0ZvbGRlciwgbnVtYmVyXVtdID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IEdGaW5kZXggPSAwO1xyXG4gICAgICAgICAgICBjb25zdCBDRmluZGV4ID0gMTtcclxuICAgICAgICAgICAgZm9sZGVyU3RhY2sucHVzaChbdGhpcywgMF0pO1xyXG4gICAgICAgICAgICBsZXQgZGVwdGggPSAwO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKGZvbGRlclN0YWNrWzBdW0NGaW5kZXhdIDwgdGhpcy5maWxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJGb2xkZXIgPSBmb2xkZXJTdGFja1tkZXB0aF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJySW5kZXggPSBjdXJyRm9sZGVyW0NGaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VyckZpbGUgPSBjdXJyRm9sZGVyW0dGaW5kZXhdLmZpbGVzW2N1cnJJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjdXJyRmlsZS5wYXRoID0gY3VyckZpbGUucGF0aC5yZXBsYWNlKG9yaWdpbmFsUGF0aC52YWx1ZU9mKCksIG5ld1BhdGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJGaWxlIGluc3RhbmNlb2YgR0VPRDNGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb2xkZXJTdGFjay5wdXNoKFtjdXJyRmlsZSwgMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlcHRoKys7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJGb2xkZXJbQ0ZpbmRleF0rKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChmb2xkZXJTdGFja1tkZXB0aF1bQ0ZpbmRleF0gPj0gZm9sZGVyU3RhY2tbZGVwdGhdW0dGaW5kZXhdLmZpbGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChkZXB0aCA+IDAgJiYgZm9sZGVyU3RhY2tbZGVwdGhdW0NGaW5kZXhdID49IGZvbGRlclN0YWNrW2RlcHRoXVtHRmluZGV4XS5maWxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwdGgtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9sZGVyU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXB0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJTdGFja1tkZXB0aF1bQ0ZpbmRleF0rKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLkRpc3BsYXlUaHVtYm5haWwoYW5wLCB0aHVtYm5haWxEaXYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwQW5kUHJvamVjdCB9IGZyb20gXCJjbGFzc2VzL3Byb2plY3RcIjtcclxuaW1wb3J0IHsgR0VPRDNGaWxlIH0gZnJvbSBcIi4vZ2VvZDMtZmlsZVwiO1xyXG5pbXBvcnQgeyBHRU9EM0ZpbGVNYW5hZ2VyIH0gZnJvbSBcIi4uL2ZpbGUtbWFuYWdlclwiO1xyXG5pbXBvcnQgeyBub3JtYWxpemVQYXRoIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVhbEZpbGUgZXh0ZW5kcyBHRU9EM0ZpbGUge1xyXG4gICAgcHJvdGVjdGVkIHNyYzogc3RyaW5nO1xyXG4gICAgb3ZlcnJpZGUgZ2V0IGRhdGEoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zcmM7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocGF0aDogU3RyaW5nLCBwYXJlbnRQYXRoOiBTdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihwYXRoLCBwYXJlbnRQYXRoKTtcclxuICAgICAgICB0aGlzLnNyYyA9ICcnO1xyXG4gICAgfVxyXG4gICAgb3ZlcnJpZGUgYXN5bmMgT3BlbihhbnA6IEFwcEFuZFByb2plY3QpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBtYW5hZ2VyID0gYW5wLnByb2plY3QuZmlsZU1hbmFnZXI7XHJcbiAgICAgICAgc3VwZXIuT3BlbihhbnApO1xyXG4gICAgICAgIHRoaXMuRGlzcGxheUFjdHVhbEZpbGUobWFuYWdlci5maWxlRGl2KTtcclxuICAgIH1cclxuICAgIG92ZXJyaWRlIGFzeW5jIEdyYWJEZXBlbmRlbmNpZXMoYW5wOiBBcHBBbmRQcm9qZWN0KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgYXBwID0gYW5wLmFwcDtcclxuICAgICAgICAgICAgY29uc3QgdmF1bHQgPSBhcHAudmF1bHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3QgPSBhbnAucHJvamVjdDtcclxuICAgICAgICAgICAgY29uc3QgcGF0aFRvQWN0dWFsRmlsZSA9IHByb2plY3QucGF0aFRvUHJvamVjdCArIHRoaXMucGF0aCArICcuYWN0dWFsLWZpbGUnO1xyXG4gICAgICAgICAgICBjb25zdCB0RmlsZSA9IHZhdWx0LmdldEZpbGVCeVBhdGgocGF0aFRvQWN0dWFsRmlsZSk7XHJcbiAgICAgICAgICAgIGlmICh0RmlsZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHZhdWx0LnJlYWRCaW5hcnkodEZpbGUpO1xyXG4gICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2FycmF5QnVmZmVyXSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb3ZlcnJpZGUgYXN5bmMgRGlzcGxheVByb3BlcnRpZXMoYW5wOiBBcHBBbmRQcm9qZWN0LCB0aHVtYm5haWxEaXY6IEhUTUxEaXZFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgbWFuYWdlciA9IGFucC5wcm9qZWN0LmZpbGVNYW5hZ2VyO1xyXG4gICAgICAgIG1hbmFnZXIucHJvcGVydGllc0Rpdi5lbXB0eSgpO1xyXG5cdFx0Y29uc3QgbmFtZUlucHV0ID0gbWFuYWdlci5wcm9wZXJ0aWVzRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogdGhpcy5uYW1lIH0gKTtcclxuXHRcdG1hbmFnZXIucHJvcGVydGllc0Rpdi5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnVHlwZTogJyArIHRoaXMudHlwZSB9ICk7XHJcblx0XHRjb25zdCBjdXJyRmlsZURpdiA9IG1hbmFnZXIucHJvcGVydGllc0Rpdi5jcmVhdGVEaXYoKTtcclxuICAgICAgICB0aGlzLkRpc3BsYXlBY3R1YWxGaWxlKGN1cnJGaWxlRGl2KTtcclxuXHRcdGNvbnN0IGZpbGVJbnB1dCA9IG1hbmFnZXIucHJvcGVydGllc0Rpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICdmaWxlJyB9ICk7XHJcblx0XHRcclxuICAgICAgICBjb25zdCB2YXVsdCA9IGFucC5hcHAudmF1bHQ7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IGFucC5wcm9qZWN0O1xyXG5cclxuICAgICAgICBuYW1lSW5wdXQub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsUGF0aCA9IHRoaXMucGF0aDtcclxuICAgICAgICAgICAgY29uc3QgdEZpbGUxID0gdmF1bHQuZ2V0RmlsZUJ5UGF0aChwcm9qZWN0LnBhdGhUb1Byb2plY3QgKyBvcmlnaW5hbFBhdGggKyAnLm1kJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRGaWxlMiA9IHZhdWx0LmdldEZpbGVCeVBhdGgocHJvamVjdC5wYXRoVG9Qcm9qZWN0ICsgb3JpZ2luYWxQYXRoICsgJy5hY3R1YWwtZmlsZScpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyTmFtZSA9IHRoaXMubmFtZTtcclxuICAgICAgICAgICAgY29uc3QgbmV3UGF0aCA9IHRoaXMucGF0aC5zbGljZSgwLCAtY3Vyck5hbWUubGVuZ3RoKSArIG5hbWVJbnB1dC52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHRGaWxlMSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmF1bHQucmVuYW1lKHRGaWxlMSwgcHJvamVjdC5wYXRoVG9Qcm9qZWN0ICsgbmV3UGF0aCArICcubWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodEZpbGUyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXVsdC5yZW5hbWUodEZpbGUyLCBwcm9qZWN0LnBhdGhUb1Byb2plY3QgKyBuZXdQYXRoICsgJy5hY3R1YWwtZmlsZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGF0aCA9IG5ld1BhdGg7XHJcbiAgICAgICAgICAgIHRoaXMuRGlzcGxheVRodW1ibmFpbChhbnAsIHRodW1ibmFpbERpdik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbGVJbnB1dC5vbmNoYW5nZSA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZUFycmF5ID0gZmlsZUlucHV0LmZpbGVzO1xyXG4gICAgICAgICAgICBpZiAoZmlsZUFycmF5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IGZpbGVBcnJheVswXS5hcnJheUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFthcnJheUJ1ZmZlcl0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aFRvTURGaWxlID0gbm9ybWFsaXplUGF0aChhbnAucHJvamVjdC5wYXRoVG9Qcm9qZWN0ICsgdGhpcy5wYXRoICsgJy5tZCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aFRvQWN0dWFsRmlsZSA9IG5vcm1hbGl6ZVBhdGgoYW5wLnByb2plY3QucGF0aFRvUHJvamVjdCArIHRoaXMucGF0aCArICcuYWN0dWFsLWZpbGUnKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGFucC5hcHAudmF1bHQuYWRhcHRlci53cml0ZShwYXRoVG9NREZpbGUsIEpTT04uc3RyaW5naWZ5KHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGFucC5hcHAudmF1bHQuYWRhcHRlci53cml0ZUJpbmFyeShwYXRoVG9BY3R1YWxGaWxlLCBhcnJheUJ1ZmZlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VyckZpbGVEaXYuZW1wdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5QWN0dWFsRmlsZShjdXJyRmlsZURpdik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWJzdHJhY3QgRGlzcGxheUFjdHVhbEZpbGUoZGl2OiBIVE1MRGl2RWxlbWVudCk6IFByb21pc2U8SFRNTEVsZW1lbnQ+O1xyXG4gICAgYXN5bmMgU2F2ZShhbnA6IEFwcEFuZFByb2plY3QpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBhd2FpdCBzdXBlci5TYXZlKGFucCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh0aGlzLmRhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGhUb0FjdHVhbEZpbGUgPSBub3JtYWxpemVQYXRoKGFucC5wcm9qZWN0LnBhdGhUb1Byb2plY3QgKyB0aGlzLnBhdGggKyAnLmFjdHVhbC1maWxlJyk7XHJcbiAgICAgICAgICAgIGF3YWl0IGFucC5hcHAudmF1bHQuYWRhcHRlci53cml0ZUJpbmFyeShwYXRoVG9BY3R1YWxGaWxlLCBhcnJheUJ1ZmZlcik7XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBjb252ZXJ0aW5nICcgKyB0aGlzLnBhdGgudmFsdWVPZigpICsgJyB0byBhbiBhY3R1YWwgZmlsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEltYWdlRmlsZSBleHRlbmRzIFJlYWxGaWxlIHtcclxuICAgIG92ZXJyaWRlIHR5cGUgPSAnXHVEODNEXHVEREJDXHVGRTBGSW1hZ2UnO1xyXG4gICAgb3ZlcnJpZGUgYXN5bmMgRGlzcGxheUFjdHVhbEZpbGUoZGl2OiBIVE1MRGl2RWxlbWVudCk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xyXG4gICAgICAgIGNvbnN0IGltZyA9IGRpdi5jcmVhdGVFbCgnaW1nJyk7XHJcbiAgICAgICAgaW1nLnN0eWxlLm9iamVjdEZpdCA9ICdjb250YWluJztcclxuICAgICAgICBpbWcuc3JjID0gdGhpcy5zcmM7XHJcbiAgICAgICAgcmV0dXJuIGltZztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNvdW5kRmlsZSBleHRlbmRzIFJlYWxGaWxlIHtcclxuICAgIG92ZXJyaWRlIHR5cGUgPSAnXHVEODNEXHVERDBBU291bmQnO1xyXG4gICAgb3ZlcnJpZGUgYXN5bmMgRGlzcGxheUFjdHVhbEZpbGUoZGl2OiBIVE1MRGl2RWxlbWVudCk6IFByb21pc2U8SFRNTEF1ZGlvRWxlbWVudD4ge1xyXG4gICAgICAgIGNvbnN0IGVsID0gZGl2LmNyZWF0ZUVsKCdhdWRpbycpO1xyXG4gICAgICAgIGVsLnNyYyA9IHRoaXMuc3JjO1xyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZpZGVvRmlsZSBleHRlbmRzIFJlYWxGaWxlIHtcclxuICAgIG92ZXJyaWRlIHR5cGUgPSAnXHVEODNDXHVERjlFXHVGRTBGVmlkZW8nO1xyXG4gICAgb3ZlcnJpZGUgYXN5bmMgRGlzcGxheUFjdHVhbEZpbGUoZGl2OiBIVE1MRGl2RWxlbWVudCk6IFByb21pc2U8SFRNTFZpZGVvRWxlbWVudD4ge1xyXG4gICAgICAgIGNvbnN0IHZpZCA9IGRpdi5jcmVhdGVFbCgndmlkZW8nKTtcclxuICAgICAgICB2aWQuc3R5bGUub2JqZWN0Rml0ID0gJ2NvbnRhaW4nO1xyXG4gICAgICAgIHZpZC5zcmMgPSB0aGlzLnNyYztcclxuICAgICAgICByZXR1cm4gdmlkO1xyXG4gICAgfVxyXG59XHJcbiIsICJleHBvcnQgY29uc3QgQkdfQ09MT1JfMSA9ICdyZ2IoMzcsIDM3LCA0NCknO1xyXG5leHBvcnQgY29uc3QgQkdfQ09MT1JfMiA9ICdyZ2IoMTgsIDE4LCAyNCknO1xyXG5leHBvcnQgY29uc3QgQkdfQ09MT1JfMyA9ICdyZ2IoNSwgNSwgOCknO1xyXG5leHBvcnQgY29uc3QgQUNDRU5UX0NPTE9SXzEgPSAncmdiKDIyMywgMjM2LCAyNTUpJztcclxuZXhwb3J0IGNvbnN0IEFDQ0VOVF9DT0xPUl8yID0gJ3JnYigxNjAsIDE2OSwgMTg0KSc7XHJcbmV4cG9ydCBjb25zdCBBQ0NFTlRfQ09MT1JfMyA9ICdyZ2IoMTAwLCAxMDksIDEyMyknO1xyXG5leHBvcnQgY29uc3QgQ0VOVFJBTF9DT0xPUl8xID0gJ3JnYigxMTEsIDQ2LCAxNjkpJztcclxuZXhwb3J0IGNvbnN0IENFTlRSQUxfQ09MT1JfMiA9ICdyZ2IoNzgsIDE3LCAxMzEpJztcclxuZXhwb3J0IGNvbnN0IENFTlRSQUxfQ09MT1JfMyA9ICdyZ2IoMjksIDAsIDU0KSc7XHJcbmV4cG9ydCBjb25zdCBSRU1PVkVfQ09MT1JfMSA9ICdyZ2IoMTk4LCA2OCwgNjgpJztcclxuZXhwb3J0IGNvbnN0IFJFTU9WRV9DT0xPUl8yID0gJ3JnYigxMzgsIDAsIDApJzsiLCAiaW1wb3J0IHsgU2NvcGUgfSBmcm9tIFwiY2xhc3Nlcy9zY29wZVwiO1xyXG5pbXBvcnQgeyBCR19DT0xPUl8xLCBCR19DT0xPUl8yLCBCR19DT0xPUl8zLCBBQ0NFTlRfQ09MT1JfMSwgQUNDRU5UX0NPTE9SXzIsIEFDQ0VOVF9DT0xPUl8zLCBDRU5UUkFMX0NPTE9SXzEsIENFTlRSQUxfQ09MT1JfMiwgQ0VOVFJBTF9DT0xPUl8zLCBSRU1PVkVfQ09MT1JfMSwgUkVNT1ZFX0NPTE9SXzIgfSBmcm9tIFwiY29sb3JzXCI7XHJcblxyXG5leHBvcnQgZW51bSBBUyB7XHJcbiAgICAnbm9uZScsXHJcbiAgICAnYm9vbGVhbicsXHJcbiAgICAnbnVtYmVyJyxcclxuICAgICdzdHJpbmcnXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU0hhbmRsZXIge1xyXG4gICAgc3RhdGljIENvcHkob2JqOiBBU0kpOiBBU0kge1xyXG4gICAgICAgIGxldCBuZXdPYmo7XHJcbiAgICAgICAgc3dpdGNoKG9iai50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQVMubm9uZTpcclxuICAgICAgICAgICAgY2FzZSBBUy5ib29sZWFuOlxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgbmV3T2JqID0gbmV3IEFCb29sZWFuSShvYmouc2NvcGUsIG9iai5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEFTLm51bWJlcjpcclxuICAgICAgICAgICAgICAgIG5ld09iaiA9IG5ldyBBTnVtYmVySShvYmouc2NvcGUsIG9iai5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEFTLnN0cmluZzpcclxuICAgICAgICAgICAgICAgIG5ld09iaiA9IG5ldyBBU3RyaW5nSShvYmouc2NvcGUsIG9iai5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdPYmoudmFsdWUgPSBvYmoudmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIG5ld09iajtcclxuICAgIH1cclxuICAgIHN0YXRpYyBDcmVhdGVJKHR5cGU6IEFTLCBzY29wZTogU2NvcGUsIG5hbWU6IHN0cmluZyk6IEFTSSB7XHJcbiAgICAgICAgc3dpdGNoKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBBUy5ub25lOlxyXG4gICAgICAgICAgICBjYXNlIEFTLmJvb2xlYW46XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFCb29sZWFuSShzY29wZSwgbmFtZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQVMubnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBTnVtYmVySShzY29wZSwgbmFtZSk7XHJcbiAgICAgICAgICAgIGNhc2UgQVMuc3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBU3RyaW5nSShzY29wZSwgbmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIENyZWF0ZUlJKHN0cnVjdDogQVNJLCBpbnNwZWN0b3JEaXY6IEhUTUxEaXZFbGVtZW50LCBjb2xvcjogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKTogQVNJSSB7XHJcbiAgICAgICAgc3dpdGNoKHN0cnVjdC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQVMubm9uZTpcclxuICAgICAgICAgICAgY2FzZSBBUy5ib29sZWFuOlxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBQm9vbGVhbklJKHN0cnVjdCwgaW5zcGVjdG9yRGl2LCBjb2xvcik7XHJcbiAgICAgICAgICAgIGNhc2UgQVMubnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBTnVtYmVySUkoc3RydWN0LCBpbnNwZWN0b3JEaXYsIGNvbG9yKTtcclxuICAgICAgICAgICAgY2FzZSBBUy5zdHJpbmc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFTdHJpbmdJSShzdHJ1Y3QsIGluc3BlY3RvckRpdiwgY29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFTSSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBBUztcclxuICAgIHZhbHVlOiBhbnk7XHJcbiAgICBzY29wZTogU2NvcGU7XHJcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogU2NvcGUsIG5hbWUgPSAnJykge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQVNJSSB7XHJcbiAgICBpbnN0YW5jZTogQVNJO1xyXG4gICAgc3RhdGljIEFkanVzdElucHV0V2lkdGgoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudCwgZGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IHRlbXBFbCA9IGRpdi5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBpbnB1dC52YWx1ZSB9ICk7XHJcbiAgICAgICAgdGVtcEVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICB0ZW1wRWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIHRlbXBFbC5zdHlsZS53aGl0ZVNwYWNlID0gJ25vd3JhcCc7XHJcbiAgICAgICAgdGVtcEVsLnN0eWxlLmZvbnQgPSAnaW5oZXJpdCc7XHJcbiAgICAgICAgdGVtcEVsLnN0eWxlLnBhZGRpbmcgPSBpbnB1dCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgPyAnMXZoJyA6ICcydmgnO1xyXG4gICAgICAgIGlucHV0LnN0eWxlLndpZHRoID0gdGVtcEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgJ3B4JztcclxuICAgICAgICB0ZW1wRWwucmVtb3ZlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vI3JlZ2lvbiBCb29sZWFuXHJcbmV4cG9ydCBjbGFzcyBBQm9vbGVhbkkgZXh0ZW5kcyBBU0kge1xyXG4gICAgdHlwZSA9IEFTLmJvb2xlYW47XHJcbiAgICB2YWx1ZTogYm9vbGVhbjtcclxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBTY29wZSwgbmFtZSA9ICcnKSB7XHJcbiAgICAgICAgc3VwZXIoc2NvcGUsIG5hbWUpO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFCb29sZWFuSUkgZXh0ZW5kcyBBU0lJIHtcclxuICAgIGluc3RhbmNlOiBBQm9vbGVhbkk7XHJcbiAgICBjb25zdHJ1Y3RvcihpbnN0YW5jZTogQUJvb2xlYW5JLCBkaXY6IEhUTUxEaXZFbGVtZW50LCBjb2xvcjogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgY29uc3QgaW5wdXQgPSBkaXYuY3JlYXRlRWwoJ2lucHV0JywgeyB0eXBlOiAnY2hlY2tib3gnIH0gKTtcclxuICAgICAgICBpbnB1dC5jaGVja2VkID0gdGhpcy5pbnN0YW5jZS52YWx1ZTtcclxuICAgICAgICBpbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvciA9PT0gdW5kZWZpbmVkID8gQ0VOVFJBTF9DT0xPUl8zIDogY29sb3I7XHJcbiAgICAgICAgaW5wdXQub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS52YWx1ZSA9IGlucHV0LmNoZWNrZWQ7XHJcbiAgICAgICAgICAgIGlucHV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGlucHV0LmNoZWNrZWQgPyBDRU5UUkFMX0NPTE9SXzEgOiBDRU5UUkFMX0NPTE9SXzM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBCb29sZWFuXHJcblxyXG4vLyNyZWdpb24gTnVtYmVyXHJcbmV4cG9ydCBjbGFzcyBBTnVtYmVySSBleHRlbmRzIEFTSSB7XHJcbiAgICB0eXBlID0gQVMubnVtYmVyO1xyXG4gICAgdmFsdWU6IG51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBTY29wZSwgbmFtZSA9ICcnKSB7XHJcbiAgICAgICAgc3VwZXIoc2NvcGUsIG5hbWUpO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSAwO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQU51bWJlcklJIGV4dGVuZHMgQVNJSSB7XHJcbiAgICBpbnN0YW5jZTogQU51bWJlckk7XHJcbiAgICBjb25zdHJ1Y3RvcihpbnN0YW5jZTogQU51bWJlckksIGRpdjogSFRNTERpdkVsZW1lbnQsIGNvbG9yOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRoaXMuaW5zdGFuY2UudmFsdWUgKyAnJyB9ICk7XHJcbiAgICAgICAgQVNJSS5BZGp1c3RJbnB1dFdpZHRoKGlucHV0LCBkaXYpO1xyXG4gICAgICAgIGlucHV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBDRU5UUkFMX0NPTE9SXzMgOiBjb2xvcjtcclxuICAgICAgICBpbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBBU0lJLkFkanVzdElucHV0V2lkdGgoaW5wdXQsIGRpdik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLnZhbHVlID0gcGFyc2VGbG9hdChpbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBOdW1iZXJcclxuXHJcbi8vI3JlZ2lvbiBTdHJpbmdcclxuZXhwb3J0IGNsYXNzIEFTdHJpbmdJIGV4dGVuZHMgQVNJIHtcclxuICAgIHR5cGUgPSBBUy5zdHJpbmc7XHJcbiAgICB2YWx1ZTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IFNjb3BlLCBuYW1lID0gJycpIHtcclxuICAgICAgICBzdXBlcihzY29wZSwgbmFtZSk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQVN0cmluZ0lJIGV4dGVuZHMgQVNJSSB7XHJcbiAgICBpbnN0YW5jZTogQVN0cmluZ0k7XHJcbiAgICBjb25zdHJ1Y3RvcihpbnN0YW5jZTogQVN0cmluZ0ksIGRpdjogSFRNTERpdkVsZW1lbnQsIGNvbG9yOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IGRpdi5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IHRoaXMuaW5zdGFuY2UudmFsdWUgKyAnJyB9ICk7XHJcbiAgICAgICAgQVNJSS5BZGp1c3RJbnB1dFdpZHRoKGlucHV0LCBkaXYpO1xyXG4gICAgICAgIGlucHV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yID09PSB1bmRlZmluZWQgPyBDRU5UUkFMX0NPTE9SXzMgOiBjb2xvcjtcclxuICAgICAgICBpbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBBU0lJLkFkanVzdElucHV0V2lkdGgoaW5wdXQsIGRpdik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLnZhbHVlID0gaW5wdXQudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBTdHJpbmciLCAiaW1wb3J0IHsgQUZIYW5kbGVyLCBBRkksIEFGUkkgfSBmcm9tIFwiY2xhc3Nlcy9mdW5jdGlvbnMvZnVuY3Rpb25cIjtcclxuaW1wb3J0IHsgQXBwQW5kUHJvamVjdCB9IGZyb20gXCJjbGFzc2VzL3Byb2plY3RcIjtcclxuaW1wb3J0IHsgU2NvcGUgfSBmcm9tIFwiY2xhc3Nlcy9zY29wZVwiO1xyXG5pbXBvcnQgeyBBUywgQVNIYW5kbGVyLCBBU0kgfSBmcm9tIFwiY2xhc3Nlcy9zdHJ1Y3RzL3N0cnVjdFwiO1xyXG5pbXBvcnQgeyBJbWFnZUZpbGUsIFZpZGVvRmlsZSB9IGZyb20gXCIuL2ZpbGUtdHlwZXMvcmVhbC1maWxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR0VPRDNPYmplY3RIYW5kbGVyIHtcclxuICAgIHN0YXRpYyBHZXRWYXJpYWJsZShvYmo6IEdFT0QzT2JqZWN0IHwgR0VPRDNPYmplY3RSSSwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoudmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmoudmFyaWFibGVzW2ldLm5hbWUgPT09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmoudmFyaWFibGVzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVmFyaWFibGUgJyArIG5hbWUgKyAnIG5vdCBmb3VuZCBvbiBvYmplY3QgJyArIG9iai5pZEluU2NlbmUgKyAnOiAnICsgb2JqLm5hbWUpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIENyZWF0ZUlJKG9iajogR0VPRDNPYmplY3QsIGFucDogQXBwQW5kUHJvamVjdCwgaW5zcGVjdG9yRGl2OiBIVE1MRGl2RWxlbWVudCk6IEdFT0QzT2JqZWN0SUkge1xyXG4gICAgICAgIHJldHVybiBuZXcgR0VPRDNPYmplY3RJSShvYmosIGFucCwgaW5zcGVjdG9yRGl2KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBDcmVhdGVSSShvYmo6IEdFT0QzT2JqZWN0LCBhbnA6IEFwcEFuZFByb2plY3QsIG9iakRpdjogSFRNTERpdkVsZW1lbnQpOiBHRU9EM09iamVjdFJJIHtcclxuICAgICAgICByZXR1cm4gbmV3IEdFT0QzT2JqZWN0Ukkob2JqLCBhbnAsIG9iakRpdik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHRU9EM09iamVjdCB7XHJcbiAgICBpZEluU2NlbmU6IG51bWJlcjtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG9uU3RhcnQ6IEFGSVtdO1xyXG4gICAgb25OZXdGcmFtZTogQUZJW107XHJcbiAgICB2YXJpYWJsZXM6IEFTSVtdO1xyXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuaWRJblNjZW5lID0gaWQ7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ29iamVjdCc7XHJcbiAgICAgICAgdGhpcy52YXJpYWJsZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm9uU3RhcnQgPSBbXTtcclxuICAgICAgICB0aGlzLm9uTmV3RnJhbWUgPSBbXTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLnN0cmluZywgU2NvcGUuUHVibGljLCAnU3ByaXRlIFBhdGgnKSk7XHJcbiAgICAgICAgdGhpcy52YXJpYWJsZXMucHVzaChBU0hhbmRsZXIuQ3JlYXRlSShBUy5udW1iZXIsIFNjb3BlLlB1YmxpYywgJ1Nwcml0ZSBXaWR0aCcpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAnU3ByaXRlIEhlaWdodCcpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAneCcpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAneScpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAneicpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAnU3BlZWQgeCcpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAnU3BlZWQgeScpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAnU3BlZWQgeicpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAnQWNjZWxlcmF0aW9uIHgnKSk7XHJcbiAgICAgICAgdGhpcy52YXJpYWJsZXMucHVzaChBU0hhbmRsZXIuQ3JlYXRlSShBUy5udW1iZXIsIFNjb3BlLlB1YmxpYywgJ0FjY2VsZXJhdGlvbiB5JykpO1xyXG4gICAgICAgIHRoaXMudmFyaWFibGVzLnB1c2goQVNIYW5kbGVyLkNyZWF0ZUkoQVMubnVtYmVyLCBTY29wZS5QdWJsaWMsICdBY2NlbGVyYXRpb24geicpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLmJvb2xlYW4sIFNjb3BlLlB1YmxpYywgJ0RvIFJlY3Rhbmd1bGFyIEhpdGJveCcpKTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5DcmVhdGVJKEFTLm51bWJlciwgU2NvcGUuUHVibGljLCAnSGl0Ym94IFJhZGl1cy9IYWxmIFdpZHRoJykpO1xyXG4gICAgICAgIHRoaXMudmFyaWFibGVzLnB1c2goQVNIYW5kbGVyLkNyZWF0ZUkoQVMubnVtYmVyLCBTY29wZS5QdWJsaWMsICdIaXRib3ggSGFsZiBIZWlnaHQnKSk7XHJcbiAgICAgICAgdGhpcy52YXJpYWJsZXMucHVzaChBU0hhbmRsZXIuQ3JlYXRlSShBUy5udW1iZXIsIFNjb3BlLlB1YmxpYywgJ0hpdGJveCBIYWxmIFRoaWNrbmVzcycpKTtcclxuXHJcbiAgICAgICAgdGhpcy52YXJpYWJsZXNbMV0udmFsdWUgPSAxMDA7XHJcbiAgICAgICAgdGhpcy52YXJpYWJsZXNbMl0udmFsdWUgPSAxMDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHRU9EM09iamVjdElJIHtcclxuICAgIGFucDogQXBwQW5kUHJvamVjdDtcclxuICAgIGluc3RhbmNlOiBHRU9EM09iamVjdDtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoaW5zdGFuY2U6IEdFT0QzT2JqZWN0LCBhbnA6IEFwcEFuZFByb2plY3QsIGRpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy5hbnAgPSBhbnA7XHJcbiAgICAgICAgZGl2LmVtcHR5KCk7XHJcbiAgICAgICAgY29uc3QgbmFtZURpdiA9IGRpdi5jcmVhdGVEaXYoJ2dlb2QzLWluc3BlY3Rvci10b3AtYmFyIGhib3gnKTtcclxuICAgICAgICBuYW1lRGl2LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IHRoaXMuaW5zdGFuY2UuaWRJblNjZW5lICsgJzonIH0gKTtcclxuICAgICAgICBjb25zdCBuYW1lSW5wdXQgPSBuYW1lRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogdGhpcy5pbnN0YW5jZS5uYW1lIH0gKTtcclxuICAgICAgICBjb25zdCBlZGl0U2NyaXB0c0J1dHRvbiA9IG5hbWVEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ0VkaXQgU2NyaXB0c1x1RDgzRFx1RENEQycgfSApO1xyXG4gICAgICAgIGVkaXRTY3JpcHRzQnV0dG9uLmNsYXNzTmFtZSA9ICdnZW9kMy1zZWNvbmRhcnktYnV0dG9uJztcclxuICAgICAgICBuYW1lSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UubmFtZSA9IG5hbWVJbnB1dC52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWRpdFNjcmlwdHNCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgYW5wLnByb2plY3Quc2NyaXB0RWRpdG9yLmN1cnJlbnRPYmplY3QgPSB0aGlzLmluc3RhbmNlO1xyXG4gICAgICAgICAgICBhbnAucHJvamVjdC5Td2l0Y2hUb1RhYihhbnAucHJvamVjdC5zY3JpcHRFZGl0b3JUYWJJRCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZhcmlhYmxlc0RpdiA9IGRpdi5jcmVhdGVEaXYoJ2dlb2QzLWluc3BlY3Rvci12YXJpYWJsZS1saXN0IHZib3gnKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5zdGFuY2UudmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFzSSA9IHRoaXMuaW5zdGFuY2UudmFyaWFibGVzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCB2YXJEaXYgPSB2YXJpYWJsZXNEaXYuY3JlYXRlRGl2KCdnZW9kMy1pbnNwZWN0b3ItdmFyaWFibGUgaGJveCcpO1xyXG4gICAgICAgICAgICB2YXJEaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogYXNJLm5hbWUgfSApO1xyXG4gICAgICAgICAgICBBU0hhbmRsZXIuQ3JlYXRlSUkoYXNJLCB2YXJEaXYuY3JlYXRlRGl2KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhZGROZXdEaXYgPSBkaXYuY3JlYXRlRGl2KCdnZW9kMy1pbnNwZWN0b3ItbmV3LXZhciBoYm94Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHZhcmlhYmxlTmFtZUlucHV0ID0gYWRkTmV3RGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogJ3VubmFtZWQnIH0gKTtcclxuICAgICAgICBjb25zdCB2YXJpYWJsZVR5cGVJbnB1dCA9IGFkZE5ld0Rpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgY29uc3QgYWRkVmFyaWFibGVCdXR0b24gPSBhZGROZXdEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJysnIH0gKTtcclxuXHJcbiAgICAgICAgYWRkVmFyaWFibGVCdXR0b24uY2xhc3NOYW1lID0gJ2dlb2QzLWFkZC1idXR0b24nO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gQVNbaV07XHJcbiAgICAgICAgICAgIHZhcmlhYmxlVHlwZUlucHV0LmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6IHR5cGUsIHZhbHVlOiBpICsgJycgfSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXJpYWJsZVR5cGVJbnB1dC52YWx1ZSA9ICcxJztcclxuXHJcbiAgICAgICAgYWRkVmFyaWFibGVCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHZhcmlhYmxlTmFtZUlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5zdGFuY2UudmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS52YXJpYWJsZXNbaV0ubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBuZXdWYXIgPSBBU0hhbmRsZXIuQ3JlYXRlSShwYXJzZUludCh2YXJpYWJsZVR5cGVJbnB1dC52YWx1ZSksIFNjb3BlLlB1YmxpYywgbmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UudmFyaWFibGVzLnB1c2gobmV3VmFyKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3VmFyRGl2ID0gdmFyaWFibGVzRGl2LmNyZWF0ZURpdignZ2VvZDMtaW5zcGVjdG9yLXZhcmlhYmxlIGhib3gnKTtcclxuICAgICAgICAgICAgbmV3VmFyRGl2LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IG5ld1Zhci5uYW1lIH0gKTtcclxuICAgICAgICAgICAgQVNIYW5kbGVyLkNyZWF0ZUlJKG5ld1ZhciwgbmV3VmFyRGl2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEdFT0QzT2JqZWN0Ukkge1xyXG4gICAgaWRJblNjZW5lOiBudW1iZXI7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBvblN0YXJ0OiBBRlJJW107XHJcbiAgICBvbk5ld0ZyYW1lOiBBRlJJW107XHJcbiAgICB2YXJpYWJsZXM6IEFTSVtdO1xyXG4gICAgb2JqRGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIGFucDogQXBwQW5kUHJvamVjdDtcclxuICAgIHByaXZhdGUgcHJldlNwcml0ZVBhdGg6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKG9iajogR0VPRDNPYmplY3QsIGFucDogQXBwQW5kUHJvamVjdCwgb2JqRGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuaWRJblNjZW5lID0gb2JqLmlkSW5TY2VuZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBvYmoubmFtZTtcclxuICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25TdGFydCA9IFtdO1xyXG4gICAgICAgIHRoaXMub25OZXdGcmFtZSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLnZhcmlhYmxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnZhcmlhYmxlcy5wdXNoKEFTSGFuZGxlci5Db3B5KG9iai52YXJpYWJsZXNbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoub25TdGFydC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLm9uU3RhcnQucHVzaChBRkhhbmRsZXIuQ3JlYXRlUkkob2JqLm9uU3RhcnRbaV0sIGFucCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5vbk5ld0ZyYW1lLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25OZXdGcmFtZS5wdXNoKEFGSGFuZGxlci5DcmVhdGVSSShvYmoub25OZXdGcmFtZVtpXSwgYW5wKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2JqRGl2ID0gb2JqRGl2O1xyXG4gICAgICAgIHRoaXMuYW5wID0gYW5wO1xyXG4gICAgICAgIHRoaXMucHJldlNwcml0ZVBhdGggPSAnJztcclxuICAgICAgICB0aGlzLlNldE9iakRpdkNTU1Byb3BlcnRpZXMoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgU2V0T2JqRGl2Q1NTUHJvcGVydGllcygpIHtcclxuICAgICAgICB0aGlzLm9iakRpdi5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKC01MCUsIDUwJSknO1xyXG4gICAgICAgIHRoaXMub2JqRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIH1cclxuICAgIHByaXZhdGUgUmVmcmVzaFNwcml0ZSgpIHtcclxuICAgICAgICBjb25zdCBzcHJpdGVQYXRoID0gR0VPRDNPYmplY3RIYW5kbGVyLkdldFZhcmlhYmxlKHRoaXMsICdTcHJpdGUgUGF0aCcpLnZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLnByZXZTcHJpdGVQYXRoICE9PSBzcHJpdGVQYXRoKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZWRpYUZpbGUgPSA8SW1hZ2VGaWxlIHwgVmlkZW9GaWxlPiB0aGlzLmFucC5wcm9qZWN0LmZpbGVNYW5hZ2VyLkdldEZpbGVCeVByaW1pdGl2ZVBhdGgoc3ByaXRlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcHJpdGVTcmMgPSBtZWRpYUZpbGUuZGF0YTtcclxuICAgICAgICAgICAgICAgIGxldCBtZWRpYUVsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYmpEaXYuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgIGlmIChtZWRpYUZpbGUgaW5zdGFuY2VvZiBJbWFnZUZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYUVsID0gdGhpcy5vYmpEaXYuY3JlYXRlRWwoJ2ltZycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYUVsID0gdGhpcy5vYmpEaXYuY3JlYXRlRWwoJ3ZpZGVvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFFbC5jb250cm9scyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhRWwubG9vcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtZWRpYUVsLnNyYyA9IHNwcml0ZVNyYztcclxuICAgICAgICAgICAgICAgIG1lZGlhRWwuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgICAgICBtZWRpYUVsLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICAgICAgICAgIHRoaXMucHJldlNwcml0ZVBhdGggPSBzcHJpdGVQYXRoO1xyXG4gICAgICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWlsZWQgdG8gZmluZCBpbWFnZS92aWRlbyBwYXRoJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIFNldExvY2F0aW9uQW5kV2lkdGgoKSB7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSBHRU9EM09iamVjdEhhbmRsZXIuR2V0VmFyaWFibGUodGhpcywgJ1Nwcml0ZSBXaWR0aCcpO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IEdFT0QzT2JqZWN0SGFuZGxlci5HZXRWYXJpYWJsZSh0aGlzLCAnU3ByaXRlIEhlaWdodCcpO1xyXG4gICAgICAgIGNvbnN0IHggPSBHRU9EM09iamVjdEhhbmRsZXIuR2V0VmFyaWFibGUodGhpcywgJ3gnKTtcclxuICAgICAgICBjb25zdCB5ID0gR0VPRDNPYmplY3RIYW5kbGVyLkdldFZhcmlhYmxlKHRoaXMsICd5Jyk7XHJcbiAgICAgICAgY29uc3QgeiA9IEdFT0QzT2JqZWN0SGFuZGxlci5HZXRWYXJpYWJsZSh0aGlzLCAneicpO1xyXG4gICAgICAgIGNvbnN0IHhWZWwgPSBHRU9EM09iamVjdEhhbmRsZXIuR2V0VmFyaWFibGUodGhpcywgJ1NwZWVkIHgnKTtcclxuICAgICAgICBjb25zdCB5VmVsID0gR0VPRDNPYmplY3RIYW5kbGVyLkdldFZhcmlhYmxlKHRoaXMsICdTcGVlZCB5Jyk7XHJcbiAgICAgICAgY29uc3QgelZlbCA9IEdFT0QzT2JqZWN0SGFuZGxlci5HZXRWYXJpYWJsZSh0aGlzLCAnU3BlZWQgeicpO1xyXG4gICAgICAgIGNvbnN0IHhBY2NlbCA9IEdFT0QzT2JqZWN0SGFuZGxlci5HZXRWYXJpYWJsZSh0aGlzLCAnQWNjZWxlcmF0aW9uIHgnKTtcclxuICAgICAgICBjb25zdCB5QWNjZWwgPSBHRU9EM09iamVjdEhhbmRsZXIuR2V0VmFyaWFibGUodGhpcywgJ0FjY2VsZXJhdGlvbiB5Jyk7XHJcbiAgICAgICAgY29uc3QgekFjY2VsID0gR0VPRDNPYmplY3RIYW5kbGVyLkdldFZhcmlhYmxlKHRoaXMsICdBY2NlbGVyYXRpb24geicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMub2JqRGl2LnN0eWxlLndpZHRoID0gd2lkdGgudmFsdWUgKyAncHgnO1xyXG4gICAgICAgIHRoaXMub2JqRGl2LnN0eWxlLmhlaWdodCA9IGhlaWdodC52YWx1ZSArICdweCc7XHJcblxyXG4gICAgICAgIHhWZWwudmFsdWUgKz0geEFjY2VsLnZhbHVlO1xyXG4gICAgICAgIHlWZWwudmFsdWUgKz0geUFjY2VsLnZhbHVlO1xyXG4gICAgICAgIHpWZWwudmFsdWUgKz0gekFjY2VsLnZhbHVlO1xyXG5cclxuICAgICAgICB4LnZhbHVlICs9IHhWZWwudmFsdWU7XHJcbiAgICAgICAgeS52YWx1ZSArPSB5VmVsLnZhbHVlO1xyXG4gICAgICAgIHoudmFsdWUgKz0gelZlbC52YWx1ZTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm9iakRpdi5zdHlsZS5sZWZ0ID0geC52YWx1ZSArICdweCc7XHJcbiAgICAgICAgdGhpcy5vYmpEaXYuc3R5bGUuYm90dG9tID0geS52YWx1ZSArICdweCc7XHJcbiAgICB9XHJcbiAgICBSZW5kZXIoKSB7XHJcbiAgICAgICAgdGhpcy5SZWZyZXNoU3ByaXRlKCk7XHJcbiAgICAgICAgdGhpcy5TZXRMb2NhdGlvbkFuZFdpZHRoKCk7XHJcbiAgICB9XHJcbiAgICBPblN0YXJ0KCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vblN0YXJ0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25TdGFydFtpXS5FeGVjdXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT25OZXdGcmFtZSgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub25OZXdGcmFtZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLm9uTmV3RnJhbWVbaV0uRXhlY3V0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwQW5kUHJvamVjdCB9IGZyb20gXCJjbGFzc2VzL3Byb2plY3RcIjtcclxuaW1wb3J0IHsgU2NvcGUgfSBmcm9tIFwiY2xhc3Nlcy9zY29wZVwiO1xyXG5pbXBvcnQgeyBBQm9vbGVhbkksIEFOdW1iZXJJLCBBUywgQVNIYW5kbGVyLCBBU0ksIEFTdHJpbmdJIH0gZnJvbSBcImNsYXNzZXMvc3RydWN0cy9zdHJ1Y3RcIjtcclxuaW1wb3J0IHsgR0VPRDNPYmplY3RIYW5kbGVyIH0gZnJvbSBcImNsYXNzZXMvdGFicy9nZW9kMy1vYmplY3RcIjtcclxuaW1wb3J0IHsgQkdfQ09MT1JfMSwgQkdfQ09MT1JfMiwgQkdfQ09MT1JfMywgQUNDRU5UX0NPTE9SXzEsIEFDQ0VOVF9DT0xPUl8yLCBBQ0NFTlRfQ09MT1JfMywgQ0VOVFJBTF9DT0xPUl8xLCBDRU5UUkFMX0NPTE9SXzIsIENFTlRSQUxfQ09MT1JfMywgUkVNT1ZFX0NPTE9SXzEsIFJFTU9WRV9DT0xPUl8yIH0gZnJvbSBcImNvbG9yc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gQUYge1xyXG4gICAgJ25vbmUnLFxyXG4gICAgJ2NoYWluJyxcclxuICAgICdnZXQnLFxyXG4gICAgJ3NldCcsXHJcbiAgICAnaWYnLFxyXG4gICAgJ2lmZWxzZScsXHJcbiAgICAnY29tcGFyZScsXHJcbiAgICAna2V5ZG93bicsXHJcbiAgICAnYWRkJ1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQUZIYW5kbGVyIHtcclxuICAgIHN0YXRpYyBDb3B5KG9iajogQUZJKTogQUZJIHtcclxuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5wYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJQYXJhbSA9IG9iai5wYXJhbWV0ZXJzW2ldO1xyXG4gICAgICAgICAgICBpZiAoY3VyclBhcmFtIGluc3RhbmNlb2YgQUZJKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdQYXJhbXMucHVzaCh0aGlzLkNvcHkoY3VyclBhcmFtKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdQYXJhbXMucHVzaChBU0hhbmRsZXIuQ29weShjdXJyUGFyYW0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2gob2JqLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBBRi5ub25lOlxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBRG9Ob3RoaW5nSSgpO1xyXG4gICAgICAgICAgICBjYXNlIEFGLmNoYWluOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBQ2hhaW5JKDxBRklbXT4gbmV3UGFyYW1zKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5nZXQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFHZXRJKDxBU0lbXT4gbmV3UGFyYW1zKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5zZXQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFTZXRJKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuaWY6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFJZkkobmV3UGFyYW1zKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5pZmVsc2U6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFJZkVsc2VJKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuY29tcGFyZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUNvbXBhcmVJKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYua2V5ZG93bjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUtleWRvd25JKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuYWRkOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBQWRkSShuZXdQYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBDcmVhdGVJKHR5cGU6IEFGLCBwYXJhbWV0ZXJzOiAoQVNJIHwgQUZJKVtdIHwgdW5kZWZpbmVkKTogQUZJIHtcclxuICAgICAgICBzd2l0Y2godHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEFGLm5vbmU6XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFEb05vdGhpbmdJKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuY2hhaW46XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFDaGFpbkkoPEFGSVtdIHwgdW5kZWZpbmVkPiBwYXJhbWV0ZXJzKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5nZXQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFHZXRJKDxBU0lbXSB8IHVuZGVmaW5lZD4gcGFyYW1ldGVycyk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuc2V0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBU2V0SShwYXJhbWV0ZXJzKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5pZjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUlmSShwYXJhbWV0ZXJzKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5pZmVsc2U6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFJZkVsc2VJKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgICAgICBjYXNlIEFGLmNvbXBhcmU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFDb21wYXJlSShwYXJhbWV0ZXJzKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5rZXlkb3duOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBS2V5ZG93bkkocGFyYW1ldGVycyk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuYWRkOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBQWRkSShwYXJhbWV0ZXJzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgQ3JlYXRlRUkob2JqOiBBRkksIGJsb2NrRGl2OiBIVE1MRGl2RWxlbWVudCwgYW5wOiBBcHBBbmRQcm9qZWN0KTogQUZFSSB7XHJcbiAgICAgICAgc3dpdGNoKG9iai50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQUYubm9uZTpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQURvTm90aGluZ0VJKG9iaiwgYmxvY2tEaXYsIGFucCk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuY2hhaW46XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFDaGFpbkVJKG9iaiwgYmxvY2tEaXYsIGFucCk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuZ2V0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBR2V0RUkob2JqLCBibG9ja0RpdiwgYW5wKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5zZXQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFTZXRFSShvYmosIGJsb2NrRGl2LCBhbnApO1xyXG4gICAgICAgICAgICBjYXNlIEFGLmlmOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBSWZFSShvYmosIGJsb2NrRGl2LCBhbnApO1xyXG4gICAgICAgICAgICBjYXNlIEFGLmlmZWxzZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUlmRWxzZUVJKG9iaiwgYmxvY2tEaXYsIGFucCk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuY29tcGFyZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUNvbXBhcmVFSShvYmosIGJsb2NrRGl2LCBhbnApO1xyXG4gICAgICAgICAgICBjYXNlIEFGLmtleWRvd246XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFLZXlkb3duRUkob2JqLCBibG9ja0RpdiwgYW5wKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5hZGQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFBZGRFSShvYmosIGJsb2NrRGl2LCBhbnApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBDcmVhdGVSSShvYmo6IEFGSSwgYW5wOiBBcHBBbmRQcm9qZWN0KTogQUZSSSB7XHJcbiAgICAgICAgc3dpdGNoKG9iai50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQUYubm9uZTpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQURvTm90aGluZ1JJKG9iaiwgYW5wKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5jaGFpbjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUNoYWluUkkob2JqLCBhbnApO1xyXG4gICAgICAgICAgICBjYXNlIEFGLmdldDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUdldFJJKG9iaiwgYW5wKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5zZXQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFTZXRSSShvYmosIGFucCk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuaWY6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFJZlJJKG9iaiwgYW5wKTtcclxuICAgICAgICAgICAgY2FzZSBBRi5pZmVsc2U6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFJZkVsc2VSSShvYmosIGFucCk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuY29tcGFyZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUNvbXBhcmVSSShvYmosIGFucCk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYua2V5ZG93bjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQUtleWRvd25SSShvYmosIGFucCk7XHJcbiAgICAgICAgICAgIGNhc2UgQUYuYWRkOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBQWRkUkkob2JqLCBhbnApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8jcmVnaW9uIEFic3RyYWN0IENsYXNzZXNcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFGSSB7XHJcbiAgICB0eXBlOiBBRjtcclxuICAgIGRlZmF1bHRQYXJhbWV0ZXJzOiAoQVNJIHwgQUZJKVtdO1xyXG4gICAgcGFyYW1ldGVyczogKEFTSSB8IEFGSSlbXTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFBhcmFtZXRlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBbXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFGRUkge1xyXG4gICAgYW5wOiBBcHBBbmRQcm9qZWN0O1xyXG4gICAgaW5zdGFuY2U6IEFGSTtcclxuICAgIGRpdjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBwYXJlbnRFSTogQUZFSSB8IHVuZGVmaW5lZDtcclxuICAgIGNvbnN0cnVjdG9yKGluc3RhbmNlOiBBRkksIGJsb2NrRGl2OiBIVE1MRGl2RWxlbWVudCwgYW5wOiBBcHBBbmRQcm9qZWN0KSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMuZGl2ID0gYmxvY2tEaXY7XHJcbiAgICAgICAgdGhpcy5hbnAgPSBhbnA7XHJcbiAgICAgICAgdGhpcy5EaXNwbGF5QmxvY2soKTtcclxuICAgIH1cclxuICAgIGFic3RyYWN0IERpc3BsYXlCbG9jaygpOiB2b2lkO1xyXG4gICAgc3RhdGljIEFkanVzdElucHV0V2lkdGgoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudCwgZGl2OiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IHRlbXBFbCA9IGRpdi5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBpbnB1dC52YWx1ZSB9ICk7XHJcbiAgICAgICAgdGVtcEVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICB0ZW1wRWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgIHRlbXBFbC5zdHlsZS53aGl0ZVNwYWNlID0gJ25vd3JhcCc7XHJcbiAgICAgICAgdGVtcEVsLnN0eWxlLmZvbnQgPSAnaW5oZXJpdCc7XHJcbiAgICAgICAgdGVtcEVsLnN0eWxlLnBhZGRpbmcgPSAnMXZoJztcclxuICAgICAgICBpbnB1dC5zdHlsZS53aWR0aCA9IHRlbXBFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCArICdweCc7XHJcbiAgICAgICAgdGVtcEVsLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gICAgQ3JlYXRlQVNJT3JBRklQYXJhbWV0ZXJEaXYoaW5kZXg6IG51bWJlciwgcGFyYW1EaXY6IEhUTUxEaXZFbGVtZW50LCBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZyk6IHZvaWQgfCBBRkVJIHtcclxuICAgICAgICBjb25zdCBwYXJhbSA9IHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1tpbmRleF07XHJcbiAgICAgICAgaWYgKHBhcmFtIGluc3RhbmNlb2YgQVNJKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkNyZWF0ZUFTSVBhcmFtZXRlckRpdihpbmRleCwgcGFyYW1EaXYsIGJhY2tncm91bmRDb2xvcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ3JlYXRlQUZJUGFyYW1ldGVyRGl2KGluZGV4LCBwYXJhbURpdiwgYmFja2dyb3VuZENvbG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBDcmVhdGVBU0lQYXJhbWV0ZXJEaXYoaW5kZXg6IG51bWJlciwgcGFyYW1EaXY6IEhUTUxEaXZFbGVtZW50LCBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIEFGRUkuU2V0UGFyYW1ldGVyRGl2KHRoaXMuYW5wLCB0aGlzLCBwYXJhbURpdiwgaW5kZXgpO1xyXG4gICAgICAgIGNvbnN0IHBhcmFtID0gPEFTST4gdGhpcy5pbnN0YW5jZS5wYXJhbWV0ZXJzW2luZGV4XTtcclxuICAgICAgICBBU0hhbmRsZXIuQ3JlYXRlSUkocGFyYW0sIHBhcmFtRGl2LCBiYWNrZ3JvdW5kQ29sb3IpO1xyXG4gICAgfVxyXG4gICAgQ3JlYXRlQUZJUGFyYW1ldGVyRGl2KGluZGV4OiBudW1iZXIsIHBhcmFtRGl2OiBIVE1MRGl2RWxlbWVudCwgYmFja2dyb3VuZENvbG9yOiBzdHJpbmcpOiBBRkVJIHtcclxuICAgICAgICBBRkVJLlNldFBhcmFtZXRlckRpdih0aGlzLmFucCwgdGhpcywgcGFyYW1EaXYsIGluZGV4KTtcclxuICAgICAgICBjb25zdCBwYXJhbSA9IDxBRkk+IHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1tpbmRleF07XHJcbiAgICAgICAgY29uc3QgcGFyYW1FSSA9IEFGSGFuZGxlci5DcmVhdGVFSShwYXJhbSwgcGFyYW1EaXYsIHRoaXMuYW5wKTtcclxuICAgICAgICBwYXJhbUVJLnBhcmVudEVJID0gdGhpcztcclxuICAgICAgICBpZiAocGFyYW1FSS5pbnN0YW5jZS50eXBlID09PSBBRi5ub25lKSB7XHJcbiAgICAgICAgICAgIHBhcmFtRUkuZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGJhY2tncm91bmRDb2xvcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBBRkVJLk1ha2VCbG9ja0RyYWdnYWJsZShwYXJhbUVJLCB0aGlzLmFucCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyYW1FSTtcclxuICAgIH1cclxuICAgIFJlbW92ZVBhcmFtZXRlcihwYXJhbWV0ZXI6IEFGSSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbnN0YW5jZS5wYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnNbaV0gPT09IHBhcmFtZXRlcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VyckRlZmF1bHRQYXJhbSA9IHRoaXMuaW5zdGFuY2UuZGVmYXVsdFBhcmFtZXRlcnNbaV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnNbaV0gPSBjdXJyRGVmYXVsdFBhcmFtIGluc3RhbmNlb2YgQVNJID8gQVNIYW5kbGVyLkNvcHkoY3VyckRlZmF1bHRQYXJhbSkgOiBBRkhhbmRsZXIuQ29weShjdXJyRGVmYXVsdFBhcmFtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBNYWtlQmxvY2tEcmFnZ2FibGUoYmxvY2s6IEFGRUksIGFucDogQXBwQW5kUHJvamVjdCwgaXNDb3B5OiBib29sZWFuKSB7XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0RWRpdG9yID0gYW5wLnByb2plY3Quc2NyaXB0RWRpdG9yO1xyXG4gICAgICAgIGJsb2NrLmRpdi5kcmFnZ2FibGUgPSB0cnVlO1xyXG4gICAgICAgIGJsb2NrLmRpdi5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIChldmVudDogRHJhZ0V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdjb3B5JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzY3JpcHRFZGl0b3IuY3VycmVudGx5RHJhZ2dlZEJsb2NrSXNDb3B5ID0gaXNDb3B5O1xyXG4gICAgICAgICAgICBzY3JpcHRFZGl0b3IuY3VycmVudGx5RHJhZ2dlZEJsb2NrID0gYmxvY2s7XHJcbiAgICAgICAgICAgIHNjcmlwdEVkaXRvci5ibG9ja3NEaXYuc3R5bGUuaGVpZ2h0ID0gJzkwJSc7XHJcbiAgICAgICAgICAgIHNjcmlwdEVkaXRvci5kZWxEaXYuc3R5bGUuaGVpZ2h0ID0gJzEwJSc7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJsb2NrLmRpdi5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgKGV2ZW50OiBEcmFnRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHNjcmlwdEVkaXRvci5ibG9ja3NEaXYuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICBzY3JpcHRFZGl0b3IuZGVsRGl2LnN0eWxlLmhlaWdodCA9ICcwJSc7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIFNldFBhcmFtZXRlckRpdihhbnA6IEFwcEFuZFByb2plY3QsIGFmZWk6IEFGRUksIHBhcmFtRGl2OiBIVE1MRGl2RWxlbWVudCwgcGFyYW1JbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0RWRpdG9yID0gYW5wLnByb2plY3Quc2NyaXB0RWRpdG9yO1xyXG5cclxuICAgICAgICBwYXJhbURpdi5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIChldmVudDogRHJhZ0V2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwiY29weVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhcmFtRGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICAgICAgICAgICAgcGFyYW1EaXYuc3R5bGUuYm9yZGVyQ29sb3IgPSBBQ0NFTlRfQ09MT1JfMTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcGFyYW1EaXYuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgKGV2ZW50OiBEcmFnRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHBhcmFtRGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJyc7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBhcmFtRGl2LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCAoZXZlbnQ6IERyYWdFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgaWYgKHNjcmlwdEVkaXRvci5jdXJyZW50bHlEcmFnZ2VkQmxvY2sgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBuZXdCbG9jaztcclxuICAgICAgICAgICAgbGV0IG5ld0Jsb2NrRGl2O1xyXG4gICAgICAgICAgICBpZiAoc2NyaXB0RWRpdG9yLmN1cnJlbnRseURyYWdnZWRCbG9ja0lzQ29weSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3QmxvY2tJbnN0YW5jZSA9IEFGSGFuZGxlci5Db3B5KHNjcmlwdEVkaXRvci5jdXJyZW50bHlEcmFnZ2VkQmxvY2suaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgbmV3QmxvY2tEaXYgPSA8SFRNTERpdkVsZW1lbnQ+IHNjcmlwdEVkaXRvci5jdXJyZW50bHlEcmFnZ2VkQmxvY2suZGl2LmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIG5ld0Jsb2NrID0gQUZIYW5kbGVyLkNyZWF0ZUVJKG5ld0Jsb2NrSW5zdGFuY2UsIG5ld0Jsb2NrRGl2LCBhbnApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNjcmlwdEVkaXRvci5jdXJyZW50bHlEcmFnZ2VkQmxvY2sucGFyZW50RUkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEVJID0gc2NyaXB0RWRpdG9yLmN1cnJlbnRseURyYWdnZWRCbG9jay5wYXJlbnRFSTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRFSS5SZW1vdmVQYXJhbWV0ZXIoc2NyaXB0RWRpdG9yLmN1cnJlbnRseURyYWdnZWRCbG9jay5pbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50RUkuRGlzcGxheUJsb2NrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXdCbG9ja0RpdiA9IHNjcmlwdEVkaXRvci5jdXJyZW50bHlEcmFnZ2VkQmxvY2suZGl2O1xyXG4gICAgICAgICAgICAgICAgbmV3QmxvY2sgPSBzY3JpcHRFZGl0b3IuY3VycmVudGx5RHJhZ2dlZEJsb2NrO1xyXG4gICAgICAgICAgICAgICAgbmV3QmxvY2tEaXYuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWZlaS5pbnN0YW5jZS5wYXJhbWV0ZXJzW3BhcmFtSW5kZXhdID0gbmV3QmxvY2suaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIGFmZWkuRGlzcGxheUJsb2NrKCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHNjcmlwdEVkaXRvci5jdXJyZW50bHlEcmFnZ2VkQmxvY2sgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBRlJJIHtcclxuICAgIHR5cGU6IEFGO1xyXG4gICAgcGFyYW1ldGVyczogKEFTSSB8IEFGUkkpW107XHJcbiAgICBhbnA6IEFwcEFuZFByb2plY3Q7XHJcbiAgICBhYnN0cmFjdCBFeGVjdXRlKCk6IFByb21pc2U8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKG9nRnVuY3Rpb246IEFGSSwgYW5wOiBBcHBBbmRQcm9qZWN0KSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gb2dGdW5jdGlvbi50eXBlO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYW5wID0gYW5wO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2dGdW5jdGlvbi5wYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9nUGFyYW0gPSBvZ0Z1bmN0aW9uLnBhcmFtZXRlcnNbaV07XHJcbiAgICAgICAgICAgIGxldCBjb3B5O1xyXG4gICAgICAgICAgICBpZiAob2dQYXJhbSBpbnN0YW5jZW9mIEFTSSkge1xyXG4gICAgICAgICAgICAgICAgY29weSA9IEFTSGFuZGxlci5Db3B5KG9nUGFyYW0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29weSA9IEFGSGFuZGxlci5DcmVhdGVSSShvZ1BhcmFtLCBhbnApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKGNvcHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyNlbmRyZWdpb24gQWJzdHJhY3QgQ2xhc3Nlc1xyXG5cclxuLy8jcmVnaW9uIERvIE5vdGhpbmdcclxuZXhwb3J0IGNsYXNzIEFEb05vdGhpbmdJIGV4dGVuZHMgQUZJIHtcclxuICAgIHR5cGUgPSBBRi5ub25lO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQURvTm90aGluZ0VJIGV4dGVuZHMgQUZFSSB7XHJcbiAgICBpbnN0YW5jZTogQURvTm90aGluZ0k7XHJcbiAgICBvdmVycmlkZSBEaXNwbGF5QmxvY2soKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXYuY2xhc3NOYW1lID0gJ2dlb2QzLXNjcmlwdC1ibG9jayc7XHJcbiAgICAgICAgdGhpcy5kaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gQkdfQ09MT1JfMztcclxuICAgIH1cclxuICAgIG92ZXJyaWRlIFJlbW92ZVBhcmFtZXRlcihwYXJhbWV0ZXI6IEFGSSk6IHZvaWQgeyB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBRG9Ob3RoaW5nUkkgZXh0ZW5kcyBBRlJJIHtcclxuICAgIGFzeW5jIEV4ZWN1dGUoKTogUHJvbWlzZTx2b2lkPiB7fVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBEbyBOb3RoaW5nXHJcblxyXG4vLyNyZWdpb24gQ2hhaW5cclxuZXhwb3J0IGNsYXNzIEFDaGFpbkkgZXh0ZW5kcyBBRkkge1xyXG4gICAgdHlwZSA9IEFGLmNoYWluO1xyXG4gICAgZGVmYXVsdFBhcmFtZXRlcnM6IEFGSVtdO1xyXG4gICAgcGFyYW1ldGVyczogQUZJW107XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzOiAoQUZJKVtdIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBjb25zdCBkb05vdGhpbmcgPSBuZXcgQURvTm90aGluZ0koKTtcclxuICAgICAgICB0aGlzLmRlZmF1bHRQYXJhbWV0ZXJzLnB1c2goZG9Ob3RoaW5nKTtcclxuICAgICAgICBpZiAocGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnB1c2goQUZIYW5kbGVyLkNvcHkoZG9Ob3RoaW5nKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQUNoYWluRUkgZXh0ZW5kcyBBRkVJIHtcclxuICAgIGluc3RhbmNlOiBBQ2hhaW5JO1xyXG4gICAgb3ZlcnJpZGUgRGlzcGxheUJsb2NrKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGl2LmVtcHR5KCk7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5kaXY7XHJcbiAgICAgICAgZGl2LmNsYXNzTmFtZSA9ICdnZW9kMy1zY3JpcHQtYmxvY2sgdmJveCc7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IEJHX0NPTE9SXzI7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICAgICAgICBkaXYuc3R5bGUuYm9yZGVyQ29sb3IgPSBBQ0NFTlRfQ09MT1JfMztcclxuICAgICAgICBkaXYuc3R5bGUud2lkdGggPSAnZml0LWNvbnRlbnQnO1xyXG4gICAgICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gJzF2aCc7XHJcbiAgICAgICAgZGl2LnN0eWxlLmdhcCA9ICcxdmgnO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW5zdGFuY2UucGFyYW1ldGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJCbG9ja0RpdiA9IGRpdi5jcmVhdGVEaXYoJ2dlb2QzLXNjcmlwdC1ibG9jay1pbm5lci1zZWN0aW9uIGhib3gnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGN1cnJCbG9ja0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnLScgfSApO1xyXG4gICAgICAgICAgICBjb25zdCBhZGRCdXR0b24gPSBjdXJyQmxvY2tEaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJysnIH0gKTtcclxuXHJcbiAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbi5jbGFzc05hbWUgPSAnZ2VvZDMtcmVtb3ZlLWJ1dHRvbic7XHJcbiAgICAgICAgICAgIGFkZEJ1dHRvbi5jbGFzc05hbWUgPSAnZ2VvZDMtYWRkLWJ1dHRvbic7XHJcblxyXG4gICAgICAgICAgICBkZWxldGVCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UucGFyYW1ldGVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5EaXNwbGF5QmxvY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhZGRCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UucGFyYW1ldGVycy5zcGxpY2UoaW5kZXgsIDAsIG5ldyBBRG9Ob3RoaW5nSSgpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuRGlzcGxheUJsb2NrKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuQ3JlYXRlQUZJUGFyYW1ldGVyRGl2KGluZGV4LCBjdXJyQmxvY2tEaXYuY3JlYXRlRGl2KCksIEJHX0NPTE9SXzMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhZGRCdXR0b24gPSBkaXYuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJysnIH0gKTtcclxuICAgICAgICBhZGRCdXR0b24uY2xhc3NOYW1lID0gJ2dlb2QzLWFkZC1idXR0b24nO1xyXG5cclxuICAgICAgICBhZGRCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5wYXJhbWV0ZXJzLnNwbGljZSh0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnMubGVuZ3RoLCAwLCBuZXcgQURvTm90aGluZ0koKSk7XHJcbiAgICAgICAgICAgIHRoaXMuRGlzcGxheUJsb2NrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb3ZlcnJpZGUgUmVtb3ZlUGFyYW1ldGVyKHBhcmFtZXRlcjogQUZJKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1tpXSA9PT0gcGFyYW1ldGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnNbaV0gPSBBRkhhbmRsZXIuQ29weSh0aGlzLmluc3RhbmNlLmRlZmF1bHRQYXJhbWV0ZXJzWzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFDaGFpblJJIGV4dGVuZHMgQUZSSSB7XHJcbiAgICBwYXJhbWV0ZXJzOiBBRlJJW107XHJcbiAgICBhc3luYyBFeGVjdXRlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGFyYW1ldGVyc1tpXS5FeGVjdXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBDaGFpblxyXG5cclxuLy8jcmVnaW9uIEdldFxyXG5leHBvcnQgY2xhc3MgQUdldEkgZXh0ZW5kcyBBRkkge1xyXG4gICAgdHlwZSA9IEFGLmdldDtcclxuICAgIHBhcmFtZXRlcnM6IEFTSVtdO1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVyczogQVNJW10gfCB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdXBlcigpXHJcbiAgICAgICAgY29uc3Qgb2JqSW5kZXggPSBuZXcgQU51bWJlckkoU2NvcGUuVmFsdWUsICdPYmplY3QgSW5kZXgnKTtcclxuICAgICAgICBjb25zdCB2YXJOYW1lID0gbmV3IEFTdHJpbmdJKFNjb3BlLlZhbHVlLCAnVmFyaWFibGUgTmFtZScpO1xyXG4gICAgICAgIG9iakluZGV4LnZhbHVlID0gMDtcclxuICAgICAgICB2YXJOYW1lLnZhbHVlID0gJ1Nwcml0ZSBQYXRoJztcclxuICAgICAgICB0aGlzLmRlZmF1bHRQYXJhbWV0ZXJzID0gW3Zhck5hbWUsIG9iakluZGV4XTtcclxuICAgICAgICBpZiAocGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnB1c2goQVNIYW5kbGVyLkNvcHkodmFyTmFtZSkpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMucHVzaChBU0hhbmRsZXIuQ29weShvYmpJbmRleCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFHZXRFSSBleHRlbmRzIEFGRUkge1xyXG4gICAgaW5zdGFuY2U6IEFHZXRJO1xyXG4gICAgb3ZlcnJpZGUgRGlzcGxheUJsb2NrKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGl2LmVtcHR5KCk7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5kaXY7XHJcbiAgICAgICAgZGl2LmNsYXNzTmFtZSA9ICdnZW9kMy1zY3JpcHQtYmxvY2sgaGJveCc7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IENFTlRSQUxfQ09MT1JfMjtcclxuICAgICAgICBkaXYuc3R5bGUuYm9yZGVyU3R5bGUgPSAnc29saWQnO1xyXG4gICAgICAgIGRpdi5zdHlsZS5ib3JkZXJDb2xvciA9IEFDQ0VOVF9DT0xPUl8zO1xyXG4gICAgICAgIGNvbnN0IGFucCA9IHRoaXMuYW5wO1xyXG5cclxuICAgICAgICBjb25zdCB2YXJOYW1lID0gdGhpcy5pbnN0YW5jZS5wYXJhbWV0ZXJzWzBdO1xyXG4gICAgICAgIGNvbnN0IG9iaklEID0gdGhpcy5pbnN0YW5jZS5wYXJhbWV0ZXJzWzFdO1xyXG5cclxuICAgICAgICBkaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogJ0dldCcgfSApO1xyXG4gICAgICAgIGNvbnN0IHZhckRpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuICAgICAgICBkaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogJ2Zyb20nIH0gKTtcclxuICAgICAgICBjb25zdCBvYmpEaXYgPSBkaXYuY3JlYXRlRGl2KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG9iaklESW5wdXQgPSBvYmpEaXYuY3JlYXRlRWwoJ3NlbGVjdCcpO1xyXG4gICAgICAgIGNvbnN0IHZhck5hbWVJbnB1dCA9IHZhckRpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XHJcblxyXG4gICAgICAgIG9iaklESW5wdXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gQ0VOVFJBTF9DT0xPUl8zO1xyXG4gICAgICAgIHZhck5hbWVJbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBDRU5UUkFMX0NPTE9SXzM7XHJcblxyXG4gICAgICAgIG9iaklESW5wdXQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJzAnO1xyXG4gICAgICAgIHZhck5hbWVJbnB1dC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnMCc7XHJcblxyXG4gICAgICAgIGNvbnN0IG9iakFyciA9IGFucC5wcm9qZWN0LnNjZW5lVmlldy5vYmplY3RzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG9iaklESW5wdXQuY3JlYXRlRWwoJ29wdGlvbicsIHsgdGV4dDogaSArICc6ICcgKyBvYmpBcnJbaV0ubmFtZSwgdmFsdWU6IGkgKyAnOiAnICsgb2JqQXJyW2ldLm5hbWUgfSApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgR2V0QWxsVmFyTmFtZXMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHZhck5hbWVJbnB1dC5lbXB0eSgpO1xyXG4gICAgICAgICAgICBjb25zdCBvYmpBcnIgPSBhbnAucHJvamVjdC5zY2VuZVZpZXcub2JqZWN0cztcclxuICAgICAgICAgICAgY29uc3QgdmFyQXJyID0gb2JqQXJyW3RoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1sxXS52YWx1ZV0udmFyaWFibGVzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhckFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyTmFtZUlucHV0LmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6IHZhckFycltpXS5uYW1lLCB2YWx1ZTogdmFyQXJyW2ldLm5hbWUgfSApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIG9iaklESW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1sxXS52YWx1ZSA9IHBhcnNlSW50KG9iaklESW5wdXQudmFsdWUuc3BsaXQoJzonKVswXSk7XHJcbiAgICAgICAgICAgIEFGRUkuQWRqdXN0SW5wdXRXaWR0aChvYmpJRElucHV0LCBkaXYpO1xyXG4gICAgICAgICAgICBHZXRBbGxWYXJOYW1lcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXJOYW1lSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1swXS52YWx1ZSA9IHZhck5hbWVJbnB1dC52YWx1ZTtcclxuICAgICAgICAgICAgQUZFSS5BZGp1c3RJbnB1dFdpZHRoKHZhck5hbWVJbnB1dCwgZGl2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEdldEFsbFZhck5hbWVzKCk7XHJcblxyXG4gICAgICAgIG9iaklESW5wdXQudmFsdWUgPSBvYmpJRC52YWx1ZSArICc6ICcgKyBvYmpBcnJbb2JqSUQudmFsdWVdLm5hbWU7XHJcbiAgICAgICAgdmFyTmFtZUlucHV0LnZhbHVlID0gdmFyTmFtZS52YWx1ZTtcclxuICAgICAgICBcclxuICAgICAgICBBRkVJLkFkanVzdElucHV0V2lkdGgob2JqSURJbnB1dCwgZGl2KTtcclxuICAgICAgICBBRkVJLkFkanVzdElucHV0V2lkdGgodmFyTmFtZUlucHV0LCBkaXYpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQUdldFJJIGV4dGVuZHMgQUZSSSB7XHJcbiAgICBwYXJhbWV0ZXJzOiBBU0lbXTtcclxuICAgIGFzeW5jIEV4ZWN1dGUoKTogUHJvbWlzZTxBU0k+IHtcclxuICAgICAgICBjb25zdCB2YXJOYW1lID0gdGhpcy5wYXJhbWV0ZXJzWzBdO1xyXG4gICAgICAgIGNvbnN0IG9iakluZGV4ID0gdGhpcy5wYXJhbWV0ZXJzWzFdO1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IHRoaXMuYW5wLnByb2plY3QuZ2FtZVZpZXcub2JqZWN0c1tvYmpJbmRleC52YWx1ZV07XHJcbiAgICAgICAgcmV0dXJuIEdFT0QzT2JqZWN0SGFuZGxlci5HZXRWYXJpYWJsZShvYmosIHZhck5hbWUudmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBHZXRcclxuXHJcbi8vI3JlZ2lvbiBTZXRcclxuZXhwb3J0IGNsYXNzIEFTZXRJIGV4dGVuZHMgQUZJIHtcclxuICAgIHR5cGUgPSBBRi5zZXQ7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzOiAoQVNJIHwgQUZJKVtdIHwgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3VwZXIoKVxyXG4gICAgICAgIGNvbnN0IHZhck5hbWUgPSBuZXcgQVN0cmluZ0koU2NvcGUuVmFsdWUsICdWYXJpYWJsZSBOYW1lJyk7XHJcbiAgICAgICAgY29uc3Qgb2JqSW5kZXggPSBuZXcgQU51bWJlckkoU2NvcGUuVmFsdWUsICdPYmplY3QgSW5kZXgnKTtcclxuICAgICAgICB2YXJOYW1lLnZhbHVlID0gJ1Nwcml0ZSBQYXRoJztcclxuICAgICAgICBvYmpJbmRleC52YWx1ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0UGFyYW1ldGVycyA9IFt2YXJOYW1lLCBvYmpJbmRleF07XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKEFTSGFuZGxlci5Db3B5KHZhck5hbWUpKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnB1c2goQVNIYW5kbGVyLkNvcHkob2JqSW5kZXgpKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnB1c2goQVNIYW5kbGVyLkNyZWF0ZUkoQVMubnVtYmVyLCBTY29wZS5WYWx1ZSwgJycpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU2V0RUkgZXh0ZW5kcyBBRkVJIHtcclxuICAgIGluc3RhbmNlOiBBU2V0STtcclxuICAgIG92ZXJyaWRlIERpc3BsYXlCbG9jaygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRpdi5lbXB0eSgpO1xyXG4gICAgICAgIGNvbnN0IGRpdiA9IHRoaXMuZGl2O1xyXG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSAnZ2VvZDMtc2NyaXB0LWJsb2NrIGhib3gnO1xyXG4gICAgICAgIGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBDRU5UUkFMX0NPTE9SXzI7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICAgICAgICBkaXYuc3R5bGUuYm9yZGVyQ29sb3IgPSBBQ0NFTlRfQ09MT1JfMztcclxuICAgICAgICBjb25zdCBhbnAgPSB0aGlzLmFucDtcclxuXHJcbiAgICAgICAgY29uc3QgdmFyTmFtZSA9IDxBU0k+IHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1swXTtcclxuICAgICAgICBjb25zdCBvYmpJRCA9IDxBU0k+IHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1sxXTtcclxuXHJcbiAgICAgICAgZGl2LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6ICdTZXQnIH0gKTtcclxuICAgICAgICBjb25zdCB2YXJEaXYgPSBkaXYuY3JlYXRlRGl2KCk7XHJcbiAgICAgICAgZGl2LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6ICdmcm9tJyB9ICk7XHJcbiAgICAgICAgY29uc3Qgb2JqRGl2ID0gZGl2LmNyZWF0ZURpdigpO1xyXG4gICAgICAgIGRpdi5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAndG8nIH0gKTtcclxuICAgICAgICBjb25zdCB2YWx1ZURpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb2JqSURJbnB1dCA9IG9iakRpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgY29uc3QgdmFyTmFtZUlucHV0ID0gdmFyRGl2LmNyZWF0ZUVsKCdzZWxlY3QnKTtcclxuXHJcbiAgICAgICAgb2JqSURJbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBDRU5UUkFMX0NPTE9SXzM7XHJcbiAgICAgICAgdmFyTmFtZUlucHV0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IENFTlRSQUxfQ09MT1JfMztcclxuXHJcbiAgICAgICAgb2JqSURJbnB1dC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnMCc7XHJcbiAgICAgICAgdmFyTmFtZUlucHV0LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcwJztcclxuXHJcbiAgICAgICAgY29uc3Qgb2JqQXJyID0gYW5wLnByb2plY3Quc2NlbmVWaWV3Lm9iamVjdHM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmpBcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgb2JqSURJbnB1dC5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiBpICsgJzogJyArIG9iakFycltpXS5uYW1lLCB2YWx1ZTogaSArICc6ICcgKyBvYmpBcnJbaV0ubmFtZSB9ICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBHZXRBbGxWYXJOYW1lcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgdmFyTmFtZUlucHV0LmVtcHR5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9iakFyciA9IGFucC5wcm9qZWN0LnNjZW5lVmlldy5vYmplY3RzO1xyXG4gICAgICAgICAgICBjb25zdCB2YXJBcnIgPSBvYmpBcnJbKDxBU0k+IHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1sxXSkudmFsdWVdLnZhcmlhYmxlcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YXJBcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhck5hbWVJbnB1dC5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiB2YXJBcnJbaV0ubmFtZSwgdmFsdWU6IHZhckFycltpXS5uYW1lIH0gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFsdWVEaXYuZW1wdHkoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1syXSBpbnN0YW5jZW9mIEFGSSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5DcmVhdGVBRklQYXJhbWV0ZXJEaXYoMiwgdmFsdWVEaXYsIENFTlRSQUxfQ09MT1JfMyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNyZWF0ZUFTSVBhcmFtZXRlckRpdigyLCB2YWx1ZURpdiwgQ0VOVFJBTF9DT0xPUl8zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBvYmpJRElucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAoPEFTST4gdGhpcy5pbnN0YW5jZS5wYXJhbWV0ZXJzWzFdKS52YWx1ZSA9IHBhcnNlSW50KG9iaklESW5wdXQudmFsdWUuc3BsaXQoJzonKVswXSk7XHJcbiAgICAgICAgICAgIEFGRUkuQWRqdXN0SW5wdXRXaWR0aChvYmpJRElucHV0LCBkaXYpO1xyXG4gICAgICAgICAgICBHZXRBbGxWYXJOYW1lcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXJOYW1lSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICg8QVNJPiB0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnNbMF0pLnZhbHVlID0gdmFyTmFtZUlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICBBRkVJLkFkanVzdElucHV0V2lkdGgodmFyTmFtZUlucHV0LCBkaXYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgR2V0QWxsVmFyTmFtZXMoKTtcclxuXHJcbiAgICAgICAgb2JqSURJbnB1dC52YWx1ZSA9IG9iaklELnZhbHVlICsgJzogJyArIG9iakFycltvYmpJRC52YWx1ZV0ubmFtZTtcclxuICAgICAgICB2YXJOYW1lSW5wdXQudmFsdWUgPSB2YXJOYW1lLnZhbHVlO1xyXG5cclxuICAgICAgICBBRkVJLkFkanVzdElucHV0V2lkdGgob2JqSURJbnB1dCwgZGl2KTtcclxuICAgICAgICBBRkVJLkFkanVzdElucHV0V2lkdGgodmFyTmFtZUlucHV0LCBkaXYpO1xyXG4gICAgfVxyXG4gICAgb3ZlcnJpZGUgUmVtb3ZlUGFyYW1ldGVyKHBhcmFtZXRlcjogQUZJKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1syXSA9PT0gcGFyYW1ldGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRQYXJhbSA9IEFTSGFuZGxlci5DcmVhdGVJKCg8QVNJPiB0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnNbMF0pLnR5cGUsIFNjb3BlLlZhbHVlLCAnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UucGFyYW1ldGVyc1syXSA9IGRlZmF1bHRQYXJhbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBU2V0UkkgZXh0ZW5kcyBBRlJJIHtcclxuICAgIGFzeW5jIEV4ZWN1dGUoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgdmFyTmFtZSA9IDxBU0k+IHRoaXMucGFyYW1ldGVyc1swXTtcclxuICAgICAgICBjb25zdCBvYmpJbmRleCA9IDxBU0k+IHRoaXMucGFyYW1ldGVyc1sxXTtcclxuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLnBhcmFtZXRlcnNbMl07XHJcbiAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5hbnAucHJvamVjdC5nYW1lVmlldy5vYmplY3RzW29iakluZGV4LnZhbHVlXTtcclxuICAgICAgICBjb25zdCB2YXJUb1NldCA9IEdFT0QzT2JqZWN0SGFuZGxlci5HZXRWYXJpYWJsZShvYmosIHZhck5hbWUudmFsdWUpO1xyXG4gICAgICAgIHZhclRvU2V0LnZhbHVlID0gdmFsIGluc3RhbmNlb2YgQUZSSSA/IChhd2FpdCB2YWwuRXhlY3V0ZSgpKS52YWx1ZSA6IHZhbC52YWx1ZTtcclxuICAgIH1cclxufVxyXG4vLyNlbmRyZWdpb24gU2V0XHJcblxyXG4vLyNyZWdpb24gSWZcclxuZXhwb3J0IGNsYXNzIEFJZkkgZXh0ZW5kcyBBRkkge1xyXG4gICAgdHlwZSA9IEFGLmlmO1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVyczogKEFTSSB8IEFGSSlbXSB8IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN1cGVyKClcclxuICAgICAgICBjb25zdCBjb25kaXRpb24gPSBuZXcgQUJvb2xlYW5JKFNjb3BlLlZhbHVlLCAnY29uZGl0aW9uJyk7XHJcbiAgICAgICAgY29uc3QgZG9Ob3RoaW5nID0gbmV3IEFEb05vdGhpbmdJKCk7XHJcbiAgICAgICAgY29uZGl0aW9uLnZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0UGFyYW1ldGVycyA9IFtjb25kaXRpb24sIGRvTm90aGluZ107XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKEFTSGFuZGxlci5Db3B5KGNvbmRpdGlvbikpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMucHVzaChBRkhhbmRsZXIuQ29weShkb05vdGhpbmcpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBSWZFSSBleHRlbmRzIEFGRUkge1xyXG4gICAgaW5zdGFuY2U6IEFJZkk7XHJcbiAgICBvdmVycmlkZSBEaXNwbGF5QmxvY2soKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXYuZW1wdHkoKTtcclxuICAgICAgICBjb25zdCBkaXYgPSB0aGlzLmRpdjtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2dlb2QzLXNjcmlwdC1ibG9jayB2Ym94JztcclxuICAgICAgICBkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gQUNDRU5UX0NPTE9SXzI7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICAgICAgICBkaXYuc3R5bGUuYm9yZGVyQ29sb3IgPSBBQ0NFTlRfQ09MT1JfMztcclxuXHJcbiAgICAgICAgY29uc3QgdG9wRGl2ID0gZGl2LmNyZWF0ZURpdignZ2VvZDMtc2NyaXB0LWJsb2NrLWlubmVyLXNlY3Rpb24gaGJveCcpO1xyXG4gICAgICAgIHRvcERpdi5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnSWYnIH0gKTtcclxuICAgICAgICBjb25zdCBjb25kaXRpb25EaXYgPSB0b3BEaXYuY3JlYXRlRGl2KCk7XHJcbiAgICAgICAgY29uc3QgZnVuY3Rpb25EaXYgPSBkaXYuY3JlYXRlRGl2KCk7XHJcblxyXG4gICAgICAgIHRoaXMuQ3JlYXRlQVNJT3JBRklQYXJhbWV0ZXJEaXYoMCwgY29uZGl0aW9uRGl2LCBBQ0NFTlRfQ09MT1JfMyk7XHJcbiAgICAgICAgdGhpcy5DcmVhdGVBRklQYXJhbWV0ZXJEaXYoMSwgZnVuY3Rpb25EaXYsIEFDQ0VOVF9DT0xPUl8zKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFJZlJJIGV4dGVuZHMgQUZSSSB7XHJcbiAgICBhc3luYyBFeGVjdXRlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtMSA9IHRoaXMucGFyYW1ldGVyc1swXTtcclxuXHJcbiAgICAgICAgY29uc3QgcGFyYW0xSXNBRlJJID0gcGFyYW0xIGluc3RhbmNlb2YgQUZSSTtcclxuXHJcbiAgICAgICAgY29uc3QgY29uZGl0aW9uID0gcGFyYW0xSXNBRlJJID8gKGF3YWl0IHBhcmFtMS5FeGVjdXRlKCkpLnZhbHVlIDogcGFyYW0xLnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtMiA9IDxBRlJJPiB0aGlzLnBhcmFtZXRlcnNbMV07XHJcbiAgICAgICAgICAgIGF3YWl0IHBhcmFtMi5FeGVjdXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBJZlxyXG5cclxuLy8jcmVnaW9uIElmIEVsc2VcclxuZXhwb3J0IGNsYXNzIEFJZkVsc2VJIGV4dGVuZHMgQUZJIHtcclxuICAgIHR5cGUgPSBBRi5pZmVsc2U7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzOiAoQVNJIHwgQUZJKVtdIHwgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3VwZXIoKVxyXG4gICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IG5ldyBBQm9vbGVhbkkoU2NvcGUuVmFsdWUsICdjb25kaXRpb24nKTtcclxuICAgICAgICBjb25zdCBkb05vdGhpbmcgPSBuZXcgQURvTm90aGluZ0koKTtcclxuICAgICAgICBjb25zdCBkb05vdGhpbmcyID0gbmV3IEFEb05vdGhpbmdJKCk7XHJcbiAgICAgICAgY29uZGl0aW9uLnZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0UGFyYW1ldGVycyA9IFtjb25kaXRpb24sIGRvTm90aGluZywgZG9Ob3RoaW5nMl07XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKEFTSGFuZGxlci5Db3B5KGNvbmRpdGlvbikpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMucHVzaChBRkhhbmRsZXIuQ29weShkb05vdGhpbmcpKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnB1c2goQUZIYW5kbGVyLkNvcHkoZG9Ob3RoaW5nMikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFJZkVsc2VFSSBleHRlbmRzIEFGRUkge1xyXG4gICAgaW5zdGFuY2U6IEFJZkVsc2VJO1xyXG4gICAgb3ZlcnJpZGUgRGlzcGxheUJsb2NrKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGl2LmVtcHR5KCk7XHJcbiAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5kaXY7XHJcbiAgICAgICAgZGl2LmNsYXNzTmFtZSA9ICdnZW9kMy1zY3JpcHQtYmxvY2sgdmJveCc7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IEFDQ0VOVF9DT0xPUl8yO1xyXG4gICAgICAgIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJvcmRlckNvbG9yID0gQUNDRU5UX0NPTE9SXzM7XHJcblxyXG4gICAgICAgIGNvbnN0IHRvcERpdiA9IGRpdi5jcmVhdGVEaXYoJ2dlb2QzLXNjcmlwdC1ibG9jay1pbm5lci1zZWN0aW9uIGhib3gnKTtcclxuICAgICAgICB0b3BEaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogJ0lmJyB9ICk7XHJcbiAgICAgICAgY29uc3QgY29uZGl0aW9uRGl2ID0gdG9wRGl2LmNyZWF0ZURpdigpO1xyXG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uMURpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuICAgICAgICBkaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogJ0Vsc2UnIH0gKTtcclxuICAgICAgICBjb25zdCBmdW5jdGlvbjJEaXYgPSBkaXYuY3JlYXRlRGl2KCk7XHJcblxyXG4gICAgICAgIHRoaXMuQ3JlYXRlQVNJT3JBRklQYXJhbWV0ZXJEaXYoMCwgY29uZGl0aW9uRGl2LCBBQ0NFTlRfQ09MT1JfMyk7XHJcbiAgICAgICAgdGhpcy5DcmVhdGVBRklQYXJhbWV0ZXJEaXYoMSwgZnVuY3Rpb24xRGl2LCBBQ0NFTlRfQ09MT1JfMyk7XHJcbiAgICAgICAgdGhpcy5DcmVhdGVBRklQYXJhbWV0ZXJEaXYoMiwgZnVuY3Rpb24yRGl2LCBBQ0NFTlRfQ09MT1JfMyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBSWZFbHNlUkkgZXh0ZW5kcyBBRlJJIHtcclxuICAgIGFzeW5jIEV4ZWN1dGUoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgcGFyYW0xID0gdGhpcy5wYXJhbWV0ZXJzWzBdO1xyXG5cclxuICAgICAgICBjb25zdCBwYXJhbTFJc0FGUkkgPSBwYXJhbTEgaW5zdGFuY2VvZiBBRlJJO1xyXG5cclxuICAgICAgICBjb25zdCBjb25kaXRpb24gPSBwYXJhbTFJc0FGUkkgPyAoYXdhaXQgcGFyYW0xLkV4ZWN1dGUoKSkudmFsdWUgOiBwYXJhbTEudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyYW0yID0gPEFGUkk+IHRoaXMucGFyYW1ldGVyc1sxXTtcclxuICAgICAgICAgICAgYXdhaXQgcGFyYW0yLkV4ZWN1dGUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJhbTMgPSA8QUZSST4gdGhpcy5wYXJhbWV0ZXJzWzJdO1xyXG4gICAgICAgICAgICBhd2FpdCBwYXJhbTMuRXhlY3V0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyNlbmRyZWdpb24gSWYgRWxzZVxyXG5cclxuLy8jcmVnaW9uIENvbXBhcmVcclxuZXhwb3J0IGNsYXNzIEFDb21wYXJlSSBleHRlbmRzIEFGSSB7XHJcbiAgICB0eXBlID0gQUYuY29tcGFyZTtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IChBU0kgfCBBRkkpW10gfCB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdXBlcigpXHJcbiAgICAgICAgY29uc3QgdmFsMSA9IG5ldyBBTnVtYmVySShTY29wZS5WYWx1ZSwgJ3ZhbDEnKTtcclxuICAgICAgICBjb25zdCB0eXBlID0gbmV3IEFTdHJpbmdJKFNjb3BlLlZhbHVlLCAnY29tcGFyaXNvbiB0eXBlJyk7XHJcbiAgICAgICAgY29uc3QgdmFsMiA9IG5ldyBBTnVtYmVySShTY29wZS5WYWx1ZSwgJ3ZhbDInKTtcclxuICAgICAgICB2YWwxLnZhbHVlID0gMDtcclxuICAgICAgICB0eXBlLnZhbHVlID0gJz0nO1xyXG4gICAgICAgIHZhbDIudmFsdWUgPSAwO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFBhcmFtZXRlcnMgPSBbdmFsMSwgdHlwZSwgdmFsMl07XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5wdXNoKEFTSGFuZGxlci5Db3B5KHZhbDEpKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnB1c2goQVNIYW5kbGVyLkNvcHkodHlwZSkpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMucHVzaChBU0hhbmRsZXIuQ29weSh2YWwyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQUNvbXBhcmVFSSBleHRlbmRzIEFGRUkge1xyXG4gICAgaW5zdGFuY2U6IEFDb21wYXJlSTtcclxuICAgIG92ZXJyaWRlIERpc3BsYXlCbG9jaygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRpdi5lbXB0eSgpO1xyXG4gICAgICAgIGNvbnN0IGRpdiA9IHRoaXMuZGl2O1xyXG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSAnZ2VvZDMtc2NyaXB0LWJsb2NrIGhib3gnO1xyXG4gICAgICAgIGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBDRU5UUkFMX0NPTE9SXzE7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuICAgICAgICBkaXYuc3R5bGUuYm9yZGVyQ29sb3IgPSBBQ0NFTlRfQ09MT1JfMztcclxuXHJcbiAgICAgICAgY29uc3QgdmFsMURpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuICAgICAgICBjb25zdCB0eXBlU2VsZWN0ID0gZGl2LmNyZWF0ZUVsKCdzZWxlY3QnKTtcclxuICAgICAgICBjb25zdCB2YWwyRGl2ID0gZGl2LmNyZWF0ZURpdigpO1xyXG5cclxuICAgICAgICB0aGlzLkNyZWF0ZUFTSU9yQUZJUGFyYW1ldGVyRGl2KDAsIHZhbDFEaXYsIENFTlRSQUxfQ09MT1JfMyk7XHJcbiAgICAgICAgdGhpcy5DcmVhdGVBU0lPckFGSVBhcmFtZXRlckRpdigyLCB2YWwyRGl2LCBDRU5UUkFMX0NPTE9SXzMpO1xyXG5cclxuICAgICAgICB0eXBlU2VsZWN0LmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6ICc9JywgdmFsdWU6ICc9JyB9ICk7XHJcbiAgICAgICAgdHlwZVNlbGVjdC5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiAnIT0nLCB2YWx1ZTogJyE9JyB9ICk7XHJcbiAgICAgICAgdHlwZVNlbGVjdC5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiAnPCcsIHZhbHVlOiAnPCcgfSApO1xyXG4gICAgICAgIHR5cGVTZWxlY3QuY3JlYXRlRWwoJ29wdGlvbicsIHsgdGV4dDogJz4nLCB2YWx1ZTogJz4nIH0gKTtcclxuICAgICAgICB0eXBlU2VsZWN0LmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6ICc8PScsIHZhbHVlOiAnPD0nIH0gKTtcclxuICAgICAgICB0eXBlU2VsZWN0LmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6ICc+PScsIHZhbHVlOiAnPj0nIH0gKTtcclxuXHJcbiAgICAgICAgdHlwZVNlbGVjdC52YWx1ZSA9ICg8QVNJPiB0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnNbMV0pLnZhbHVlO1xyXG4gICAgICAgIEFGRUkuQWRqdXN0SW5wdXRXaWR0aCh0eXBlU2VsZWN0LCBkaXYpO1xyXG5cclxuICAgICAgICB0eXBlU2VsZWN0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAoPEFTST4gdGhpcy5pbnN0YW5jZS5wYXJhbWV0ZXJzWzFdKS52YWx1ZSA9IHR5cGVTZWxlY3QudmFsdWU7XHJcbiAgICAgICAgICAgIEFGRUkuQWRqdXN0SW5wdXRXaWR0aCh0eXBlU2VsZWN0LCBkaXYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHlwZVNlbGVjdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBDRU5UUkFMX0NPTE9SXzM7XHJcbiAgICAgICAgdHlwZVNlbGVjdC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnMCc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBQ29tcGFyZVJJIGV4dGVuZHMgQUZSSSB7XHJcbiAgICBhc3luYyBFeGVjdXRlKCk6IFByb21pc2U8QUJvb2xlYW5JPiB7XHJcbiAgICAgICAgY29uc3QgcGFyYW0xID0gdGhpcy5wYXJhbWV0ZXJzWzBdO1xyXG4gICAgICAgIGNvbnN0IHBhcmFtMiA9IDxBU0k+IHRoaXMucGFyYW1ldGVyc1sxXTtcclxuICAgICAgICBjb25zdCBwYXJhbTMgPSB0aGlzLnBhcmFtZXRlcnNbMl07XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmFtMUlzQUZSSSA9IHBhcmFtMSBpbnN0YW5jZW9mIEFGUkk7XHJcbiAgICAgICAgY29uc3QgcGFyYW0zSXNBRlJJID0gcGFyYW0zIGluc3RhbmNlb2YgQUZSSTtcclxuXHJcbiAgICAgICAgY29uc3QgdmFsMSA9IHBhcmFtMUlzQUZSSSA/IChhd2FpdCBwYXJhbTEuRXhlY3V0ZSgpKS52YWx1ZSA6IHBhcmFtMS52YWx1ZTtcclxuICAgICAgICBjb25zdCB2YWwyID0gcGFyYW0zSXNBRlJJID8gKGF3YWl0IHBhcmFtMy5FeGVjdXRlKCkpLnZhbHVlIDogcGFyYW0zLnZhbHVlO1xyXG5cclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgQUJvb2xlYW5JKFNjb3BlLlZhbHVlLCAnb3V0cHV0Jyk7XHJcbiAgICAgICAgc3dpdGNoKHBhcmFtMi52YWx1ZSkge1xyXG4gICAgICAgICAgICBjYXNlICc9JzpcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIG91dHB1dC52YWx1ZSA9IHZhbDEgPT09IHZhbDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnIT0nOlxyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnZhbHVlID0gdmFsMSAhPT0gdmFsMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICc8JzpcclxuICAgICAgICAgICAgICAgIG91dHB1dC52YWx1ZSA9IHZhbDEgPCB2YWwyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJz4nOlxyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnZhbHVlID0gdmFsMSA+IHZhbDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnPD0nOlxyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnZhbHVlID0gdmFsMSA8PSB2YWwyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJz49JzpcclxuICAgICAgICAgICAgICAgIG91dHB1dC52YWx1ZSA9IHZhbDEgPj0gdmFsMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH1cclxufVxyXG4vLyNlbmRyZWdpb24gQ29tcGFyZVxyXG5cclxuLy8jcmVnaW9uIEtleWRvd25cclxuZXhwb3J0IGNsYXNzIEFLZXlkb3duSSBleHRlbmRzIEFGSSB7XHJcbiAgICB0eXBlID0gQUYua2V5ZG93bjtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IChBU0kgfCBBRkkpW10gfCB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdXBlcigpXHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmV3IEFTdHJpbmdJKFNjb3BlLlZhbHVlLCAna2V5Jyk7XHJcbiAgICAgICAga2V5LnZhbHVlID0gJ0FueSc7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0UGFyYW1ldGVycyA9IFtrZXldO1xyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMucHVzaChBU0hhbmRsZXIuQ29weShrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMga2V5bGlzdCA9IFtcclxuICAgICAgICAnQW55JyxcclxuICAgICAgICAnU3BhY2UnLFxyXG4gICAgICAgICdVcCBBcnJvdycsXHJcbiAgICAgICAgJ0Rvd24gQXJyb3cnLFxyXG4gICAgICAgICdMZWZ0IEFycm93JyxcclxuICAgICAgICAnUmlnaHQgQXJyb3cnLFxyXG4gICAgICAgICdBJyxcclxuICAgICAgICAnQicsXHJcbiAgICAgICAgJ0MnLFxyXG4gICAgICAgICdEJyxcclxuICAgICAgICAnRScsXHJcbiAgICAgICAgJ0YnLFxyXG4gICAgICAgICdHJyxcclxuICAgICAgICAnSCcsXHJcbiAgICAgICAgJ0knLFxyXG4gICAgICAgICdKJyxcclxuICAgICAgICAnSycsXHJcbiAgICAgICAgJ0wnLFxyXG4gICAgICAgICdNJyxcclxuICAgICAgICAnTicsXHJcbiAgICAgICAgJ08nLFxyXG4gICAgICAgICdQJyxcclxuICAgICAgICAnUScsXHJcbiAgICAgICAgJ1InLFxyXG4gICAgICAgICdTJyxcclxuICAgICAgICAnVCcsXHJcbiAgICAgICAgJ1UnLFxyXG4gICAgICAgICdWJyxcclxuICAgICAgICAnVycsXHJcbiAgICAgICAgJ1gnLFxyXG4gICAgICAgICdZJyxcclxuICAgICAgICAnWidcclxuICAgIF1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFLZXlkb3duRUkgZXh0ZW5kcyBBRkVJIHtcclxuICAgIGluc3RhbmNlOiBBS2V5ZG93bkk7XHJcbiAgICBvdmVycmlkZSBEaXNwbGF5QmxvY2soKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXYuZW1wdHkoKTtcclxuICAgICAgICBjb25zdCBkaXYgPSB0aGlzLmRpdjtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2dlb2QzLXNjcmlwdC1ibG9jayBoYm94JztcclxuICAgICAgICBkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gQ0VOVFJBTF9DT0xPUl8xO1xyXG4gICAgICAgIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJvcmRlckNvbG9yID0gQUNDRU5UX0NPTE9SXzM7XHJcblxyXG4gICAgICAgIGNvbnN0IGtleVNlbGVjdCA9IGRpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgZGl2LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6ICdLZXkgRG93bj8nIH0gKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBBS2V5ZG93bkkua2V5bGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyS2V5ID0gQUtleWRvd25JLmtleWxpc3RbaV07XHJcbiAgICAgICAgICAgIGtleVNlbGVjdC5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiBjdXJyS2V5LCB2YWx1ZTogY3VycktleSB9ICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBrZXlTZWxlY3QudmFsdWUgPSAoPEFTST4gdGhpcy5pbnN0YW5jZS5wYXJhbWV0ZXJzWzBdKS52YWx1ZTtcclxuICAgICAgICBBRkVJLkFkanVzdElucHV0V2lkdGgoa2V5U2VsZWN0LCBkaXYpO1xyXG5cclxuICAgICAgICBrZXlTZWxlY3Qub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICg8QVNJPiB0aGlzLmluc3RhbmNlLnBhcmFtZXRlcnNbMF0pLnZhbHVlID0ga2V5U2VsZWN0LnZhbHVlO1xyXG4gICAgICAgICAgICBBRkVJLkFkanVzdElucHV0V2lkdGgoa2V5U2VsZWN0LCBkaXYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAga2V5U2VsZWN0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IENFTlRSQUxfQ09MT1JfMztcclxuICAgICAgICBrZXlTZWxlY3Quc3R5bGUucGFkZGluZ1JpZ2h0ID0gJzAnO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQUtleWRvd25SSSBleHRlbmRzIEFGUkkge1xyXG4gICAgYXN5bmMgRXhlY3V0ZSgpOiBQcm9taXNlPEFCb29sZWFuST4ge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IDxBU0k+IHRoaXMucGFyYW1ldGVyc1swXTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgQUJvb2xlYW5JKFNjb3BlLlZhbHVlLCAnb3V0cHV0Jyk7XHJcbiAgICAgICAgY29uc3QgaXNLZXlEb3duID0gdGhpcy5hbnAucHJvamVjdC5nYW1lVmlldy5wcmVzc2VkS2V5cy5nZXQoa2V5LnZhbHVlKTtcclxuICAgICAgICBvdXRwdXQudmFsdWUgPSBpc0tleURvd24gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogaXNLZXlEb3duO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhpc0tleURvd24pO1xyXG5cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBLZXlkb3duXHJcblxyXG4vLyNyZWdpb24gQWRkXHJcbmV4cG9ydCBjbGFzcyBBQWRkSSBleHRlbmRzIEFGSSB7XHJcbiAgICB0eXBlID0gQUYuYWRkO1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVyczogKEFTSSB8IEFGSSlbXSB8IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN1cGVyKClcclxuICAgICAgICBjb25zdCBudW0xID0gbmV3IEFOdW1iZXJJKFNjb3BlLlZhbHVlLCAnbnVtMScpO1xyXG4gICAgICAgIGNvbnN0IG51bTIgPSBuZXcgQU51bWJlckkoU2NvcGUuVmFsdWUsICdudW0yJyk7XHJcbiAgICAgICAgbnVtMS52YWx1ZSA9IDA7XHJcbiAgICAgICAgbnVtMi52YWx1ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0UGFyYW1ldGVycyA9IFtudW0xLCBudW0yXTtcclxuICAgICAgICBpZiAocGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnB1c2goQVNIYW5kbGVyLkNvcHkobnVtMSkpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMucHVzaChBU0hhbmRsZXIuQ29weShudW0yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQUFkZEVJIGV4dGVuZHMgQUZFSSB7XHJcbiAgICBpbnN0YW5jZTogQUFkZEk7XHJcbiAgICBvdmVycmlkZSBEaXNwbGF5QmxvY2soKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXYuZW1wdHkoKTtcclxuICAgICAgICBjb25zdCBkaXYgPSB0aGlzLmRpdjtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2dlb2QzLXNjcmlwdC1ibG9jayBoYm94JztcclxuICAgICAgICBkaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gQ0VOVFJBTF9DT0xPUl8xO1xyXG4gICAgICAgIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XHJcbiAgICAgICAgZGl2LnN0eWxlLmJvcmRlckNvbG9yID0gQUNDRU5UX0NPTE9SXzM7XHJcblxyXG4gICAgICAgIGNvbnN0IG51bTFEaXYgPSBkaXYuY3JlYXRlRGl2KCk7XHJcbiAgICAgICAgZGl2LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6ICcrJyB9ICk7XHJcbiAgICAgICAgY29uc3QgbnVtMkRpdiA9IGRpdi5jcmVhdGVEaXYoKTtcclxuXHJcbiAgICAgICAgdGhpcy5DcmVhdGVBU0lPckFGSVBhcmFtZXRlckRpdigwLCBudW0xRGl2LCBDRU5UUkFMX0NPTE9SXzMpO1xyXG4gICAgICAgIHRoaXMuQ3JlYXRlQVNJT3JBRklQYXJhbWV0ZXJEaXYoMSwgbnVtMkRpdiwgQ0VOVFJBTF9DT0xPUl8zKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFBZGRSSSBleHRlbmRzIEFGUkkge1xyXG4gICAgYXN5bmMgRXhlY3V0ZSgpOiBQcm9taXNlPEFOdW1iZXJJPiB7XHJcbiAgICAgICAgY29uc3QgcGFyYW0xID0gdGhpcy5wYXJhbWV0ZXJzWzBdO1xyXG4gICAgICAgIGNvbnN0IHBhcmFtMiA9IHRoaXMucGFyYW1ldGVyc1sxXTtcclxuXHJcbiAgICAgICAgY29uc3QgcGFyYW0xSXNBRlJJID0gcGFyYW0xIGluc3RhbmNlb2YgQUZSSTtcclxuICAgICAgICBjb25zdCBwYXJhbTJJc0FGUkkgPSBwYXJhbTIgaW5zdGFuY2VvZiBBRlJJO1xyXG5cclxuICAgICAgICBjb25zdCBudW0xID0gcGFyYW0xSXNBRlJJID8gKGF3YWl0IHBhcmFtMS5FeGVjdXRlKCkpLnZhbHVlIDogcGFyYW0xLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IG51bTIgPSBwYXJhbTJJc0FGUkkgPyAoYXdhaXQgcGFyYW0yLkV4ZWN1dGUoKSkudmFsdWUgOiBwYXJhbTIudmFsdWU7XHJcblxyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IG5ldyBBTnVtYmVySShTY29wZS5WYWx1ZSwgJ3N1bScpO1xyXG4gICAgICAgIG91dHB1dC52YWx1ZSA9IG51bTEgKyBudW0yO1xyXG5cclxuICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgfVxyXG59XHJcbi8vI2VuZHJlZ2lvbiBBZGRcclxuIiwgImltcG9ydCB7IEFLZXlkb3duSSB9IGZyb20gXCJjbGFzc2VzL2Z1bmN0aW9ucy9mdW5jdGlvblwiO1xyXG5pbXBvcnQgeyBHRU9EM09iamVjdEhhbmRsZXIsIEdFT0QzT2JqZWN0UkkgfSBmcm9tIFwiLi9nZW9kMy1vYmplY3RcIjtcclxuaW1wb3J0IHsgVGFiIH0gZnJvbSBcIi4vdGFiXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZVZpZXcgZXh0ZW5kcyBUYWIge1xyXG4gICAgc3RhdGljIG92ZXJyaWRlIGljb24gPSAnXHUyNUI2XHVGRTBGJztcclxuICAgIGdhbWVEaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgc3RpbGxSdW5uaW5nOiBib29sZWFuO1xyXG4gICAgb2JqZWN0czogR0VPRDNPYmplY3RSSVtdO1xyXG4gICAgcHJlc3NlZEtleXM6IE1hcDxzdHJpbmcsIGJvb2xlYW4+O1xyXG4gICAgZ2V0IHByZXNzZWRLZXlzQXJyYXkoKTogW3N0cmluZywgYm9vbGVhbl1bXSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcmVzc2VkS2V5cy5lbnRyaWVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIGFzeW5jIEZvY3VzKGRpdjogSFRNTERpdkVsZW1lbnQpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBkaXYuZW1wdHkoKTtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2dlb2QzLWdhbWUtdmlldy1tYWluLWRpdiBnZW9kMy10YWItY29udGFpbmVyJztcclxuICAgICAgICBjb25zdCBnYW1lV3JhcHBlciA9IGRpdi5jcmVhdGVEaXYoJ2dlb2QzLWdhbWUtd3JhcHBlcicpO1xyXG4gICAgICAgIHRoaXMuZ2FtZURpdiA9IGdhbWVXcmFwcGVyLmNyZWF0ZURpdignZ2VvZDMtZ2FtZScpO1xyXG4gICAgICAgIHRoaXMuc3RpbGxSdW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm9iamVjdHMgPSBbXTtcclxuICAgICAgICB0aGlzLnByZXNzZWRLZXlzID0gbmV3IE1hcCgpO1xyXG5cclxuICAgICAgICB0aGlzLkxpc3RlbkZvcktleVByZXNzZXMoKTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5PblN0YXJ0KCk7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuc3RpbGxSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuT25OZXdGcmFtZSgpO1xyXG4gICAgICAgICAgICBhd2FpdCBzbGVlcCgxNSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb3ZlcnJpZGUgVW5Gb2N1cyhkaXY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB8IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGRpdi5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuc3RpbGxSdW5uaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBMaXN0ZW5Gb3JLZXlQcmVzc2VzKCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZURpdi50YWJJbmRleCA9IC0xO1xyXG4gICAgICAgIHRoaXMuZ2FtZURpdi5mb2N1cygpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEFLZXlkb3duSS5rZXlsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJLZXkgPSBBS2V5ZG93bkkua2V5bGlzdFtpXTtcclxuICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoY3VycktleSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nYW1lRGl2Lm9ua2V5ZG93biA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudC5rZXkpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnQW55JywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnU3BhY2UnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnVXAgQXJyb3cnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdEb3duIEFycm93JywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnTGVmdCBBcnJvdycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdSaWdodCBBcnJvdycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0EnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdCJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdCJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnQycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0QnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdFJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2UnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdFJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnRic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdmJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnRicsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0cnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0cnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdIJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdIJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnSSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdpJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnSScsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0onOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0onLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdLJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2snOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdLJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnTCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ00nLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdOJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ24nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdOJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdvJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnTycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1AnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ1AnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdRJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnUicsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ1MnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdUJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdUJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnVScsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1YnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAndic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ1YnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdXJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd4JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnWCcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1knOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAneSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ1knLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYXNlICdaJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdaJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2FtZURpdi5vbmtleXVwID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnU3BhY2UnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBcnJvd1VwJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnVXAgQXJyb3cnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdEb3duIEFycm93JywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnTGVmdCBBcnJvdycsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdSaWdodCBBcnJvdycsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0EnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdCJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdCJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnQycsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0QnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdFJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2UnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdFJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnRic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdmJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnRicsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0cnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0cnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdIJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdIJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnSSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdpJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnSScsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0onOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0onLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdLJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2snOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdLJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnTCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ00nLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdOJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ24nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdOJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTyc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdvJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnTycsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1AnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ1AnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdRJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnUicsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ1MnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdUJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdUJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVSc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnVScsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1YnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAndic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ1YnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdXJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd4JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzLnNldCgnWCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1knOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAneSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ1knLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdaJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXMuc2V0KCdaJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXNzZWRLZXlzQXJyYXkgPSB0aGlzLnByZXNzZWRLZXlzQXJyYXk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJlc3NlZEtleXNBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXNzZWRLZXlzQXJyYXlbaV1bMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wcmVzc2VkS2V5cy5zZXQoJ0FueScsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBPblN0YXJ0KCkge1xyXG4gICAgICAgIGNvbnN0IG9iakluc3RhbmNlcyA9IHRoaXMuYW5wLnByb2plY3Quc2NlbmVWaWV3Lm9iamVjdHM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmpJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RzLnB1c2goR0VPRDNPYmplY3RIYW5kbGVyLkNyZWF0ZVJJKG9iakluc3RhbmNlc1tpXSwgdGhpcy5hbnAsIHRoaXMuZ2FtZURpdi5jcmVhdGVEaXYoKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JqZWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLm9iamVjdHNbaV0uT25TdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIE9uTmV3RnJhbWUoKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lRGl2LmZvY3VzKCk7XHJcbiAgICAgICAgY29uc3QgcmVuZGVyaW5nT3JkZXI6IEdFT0QzT2JqZWN0UklbXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYmplY3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJPYmogPSB0aGlzLm9iamVjdHNbaV07XHJcbiAgICAgICAgICAgIGN1cnJPYmouUmVuZGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuUGxhY2VJbnRvU3ByaXRlQXJyYXkocmVuZGVyaW5nT3JkZXIsIGN1cnJPYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcmluZ09yZGVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJTcHJpdGUgPSByZW5kZXJpbmdPcmRlcltpXTtcclxuICAgICAgICAgICAgY3VyclNwcml0ZS5vYmpEaXYuc3R5bGUuekluZGV4ID0gaSArICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JqZWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLm9iamVjdHNbaV0uT25OZXdGcmFtZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIFBsYWNlSW50b1Nwcml0ZUFycmF5KGFycjogR0VPRDNPYmplY3RSSVtdLCBuZXdJdGVtOiBHRU9EM09iamVjdFJJKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGxvdyA9IDA7XHJcbiAgICAgICAgbGV0IGhpZ2ggPSBhcnIubGVuZ3RoO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdaID0gR0VPRDNPYmplY3RIYW5kbGVyLkdldFZhcmlhYmxlKG5ld0l0ZW0sICd6Jyk7XHJcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcclxuICAgICAgICAgICAgY29uc3QgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcclxuICAgICAgICAgICAgY29uc3QgbWlkWiA9IEdFT0QzT2JqZWN0SGFuZGxlci5HZXRWYXJpYWJsZShhcnJbbWlkXSwgJ3onKTtcclxuICAgICAgICAgICAgaWYgKG1pZFogPCBuZXdaKSB7XHJcbiAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGlnaCA9IG1pZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXJyLnNwbGljZShsb3csIDAsIG5ld0l0ZW0pO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IG5vcm1hbGl6ZVBhdGggfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgVGFiIH0gZnJvbSBcIi4vdGFiXCI7XHJcbmltcG9ydCB7IEFwcEFuZFByb2plY3QgfSBmcm9tIFwiY2xhc3Nlcy9wcm9qZWN0XCI7XHJcbmltcG9ydCB7IEdFT0QzT2JqZWN0LCBHRU9EM09iamVjdEhhbmRsZXIgfSBmcm9tIFwiLi9nZW9kMy1vYmplY3RcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTY2VuZVZpZXcgZXh0ZW5kcyBUYWIge1xyXG4gICAgc3RhdGljIG92ZXJyaWRlIGljb24gPSAnXHVEODNDXHVERjEwJztcclxuICAgIG9iamVjdHM6IEdFT0QzT2JqZWN0W107XHJcbiAgICBoaWVyYXJjaHlEaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgc2NlbmVEaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgaW5zcGVjdG9yRGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoYW5wOiBBcHBBbmRQcm9qZWN0KSB7XHJcbiAgICAgICAgc3VwZXIoYW5wKTtcclxuICAgICAgICB0aGlzLm9iamVjdHMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBGb2N1cyhkaXY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgZGl2LmVtcHR5KCk7XHJcblxyXG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSAnZ2VvZDMtdGFiLWNvbnRhaW5lciBoYm94JztcclxuXHJcbiAgICAgICAgdGhpcy5oaWVyYXJjaHlEaXYgPSBkaXYuY3JlYXRlRGl2KCdnZW9kMy1vYmplY3QtbGlzdCB2Ym94Jyk7XHJcbiAgICAgICAgY29uc3Qgc2NlbmVTY3JvbGxXcmFwcGVyID0gZGl2LmNyZWF0ZURpdignZ2VvZDMtc2NlbmUtc2Nyb2xsLXdyYXBwZXInKTtcclxuICAgICAgICBjb25zdCBzY2VuZVdyYXBwZXIgPSBzY2VuZVNjcm9sbFdyYXBwZXIuY3JlYXRlRGl2KCdnZW9kMy1zY2VuZS13cmFwcGVyJyk7XHJcbiAgICAgICAgdGhpcy5zY2VuZURpdiA9IHNjZW5lV3JhcHBlci5jcmVhdGVEaXYoJ2dlb2QzLXNjZW5lJyk7XHJcbiAgICAgICAgdGhpcy5pbnNwZWN0b3JEaXYgPSBkaXYuY3JlYXRlRGl2KCdnZW9kMy1pbnNwZWN0b3IgdmJveCcpO1xyXG5cclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gdGhpcy5oaWVyYXJjaHlEaXYuY3JlYXRlRGl2KCd2Ym94Jyk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYmplY3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9iamVjdERpdiA9IGxpc3REaXYuY3JlYXRlRGl2KCdnZW9kMy1vYmplY3QtaW4tbGlzdCBoYm94IHBvaW50ZXItaG92ZXInKTtcclxuICAgICAgICAgICAgY29uc3QgY3Vyck9iaiA9IHRoaXMub2JqZWN0c1tpXTtcclxuICAgICAgICAgICAgb2JqZWN0RGl2LnRleHRDb250ZW50ID0gY3Vyck9iai5pZEluU2NlbmUgKyAnOiAnICsgY3Vyck9iai5uYW1lO1xyXG4gICAgICAgICAgICBvYmplY3REaXYub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIEdFT0QzT2JqZWN0SGFuZGxlci5DcmVhdGVJSShjdXJyT2JqLCB0aGlzLmFucCwgdGhpcy5pbnNwZWN0b3JEaXYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbnNEaXYgPSB0aGlzLmhpZXJhcmNoeURpdi5jcmVhdGVEaXYoJ2hib3gnKTtcclxuICAgICAgICBjb25zdCByZWZyZXNoQnV0dG9uID0gYnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnXHUyN0YzJyB9ICk7XHJcbiAgICAgICAgY29uc3QgYWRkT2JqQnV0dG9uID0gYnV0dG9uc0Rpdi5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnKycgfSApO1xyXG4gICAgICAgIHJlZnJlc2hCdXR0b24uY2xhc3NOYW1lID0gJ2dlb2QzLXNlY29uZGFyeS1idXR0b24nO1xyXG4gICAgICAgIGFkZE9iakJ1dHRvbi5jbGFzc05hbWUgPSAnZ2VvZDMtYWRkLWJ1dHRvbic7XHJcbiAgICAgICAgcmVmcmVzaEJ1dHRvbi5zdHlsZS53aWR0aCA9ICc1MCUnO1xyXG4gICAgICAgIGFkZE9iakJ1dHRvbi5zdHlsZS53aWR0aCA9ICc1MCUnO1xyXG4gICAgICAgIHJlZnJlc2hCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zY2VuZURpdi5lbXB0eSgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JqZWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3Vyck9iaiA9IEdFT0QzT2JqZWN0SGFuZGxlci5DcmVhdGVSSSh0aGlzLm9iamVjdHNbaV0sIHRoaXMuYW5wLCB0aGlzLnNjZW5lRGl2LmNyZWF0ZURpdigpKTtcclxuICAgICAgICAgICAgICAgIGN1cnJPYmouUmVuZGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkT2JqQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5vYmplY3RzLmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgbmV3T2JqID0gbmV3IEdFT0QzT2JqZWN0KGluZGV4KTtcclxuICAgICAgICAgICAgY29uc3Qgb2JqZWN0RGl2ID0gbGlzdERpdi5jcmVhdGVEaXYoJ2dlb2QzLW9iamVjdC1pbi1saXN0IGhib3ggcG9pbnRlci1ob3ZlcicpO1xyXG4gICAgICAgICAgICBvYmplY3REaXYuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogbmV3T2JqLmlkSW5TY2VuZSArICc6ICcgKyBuZXdPYmoubmFtZSB9ICk7XHJcbiAgICAgICAgICAgIHRoaXMub2JqZWN0cy5wdXNoKG5ld09iaik7XHJcbiAgICAgICAgICAgIG9iamVjdERpdi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgR0VPRDNPYmplY3RIYW5kbGVyLkNyZWF0ZUlJKG5ld09iaiwgdGhpcy5hbnAsIHRoaXMuaW5zcGVjdG9yRGl2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBVbkZvY3VzKGRpdjogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHwgUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgZGl2LmVtcHR5KCk7XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgVGFiIH0gZnJvbSBcIi4vdGFiXCI7XHJcbmltcG9ydCB7IEdFT0QzT2JqZWN0IH0gZnJvbSBcIi4vZ2VvZDMtb2JqZWN0XCI7XHJcbmltcG9ydCB7IEFDaGFpbkksIEFEb05vdGhpbmdJLCBBRiwgQUZFSSwgQUZIYW5kbGVyIH0gZnJvbSBcImNsYXNzZXMvZnVuY3Rpb25zL2Z1bmN0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2NyaXB0RWRpdG9yIGV4dGVuZHMgVGFiIHtcclxuICAgIHN0YXRpYyBvdmVycmlkZSBpY29uID0gJ1x1RDgzRFx1RENEQyc7XHJcbiAgICBzY3JpcHREaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgYmxvY2tzRGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIGRlbERpdjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBjdXJyZW50T2JqZWN0OiBHRU9EM09iamVjdDtcclxuICAgIGN1cnJlbnRseURyYWdnZWRCbG9jazogQUZFSSB8IHVuZGVmaW5lZDtcclxuICAgIGN1cnJlbnRseURyYWdnZWRCbG9ja0lzQ29weTogYm9vbGVhbjtcclxuXHJcbiAgICBvdmVycmlkZSBhc3luYyBGb2N1cyhkaXY6IEhUTUxEaXZFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgZGl2LmVtcHR5KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG9ianMgPSB0aGlzLmFucC5wcm9qZWN0LnNjZW5lVmlldy5vYmplY3RzO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRPYmplY3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAob2Jqcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRPYmplY3QgPSBvYmpzWzBdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGl2LmNyZWF0ZUVsKCdoMScsIHsgdGV4dDogJ0NyZWF0ZSBPYmplY3RzIGluIHRoZSBTY2VuZSBWaWV3IGZpcnN0IScgfSApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2dlb2QzLXRhYi1jb250YWluZXIgaGJveCc7XHJcbiAgICAgICAgY29uc3QgbGVmdFNpZGUgPSBkaXYuY3JlYXRlRGl2KCdnZW9kMy1zY3JpcHQtd3JhcHBlciB2Ym94Jyk7XHJcbiAgICAgICAgY29uc3QgdG9wRGl2ID0gbGVmdFNpZGUuY3JlYXRlRGl2KCdnZW9kMy1zY3JpcHQtbmF2aWdhdG9yIGhib3gnKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb2JqSURJbnB1dCA9IHRvcERpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgY29uc3QgY2x1c3RlclR5cGVJbnB1dCA9IHRvcERpdi5jcmVhdGVFbCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgY29uc3QgY2x1c3Rlck51bWJlcklucHV0ID0gdG9wRGl2LmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ251bWJlcicsIHZhbHVlOiAnMCcgfSApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2Jqcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyT2JqID0gb2Jqc1tpXTtcclxuICAgICAgICAgICAgb2JqSURJbnB1dC5jcmVhdGVFbCgnb3B0aW9uJywgeyB0ZXh0OiBjdXJyT2JqLmlkSW5TY2VuZSArICc6ICcgKyBjdXJyT2JqLm5hbWUsIHZhbHVlOiBpICsgJycgfSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYmpJRElucHV0LnZhbHVlID0gdGhpcy5jdXJyZW50T2JqZWN0LmlkSW5TY2VuZSArICcnO1xyXG5cclxuICAgICAgICBjbHVzdGVyVHlwZUlucHV0LmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6ICdPbiBTdGFydCcsIHZhbHVlOiAnT24gU3RhcnQnIH0gKTtcclxuICAgICAgICBjbHVzdGVyVHlwZUlucHV0LmNyZWF0ZUVsKCdvcHRpb24nLCB7IHRleHQ6ICdPbiBOZXcgRnJhbWUnLCB2YWx1ZTogJ09uIE5ldyBGcmFtZScgfSApO1xyXG4gICAgICAgIGNsdXN0ZXJUeXBlSW5wdXQudmFsdWUgPSAnT24gU3RhcnQnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNsdXN0ZXJOdW1iZXJJbnB1dC5taW4gPSAnMCc7XHJcblxyXG4gICAgICAgIHRoaXMuc2NyaXB0RGl2ID0gbGVmdFNpZGUuY3JlYXRlRGl2KCdnZW9kMy1zY3JpcHQnKTtcclxuICAgICAgICBjb25zdCBibG9ja1Bvb2wgPSBkaXYuY3JlYXRlRGl2KCdnZW9kMy1ibG9jay1wb29sJyk7XHJcbiAgICAgICAgdGhpcy5ibG9ja3NEaXYgPSBibG9ja1Bvb2wuY3JlYXRlRGl2KCdnZW9kMy1ibG9ja3MtbGlzdCB2Ym94Jyk7XHJcbiAgICAgICAgdGhpcy5kZWxEaXYgPSBibG9ja1Bvb2wuY3JlYXRlRGl2KCdnZW9kMy1ibG9jay1kZWxldGUtZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IExvYWRTY3JpcHQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NyaXB0RGl2LmVtcHR5KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHRoaXMuY3VycmVudE9iamVjdDtcclxuICAgICAgICAgICAgY29uc3Qgc2NyaXB0VHlwZSA9IGNsdXN0ZXJUeXBlSW5wdXQudmFsdWUgPT09ICdPbiBTdGFydCcgPyBvYmoub25TdGFydCA6IG9iai5vbk5ld0ZyYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGNsdXN0ZXJOdW1iZXJJbnB1dC52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gc2NyaXB0VHlwZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHNjcmlwdFR5cGUucHVzaChuZXcgQUNoYWluSShbbmV3IEFEb05vdGhpbmdJKCldKSk7XHJcbiAgICAgICAgICAgICAgICBjbHVzdGVyTnVtYmVySW5wdXQubWF4ID0gc2NyaXB0VHlwZS5sZW5ndGggKyAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBBRkhhbmRsZXIuQ3JlYXRlRUkoc2NyaXB0VHlwZVtpbmRleF0sIHRoaXMuc2NyaXB0RGl2LmNyZWF0ZURpdigpLCB0aGlzLmFucCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuQ3JlYXRlQmxvY2tQb29sKCk7XHJcbiAgICAgICAgTG9hZFNjcmlwdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG9iaklESW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE9iamVjdCA9IG9ianNbcGFyc2VJbnQob2JqSURJbnB1dC52YWx1ZSldO1xyXG4gICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLmN1cnJlbnRPYmplY3Q7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdFR5cGUgPSBjbHVzdGVyVHlwZUlucHV0LnZhbHVlID09PSAnT24gU3RhcnQnID8gb2JqLm9uU3RhcnQgOiBvYmoub25OZXdGcmFtZTtcclxuICAgICAgICAgICAgY2x1c3Rlck51bWJlcklucHV0LnZhbHVlID0gJzAnO1xyXG4gICAgICAgICAgICBjbHVzdGVyTnVtYmVySW5wdXQubWF4ID0gc2NyaXB0VHlwZS5sZW5ndGggKyAnJztcclxuICAgICAgICAgICAgTG9hZFNjcmlwdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbHVzdGVyVHlwZUlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLmN1cnJlbnRPYmplY3Q7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdFR5cGUgPSBjbHVzdGVyVHlwZUlucHV0LnZhbHVlID09PSAnT24gU3RhcnQnID8gb2JqLm9uU3RhcnQgOiBvYmoub25OZXdGcmFtZTtcclxuICAgICAgICAgICAgY2x1c3Rlck51bWJlcklucHV0LnZhbHVlID0gJzAnO1xyXG4gICAgICAgICAgICBjbHVzdGVyTnVtYmVySW5wdXQubWF4ID0gc2NyaXB0VHlwZS5sZW5ndGggKyAnJztcclxuICAgICAgICAgICAgTG9hZFNjcmlwdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbHVzdGVyTnVtYmVySW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIExvYWRTY3JpcHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBDcmVhdGVCbG9ja1Bvb2woKSB7XHJcbiAgICAgICAgdGhpcy5ibG9ja3NEaXYuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kZWxEaXYuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCAoZXZlbnQ6IERyYWdFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwiY29weVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGVsRGl2LmNsYXNzTmFtZSA9ICdnZW9kMy1ibG9jay1kZWxldGUtZGl2LWhvdmVyJztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5kZWxEaXYuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdsZWF2ZVwiLCAoZXZlbnQ6IERyYWdFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5kZWxEaXYuY2xhc3NOYW1lID0gJ2dlb2QzLWJsb2NrLWRlbGV0ZS1kaXYnO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRlbERpdi5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgKGV2ZW50OiBEcmFnRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCEodGhpcy5jdXJyZW50bHlEcmFnZ2VkQmxvY2sgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmN1cnJlbnRseURyYWdnZWRCbG9ja0lzQ29weSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudGx5RHJhZ2dlZEJsb2NrLmRpdi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEVJID0gdGhpcy5jdXJyZW50bHlEcmFnZ2VkQmxvY2sucGFyZW50RUk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50RUkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudEVJLlJlbW92ZVBhcmFtZXRlcih0aGlzLmN1cnJlbnRseURyYWdnZWRCbG9jay5pbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50RUkuRGlzcGxheUJsb2NrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBjaGFpbkkgPSBBRkhhbmRsZXIuQ3JlYXRlSShBRi5jaGFpbiwgdW5kZWZpbmVkKTtcclxuICAgICAgICBjb25zdCBnZXRJID0gQUZIYW5kbGVyLkNyZWF0ZUkoQUYuZ2V0LCB1bmRlZmluZWQpO1xyXG4gICAgICAgIGNvbnN0IHNldEkgPSBBRkhhbmRsZXIuQ3JlYXRlSShBRi5zZXQsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3QgaWZJID0gQUZIYW5kbGVyLkNyZWF0ZUkoQUYuaWYsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3QgaWZFbHNlSSA9IEFGSGFuZGxlci5DcmVhdGVJKEFGLmlmZWxzZSwgdW5kZWZpbmVkKTtcclxuICAgICAgICBjb25zdCBjb21wYXJlSSA9IEFGSGFuZGxlci5DcmVhdGVJKEFGLmNvbXBhcmUsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3Qga2V5ZG93bkkgPSBBRkhhbmRsZXIuQ3JlYXRlSShBRi5rZXlkb3duLCB1bmRlZmluZWQpO1xyXG4gICAgICAgIGNvbnN0IGFkZEkgPSBBRkhhbmRsZXIuQ3JlYXRlSShBRi5hZGQsIHVuZGVmaW5lZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNoYWluQmxvY2sgPSBBRkhhbmRsZXIuQ3JlYXRlRUkoY2hhaW5JLCB0aGlzLmJsb2Nrc0Rpdi5jcmVhdGVEaXYoJ2dlb2QzLXNjcmlwdC1ibG9jaycpLCB0aGlzLmFucCk7XHJcbiAgICAgICAgY29uc3QgZ2V0QmxvY2sgPSBBRkhhbmRsZXIuQ3JlYXRlRUkoZ2V0SSwgdGhpcy5ibG9ja3NEaXYuY3JlYXRlRGl2KCdnZW9kMy1zY3JpcHQtYmxvY2snKSwgdGhpcy5hbnApO1xyXG4gICAgICAgIGNvbnN0IHNldEJsb2NrID0gQUZIYW5kbGVyLkNyZWF0ZUVJKHNldEksIHRoaXMuYmxvY2tzRGl2LmNyZWF0ZURpdignZ2VvZDMtc2NyaXB0LWJsb2NrJyksIHRoaXMuYW5wKTtcclxuICAgICAgICBjb25zdCBpZkJsb2NrID0gQUZIYW5kbGVyLkNyZWF0ZUVJKGlmSSwgdGhpcy5ibG9ja3NEaXYuY3JlYXRlRGl2KCdnZW9kMy1zY3JpcHQtYmxvY2snKSwgdGhpcy5hbnApO1xyXG4gICAgICAgIGNvbnN0IGlmRWxzZUJsb2NrID0gQUZIYW5kbGVyLkNyZWF0ZUVJKGlmRWxzZUksIHRoaXMuYmxvY2tzRGl2LmNyZWF0ZURpdignZ2VvZDMtc2NyaXB0LWJsb2NrJyksIHRoaXMuYW5wKTtcclxuICAgICAgICBjb25zdCBjb21wYXJlQmxvY2sgPSBBRkhhbmRsZXIuQ3JlYXRlRUkoY29tcGFyZUksIHRoaXMuYmxvY2tzRGl2LmNyZWF0ZURpdignZ2VvZDMtc2NyaXB0LWJsb2NrJyksIHRoaXMuYW5wKTtcclxuICAgICAgICBjb25zdCBrZXlkb3duQmxvY2sgPSBBRkhhbmRsZXIuQ3JlYXRlRUkoa2V5ZG93bkksIHRoaXMuYmxvY2tzRGl2LmNyZWF0ZURpdignZ2VvZDMtc2NyaXB0LWJsb2NrJyksIHRoaXMuYW5wKTtcclxuICAgICAgICBjb25zdCBhZGRCbG9jayA9IEFGSGFuZGxlci5DcmVhdGVFSShhZGRJLCB0aGlzLmJsb2Nrc0Rpdi5jcmVhdGVEaXYoJ2dlb2QzLXNjcmlwdC1ibG9jaycpLCB0aGlzLmFucCk7XHJcblxyXG4gICAgICAgIEFGRUkuTWFrZUJsb2NrRHJhZ2dhYmxlKGNoYWluQmxvY2ssIHRoaXMuYW5wLCB0cnVlKTtcclxuICAgICAgICBBRkVJLk1ha2VCbG9ja0RyYWdnYWJsZShnZXRCbG9jaywgdGhpcy5hbnAsIHRydWUpO1xyXG4gICAgICAgIEFGRUkuTWFrZUJsb2NrRHJhZ2dhYmxlKHNldEJsb2NrLCB0aGlzLmFucCwgdHJ1ZSk7XHJcbiAgICAgICAgQUZFSS5NYWtlQmxvY2tEcmFnZ2FibGUoaWZCbG9jaywgdGhpcy5hbnAsIHRydWUpO1xyXG4gICAgICAgIEFGRUkuTWFrZUJsb2NrRHJhZ2dhYmxlKGlmRWxzZUJsb2NrLCB0aGlzLmFucCwgdHJ1ZSk7XHJcbiAgICAgICAgQUZFSS5NYWtlQmxvY2tEcmFnZ2FibGUoY29tcGFyZUJsb2NrLCB0aGlzLmFucCwgdHJ1ZSk7XHJcbiAgICAgICAgQUZFSS5NYWtlQmxvY2tEcmFnZ2FibGUoa2V5ZG93bkJsb2NrLCB0aGlzLmFucCwgdHJ1ZSk7XHJcbiAgICAgICAgQUZFSS5NYWtlQmxvY2tEcmFnZ2FibGUoYWRkQmxvY2ssIHRoaXMuYW5wLCB0cnVlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgb3ZlcnJpZGUgVW5Gb2N1cyhkaXY6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB8IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGRpdi5lbXB0eSgpO1xyXG4gICAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDQUEsSUFBQUEsbUJBQXVEOzs7QUNBdkQsSUFBQUMsbUJBQW1DOzs7QUNBbkMsSUFBQUMsbUJBQStCOzs7QUNFeEIsSUFBZSxNQUFmLE1BQW1CO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNdEIsWUFBWSxLQUFvQjtBQUM1QixTQUFLLE1BQU07QUFBQSxFQUNmO0FBZUo7OztBQ3RCQSxzQkFBOEI7QUFFdkIsSUFBZSxZQUFmLE1BQXlCO0FBQUEsRUFFNUIsVUFBVSxTQUF3QztBQUM5QyxXQUFxQixRQUFRLFFBQVEsS0FBSyxVQUFVO0FBQUEsRUFDeEQ7QUFBQSxFQU1BLElBQUksT0FBZTtBQUNmLFVBQU0sWUFBWSxLQUFLLEtBQUssUUFBUSxFQUFFLE1BQU0sR0FBRztBQUMvQyxRQUFJLEtBQUssS0FBSyxRQUFRLE1BQU0sS0FBSztBQUM3QixhQUFPO0FBQUEsSUFDWDtBQUNBLFdBQU8sVUFBVSxVQUFVLFNBQVMsQ0FBQztBQUFBLEVBQ3pDO0FBQUEsRUFJQSxZQUFZLE1BQWMsWUFBb0I7QUFDMUMsU0FBSyxhQUFhO0FBQ2xCLFNBQUssT0FBTztBQUFBLEVBQ2hCO0FBQUEsRUFDQSxNQUFNLGlCQUFpQixLQUFtQztBQUFBLEVBQUM7QUFBQSxFQUMzRCxNQUFNLGlCQUFpQixL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LEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLFFBQ0osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUNELGVBQUssWUFBWSxJQUFJLEtBQUssSUFBSTtBQUM5QjtBQUFBLE1BQ1I7QUFBQSxJQUNKO0FBQ0EsU0FBSyxRQUFRLFVBQVUsQ0FBQyxVQUFVO0FBQzlCLGNBQVEsTUFBTSxLQUFLO0FBQUEsUUFDZixLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksU0FBUyxLQUFLO0FBQ25DO0FBQUEsUUFDSixLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksWUFBWSxLQUFLO0FBQ3RDO0FBQUEsUUFDSixLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksY0FBYyxLQUFLO0FBQ3hDO0FBQUEsUUFDSixLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksY0FBYyxLQUFLO0FBQ3hDO0FBQUEsUUFDSixLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksZUFBZSxLQUFLO0FBQ3pDO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsUUFDSixLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQ0QsZUFBSyxZQUFZLElBQUksS0FBSyxLQUFLO0FBQy9CO0FBQUEsTUFDUjtBQUNBLFlBQU0sbUJBQW1CLEtBQUs7QUFDOUIsZUFBUyxJQUFJLEdBQUcsSUFBSSxpQkFBaUIsUUFBUSxLQUFLO0FBQzlDLFlBQUksaUJBQWlCLENBQUMsRUFBRSxDQUFDLEdBQUc7QUFDeEI7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUNBLFdBQUssWUFBWSxJQUFJLE9BQU8sS0FBSztBQUFBLElBQ3JDO0FBQUEsRUFDSjtBQUFBLEVBRUEsTUFBYyxVQUFVO0FBQ3BCLFVBQU0sZUFBZSxLQUFLLElBQUksUUFBUSxVQUFVO0FBQ2hELGFBQVMsSUFBSSxHQUFHLElBQUksYUFBYSxRQUFRLEtBQUs7QUFDMUMsV0FBSyxRQUFRLEtBQUssbUJBQW1CLFNBQVMsYUFBYSxDQUFDLEdBQUcsS0FBSyxLQUFLLEtBQUssUUFBUSxVQUFVLENBQUMsQ0FBQztBQUFBLElBQ3RHO0FBQ0EsYUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLFFBQVEsUUFBUSxLQUFLO0FBQzFDLFdBQUssUUFBUSxDQUFDLEVBQUUsUUFBUTtBQUFBLElBQzVCO0FBQUEsRUFDSjtBQUFBLEVBRUEsTUFBYyxhQUFhO0FBQ3ZCLFNBQUssUUFBUSxNQUFNO0FBQ25CLFVBQU0saUJBQWtDLENBQUM7QUFDekMsYUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLFFBQVEsUUFBUSxLQUFLO0FBQzFDLFlBQU0sVUFBVSxLQUFLLFFBQVEsQ0FBQztBQUM5QixjQUFRLE9BQU87QUFDZixXQUFLLHFCQUFxQixnQkFBZ0IsT0FBTztBQUFBLElBQ3JEO0FBQ0EsYUFBUyxJQUFJLEdBQUcsSUFBSSxlQUFlLFFBQVEsS0FBSztBQUM1QyxZQUFNLGFBQWEsZUFBZSxDQUFDO0FBQ25DLGlCQUFXLE9BQU8sTUFBTSxTQUFTLElBQUk7QUFBQSxJQUN6QztBQUNBLGFBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLFFBQVEsS0FBSztBQUMxQyxXQUFLLFFBQVEsQ0FBQyxFQUFFLFdBQVc7QUFBQSxJQUMvQjtBQUFBLEVBQ0o7QUFBQSxFQUVRLHFCQUFxQixLQUFzQixTQUE4QjtBQUM3RSxRQUFJLE1BQU07QUFDVixRQUFJLE9BQU8sSUFBSTtBQUVmLFVBQU0sT0FBTyxtQkFBbUIsWUFBWSxTQUFTLEdBQUc7QUFDeEQsV0FBTyxNQUFNLE1BQU07QUFDZixZQUFNLE1BQU0sS0FBSyxPQUFPLE1BQU0sUUFBUSxDQUFDO0FBQ3ZDLFlBQU0sT0FBTyxtQkFBbUIsWUFBWSxJQUFJLEdBQUcsR0FBRyxHQUFHO0FBQ3pELFVBQUksT0FBTyxNQUFNO0FBQ2IsY0FBTSxNQUFNO0FBQUEsTUFDaEIsT0FBTztBQUNILGVBQU87QUFBQSxNQUNYO0FBQUEsSUFDSjtBQUVBLFFBQUksT0FBTyxLQUFLLEdBQUcsT0FBTztBQUFBLEVBQzlCO0FBQ0o7QUF0VmEsU0FDTyxPQUFPOzs7QUNBcEIsSUFBTSxZQUFOLGNBQXdCLElBQUk7QUFBQSxFQU8vQixZQUFZLEtBQW9CO0FBQzVCLFVBQU0sR0FBRztBQUNULFNBQUssVUFBVSxDQUFDO0FBQUEsRUFDcEI7QUFBQSxFQUVTLE1BQU0sS0FBMkI7QUFDdEMsUUFBSSxNQUFNO0FBRVYsUUFBSSxZQUFZO0FBRWhCLFNBQUssZUFBZSxJQUFJLFVBQVUsd0JBQXdCO0FBQzFELFVBQU0scUJBQXFCLElBQUksVUFBVSw0QkFBNEI7QUFDckUsVUFBTSxlQUFlLG1CQUFtQixVQUFVLHFCQUFxQjtBQUN2RSxTQUFLLFdBQVcsYUFBYSxVQUFVLGFBQWE7QUFDcEQsU0FBSyxlQUFlLElBQUksVUFBVSxzQkFBc0I7QUFFeEQsVUFBTSxVQUFVLEtBQUssYUFBYSxVQUFVLE1BQU07QUFFbEQsYUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLFFBQVEsUUFBUSxLQUFLO0FBQzFDLFlBQU0sWUFBWSxRQUFRLFVBQVUseUNBQXlDO0FBQzdFLFlBQU0sVUFBVSxLQUFLLFFBQVEsQ0FBQztBQUM5QixnQkFBVSxjQUFjLFFBQVEsWUFBWSxPQUFPLFFBQVE7QUFDM0QsZ0JBQVUsVUFBVSxNQUFNO0FBQ3RCLDJCQUFtQixTQUFTLFNBQVMsS0FBSyxLQUFLLEtBQUssWUFBWTtBQUFBLE1BQ3BFO0FBQUEsSUFDSjtBQUNBLFVBQU0sYUFBYSxLQUFLLGFBQWEsVUFBVSxNQUFNO0FBQ3JELFVBQU0sZ0JBQWdCLFdBQVcsU0FBUyxVQUFVLEVBQUUsTUFBTSxTQUFJLENBQUU7QUFDbEUsVUFBTSxlQUFlLFdBQVcsU0FBUyxVQUFVLEVBQUUsTUFBTSxJQUFJLENBQUU7QUFDakUsa0JBQWMsWUFBWTtBQUMxQixpQkFBYSxZQUFZO0FBQ3pCLGtCQUFjLE1BQU0sUUFBUTtBQUM1QixpQkFBYSxNQUFNLFFBQVE7QUFDM0Isa0JBQWMsVUFBVSxNQUFNO0FBQzFCLFdBQUssU0FBUyxNQUFNO0FBQ3BCLGVBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLFFBQVEsS0FBSztBQUMxQyxjQUFNLFVBQVUsbUJBQW1CLFNBQVMsS0FBSyxRQUFRLENBQUMsR0FBRyxLQUFLLEtBQUssS0FBSyxTQUFTLFVBQVUsQ0FBQztBQUNoRyxnQkFBUSxPQUFPO0FBQUEsTUFDbkI7QUFBQSxJQUNKO0FBQ0EsaUJBQWEsVUFBVSxNQUFNO0FBQ3pCLFlBQU0sUUFBUSxLQUFLLFFBQVE7QUFDM0IsWUFBTSxTQUFTLElBQUksWUFBWSxLQUFLO0FBQ3BDLFlBQU0sWUFBWSxRQUFRLFVBQVUseUNBQXlDO0FBQzdFLGdCQUFVLFNBQVMsT0FBTyxFQUFFLE1BQU0sT0FBTyxZQUFZLE9BQU8sT0FBTyxLQUFLLENBQUU7QUFDMUUsV0FBSyxRQUFRLEtBQUssTUFBTTtBQUN4QixnQkFBVSxVQUFVLE1BQU07QUFDdEIsMkJBQW1CLFNBQVMsUUFBUSxLQUFLLEtBQUssS0FBSyxZQUFZO0FBQUEsTUFDbkU7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBRVMsUUFBUSxLQUEyQztBQUN4RCxRQUFJLE1BQU07QUFBQSxFQUNkO0FBQ0o7QUE5RGEsVUFDTyxPQUFPOzs7QUNGcEIsSUFBTSxlQUFOLGNBQTJCLElBQUk7QUFBQSxFQVNsQyxNQUFlLE1BQU0sS0FBb0M7QUFDckQsUUFBSSxNQUFNO0FBRVYsVUFBTSxPQUFPLEtBQUssSUFBSSxRQUFRLFVBQVU7QUFDeEMsUUFBSSxLQUFLLGtCQUFrQixRQUFXO0FBQ2xDLFVBQUksS0FBSyxTQUFTLEdBQUc7QUFDakIsYUFBSyxnQkFBZ0IsS0FBSyxDQUFDO0FBQUEsTUFDL0IsT0FBTztBQUNILFlBQUksU0FBUyxNQUFNLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBRTtBQUN2RTtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBRUEsUUFBSSxZQUFZO0FBQ2hCLFVBQU0sV0FBVyxJQUFJLFVBQVUsMkJBQTJCO0FBQzFELFVBQU0sU0FBUyxTQUFTLFVBQVUsNkJBQTZCO0FBRS9ELFVBQU0sYUFBYSxPQUFPLFNBQVMsUUFBUTtBQUMzQyxVQUFNLG1CQUFtQixPQUFPLFNBQVMsUUFBUTtBQUNqRCxVQUFNLHFCQUFxQixPQUFPLFNBQVMsU0FBUyxFQUFFLE1BQU0sVUFBVSxPQUFPLElBQUksQ0FBRTtBQUVuRixhQUFTLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxLQUFLO0FBQ2xDLFlBQU0sVUFBVSxLQUFLLENBQUM7QUFDdEIsaUJBQVcsU0FBUyxVQUFVLEVBQUUsTUFBTSxRQUFRLFlBQVksT0FBTyxRQUFRLE1BQU0sT0FBTyxJQUFJLEdBQUcsQ0FBRTtBQUFBLElBQ25HO0FBQ0EsZUFBVyxRQUFRLEtBQUssY0FBYyxZQUFZO0FBRWxELHFCQUFpQixTQUFTLFVBQVUsRUFBRSxNQUFNLFlBQVksT0FBTyxXQUFXLENBQUU7QUFDNUUscUJBQWlCLFNBQVMsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLE9BQU8sZUFBZSxDQUFFO0FBQ3BGLHFCQUFpQixRQUFRO0FBRXpCLHVCQUFtQixNQUFNO0FBRXpCLFNBQUssWUFBWSxTQUFTLFVBQVUsY0FBYztBQUNsRCxVQUFNLFlBQVksSUFBSSxVQUFVLGtCQUFrQjtBQUNsRCxTQUFLLFlBQVksVUFBVSxVQUFVLHdCQUF3QjtBQUM3RCxTQUFLLFNBQVMsVUFBVSxVQUFVLHdCQUF3QjtBQUUxRCxVQUFNLGFBQWEsTUFBTTtBQUNyQixXQUFLLFVBQVUsTUFBTTtBQUNyQixZQUFNLE1BQU0sS0FBSztBQUNqQixZQUFNLGFBQWEsaUJBQWlCLFVBQVUsYUFBYSxJQUFJLFVBQVUsSUFBSTtBQUM3RSxZQUFNLFFBQVEsU0FBUyxtQkFBbUIsS0FBSztBQUUvQyxVQUFJLFNBQVMsV0FBVyxRQUFRO0FBQzVCLG1CQUFXLEtBQUssSUFBSSxRQUFRLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2hELDJCQUFtQixNQUFNLFdBQVcsU0FBUztBQUFBLE1BQ2pEO0FBQ0EsZ0JBQVUsU0FBUyxXQUFXLEtBQUssR0FBRyxLQUFLLFVBQVUsVUFBVSxHQUFHLEtBQUssR0FBRztBQUFBLElBQzlFO0FBQ0EsU0FBSyxnQkFBZ0I7QUFDckIsZUFBVztBQUVYLGVBQVcsV0FBVyxNQUFNO0FBQ3hCLFdBQUssZ0JBQWdCLEtBQUssU0FBUyxXQUFXLEtBQUssQ0FBQztBQUNwRCxZQUFNLE1BQU0sS0FBSztBQUNqQixZQUFNLGFBQWEsaUJBQWlCLFVBQVUsYUFBYSxJQUFJLFVBQVUsSUFBSTtBQUM3RSx5QkFBbUIsUUFBUTtBQUMzQix5QkFBbUIsTUFBTSxXQUFXLFNBQVM7QUFDN0MsaUJBQVc7QUFBQSxJQUNmO0FBQ0EscUJBQWlCLFdBQVcsTUFBTTtBQUM5QixZQUFNLE1BQU0sS0FBSztBQUNqQixZQUFNLGFBQWEsaUJBQWlCLFVBQVUsYUFBYSxJQUFJLFVBQVUsSUFBSTtBQUM3RSx5QkFBbUIsUUFBUTtBQUMzQix5QkFBbUIsTUFBTSxXQUFXLFNBQVM7QUFDN0MsaUJBQVc7QUFBQSxJQUNmO0FBQ0EsdUJBQW1CLFdBQVcsTUFBTTtBQUNoQyxpQkFBVztBQUFBLElBQ2Y7QUFBQSxFQUNKO0FBQUEsRUFFUSxrQkFBa0I7QUFDdEIsU0FBSyxVQUFVLE1BQU07QUFFckIsU0FBSyxPQUFPLGlCQUFpQixZQUFZLENBQUMsVUFBcUI7QUFDM0QsWUFBTSxlQUFlO0FBQ3JCLFVBQUksTUFBTSxpQkFBaUIsTUFBTTtBQUM3QixjQUFNLGFBQWEsYUFBYTtBQUFBLE1BQ3BDO0FBQ0EsV0FBSyxPQUFPLFlBQVk7QUFBQSxJQUM1QixDQUFDO0FBRUQsU0FBSyxPQUFPLGlCQUFpQixhQUFhLENBQUMsVUFBcUI7QUFDNUQsWUFBTSxnQkFBZ0I7QUFDdEIsV0FBSyxPQUFPLFlBQVk7QUFBQSxJQUM1QixDQUFDO0FBRUQsU0FBSyxPQUFPLGlCQUFpQixRQUFRLENBQUMsVUFBcUI7QUFDdkQsVUFBSSxFQUFFLEtBQUssMEJBQTBCLFVBQWEsS0FBSyw4QkFBOEI7QUFDakYsYUFBSyxzQkFBc0IsSUFBSSxPQUFPO0FBQ3RDLGNBQU0sV0FBVyxLQUFLLHNCQUFzQjtBQUM1QyxZQUFJLGFBQWEsUUFBVztBQUN4QixtQkFBUyxnQkFBZ0IsS0FBSyxzQkFBc0IsUUFBUTtBQUM1RCxtQkFBUyxhQUFhO0FBQUEsUUFDMUI7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBRUQsVUFBTSxTQUFTLFVBQVUsdUJBQWtCLE1BQVM7QUFDcEQsVUFBTSxPQUFPLFVBQVUscUJBQWdCLE1BQVM7QUFDaEQsVUFBTSxPQUFPLFVBQVUscUJBQWdCLE1BQVM7QUFDaEQsVUFBTSxNQUFNLFVBQVUsb0JBQWUsTUFBUztBQUM5QyxVQUFNLFVBQVUsVUFBVSx3QkFBbUIsTUFBUztBQUN0RCxVQUFNLFdBQVcsVUFBVSx5QkFBb0IsTUFBUztBQUN4RCxVQUFNLFdBQVcsVUFBVSx5QkFBb0IsTUFBUztBQUN4RCxVQUFNLE9BQU8sVUFBVSxxQkFBZ0IsTUFBUztBQUVoRCxVQUFNLGFBQWEsVUFBVSxTQUFTLFFBQVEsS0FBSyxVQUFVLFVBQVUsb0JBQW9CLEdBQUcsS0FBSyxHQUFHO0FBQ3RHLFVBQU0sV0FBVyxVQUFVLFNBQVMsTUFBTSxLQUFLLFVBQVUsVUFBVSxvQkFBb0IsR0FBRyxLQUFLLEdBQUc7QUFDbEcsVUFBTSxXQUFXLFVBQVUsU0FBUyxNQUFNLEtBQUssVUFBVSxVQUFVLG9CQUFvQixHQUFHLEtBQUssR0FBRztBQUNsRyxVQUFNLFVBQVUsVUFBVSxTQUFTLEtBQUssS0FBSyxVQUFVLFVBQVUsb0JBQW9CLEdBQUcsS0FBSyxHQUFHO0FBQ2hHLFVBQU0sY0FBYyxVQUFVLFNBQVMsU0FBUyxLQUFLLFVBQVUsVUFBVSxvQkFBb0IsR0FBRyxLQUFLLEdBQUc7QUFDeEcsVUFBTSxlQUFlLFVBQVUsU0FBUyxVQUFVLEtBQUssVUFBVSxVQUFVLG9CQUFvQixHQUFHLEtBQUssR0FBRztBQUMxRyxVQUFNLGVBQWUsVUFBVSxTQUFTLFVBQVUsS0FBSyxVQUFVLFVBQVUsb0JBQW9CLEdBQUcsS0FBSyxHQUFHO0FBQzFHLFVBQU0sV0FBVyxVQUFVLFNBQVMsTUFBTSxLQUFLLFVBQVUsVUFBVSxvQkFBb0IsR0FBRyxLQUFLLEdBQUc7QUFFbEcsU0FBSyxtQkFBbUIsWUFBWSxLQUFLLEtBQUssSUFBSTtBQUNsRCxTQUFLLG1CQUFtQixVQUFVLEtBQUssS0FBSyxJQUFJO0FBQ2hELFNBQUssbUJBQW1CLFVBQVUsS0FBSyxLQUFLLElBQUk7QUFDaEQsU0FBSyxtQkFBbUIsU0FBUyxLQUFLLEtBQUssSUFBSTtBQUMvQyxTQUFLLG1CQUFtQixhQUFhLEtBQUssS0FBSyxJQUFJO0FBQ25ELFNBQUssbUJBQW1CLGNBQWMsS0FBSyxLQUFLLElBQUk7QUFDcEQsU0FBSyxtQkFBbUIsY0FBYyxLQUFLLEtBQUssSUFBSTtBQUNwRCxTQUFLLG1CQUFtQixVQUFVLEtBQUssS0FBSyxJQUFJO0FBQUEsRUFDcEQ7QUFBQSxFQUdTLFFBQVEsS0FBMkM7QUFDeEQsUUFBSSxNQUFNO0FBQUEsRUFDZDtBQUNKO0FBN0lhLGFBQ08sT0FBTzs7O0FaS3BCLElBQU0sVUFBTixNQUFjO0FBQUEsRUFJakIsSUFBSSxjQUFnQztBQUNoQyxXQUEwQixLQUFLLEtBQUssQ0FBQztBQUFBLEVBQ3pDO0FBQUEsRUFFQSxJQUFJLFlBQXVCO0FBQ3ZCLFdBQW1CLEtBQUssS0FBSyxDQUFDO0FBQUEsRUFDbEM7QUFBQSxFQUVBLElBQUksZUFBNkI7QUFDN0IsV0FBc0IsS0FBSyxLQUFLLENBQUM7QUFBQSxFQUNyQztBQUFBLEVBRUEsSUFBSSxXQUFxQjtBQUNyQixXQUFrQixLQUFLLEtBQUssQ0FBQztBQUFBLEVBQ2pDO0FBQUEsRUFFQSxJQUFJLG1CQUEyQjtBQUMzQixXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsSUFBSSxpQkFBeUI7QUFDekIsV0FBTztBQUFBLEVBQ1g7QUFBQSxFQUVBLElBQUksb0JBQTRCO0FBQzVCLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFQSxJQUFJLGdCQUF3QjtBQUN4QixXQUFPO0FBQUEsRUFDWDtBQUFBLEVBT0EsWUFBWSxLQUFVO0FBQ2xCLFNBQUssTUFBTSxJQUFJLGNBQWMsS0FBSyxJQUFJO0FBQ3RDLFNBQUssT0FBTyxDQUFDO0FBQ2IsU0FBSyxLQUFLLEtBQUssSUFBSSxpQkFBaUIsS0FBSyxHQUFHLENBQUM7QUFDN0MsU0FBSyxLQUFLLEtBQUssSUFBSSxVQUFVLEtBQUssR0FBRyxDQUFDO0FBQ3RDLFNBQUssS0FBSyxLQUFLLElBQUksYUFBYSxLQUFLLEdBQUcsQ0FBQztBQUN6QyxTQUFLLEtBQUssS0FBSyxJQUFJLFNBQVMsS0FBSyxHQUFHLENBQUM7QUFDckMsU0FBSyxjQUFjO0FBQUEsRUFDdkI7QUFBQSxFQUVBLE1BQU0sT0FBTztBQUNULFVBQU0sS0FBSyxVQUFVO0FBQ3JCLFVBQU0sS0FBSyxxQkFBcUI7QUFDaEMsVUFBTSxLQUFLLFlBQVk7QUFBQSxFQUMzQjtBQUFBLEVBQ0EsTUFBTSxZQUFZO0FBQ2QsVUFBTSxLQUFLLFlBQVksVUFBVSxLQUFLLEdBQUc7QUFBQSxFQUM3QztBQUFBLEVBQ0EsTUFBTSx1QkFBdUI7QUFDekIsVUFBTSxLQUFLLEtBQUs7QUFDaEIsYUFBUyxJQUFJLEdBQUcsSUFBSSxHQUFHLE1BQU0sUUFBUSxLQUFLO0FBQ3RDLFlBQU0sR0FBRyxNQUFNLENBQUMsRUFBRSxpQkFBaUIsS0FBSyxHQUFHO0FBQUEsSUFDL0M7QUFBQSxFQUNKO0FBQUEsRUFDQSxNQUFNLGNBQWM7QUFDaEIsVUFBTSxLQUFLLEtBQUs7QUFDaEIsVUFBTSxXQUFPLGdDQUFjLEtBQUssSUFBSSxRQUFRLGdCQUFnQiwyQ0FBMkM7QUFDdkcsVUFBTSxRQUFRLEtBQUssSUFBSSxJQUFJLE1BQU0sY0FBYyxJQUFJO0FBQ25ELFFBQUksVUFBVSxNQUFNO0FBQ2hCO0FBQUEsSUFDSjtBQUNBLFVBQU0sT0FBTyxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sV0FBVyxLQUFLO0FBQ3RELFVBQU0sV0FBVyxLQUFLLE1BQU0sSUFBSTtBQUNoQyxPQUFHLFVBQVUsU0FBUztBQUN0QixVQUFNLGVBQWUsQ0FBQyxlQUF5QjtBQUMzQyxZQUFNLFdBQVcsT0FBTyxPQUFPLFVBQVUsUUFBUSxXQUFXLE1BQU0sV0FBVyxVQUFVLEdBQUcsVUFBVTtBQUNwRyxlQUFTLElBQUksR0FBRyxJQUFJLFNBQVMsa0JBQWtCLFFBQVEsS0FBSztBQUN4RCxjQUFNLFdBQVcsV0FBVyxrQkFBa0IsQ0FBQyxFQUFFLFNBQVM7QUFDMUQsWUFBSSxVQUFVO0FBQ1YsZ0JBQU0sY0FBYyxXQUFXLGtCQUFrQixDQUFDO0FBQ2xELG1CQUFTLGtCQUFrQixDQUFDLElBQUksT0FBTyxPQUFPLFVBQVUsUUFBUSxZQUFZLE1BQU0sWUFBWSxPQUFPLFlBQVksSUFBSSxHQUFHLFdBQVc7QUFBQSxRQUN2SSxPQUFPO0FBQ0gsbUJBQVMsa0JBQWtCLENBQUMsSUFBSSxhQUFhLFdBQVcsa0JBQWtCLENBQUMsQ0FBQztBQUFBLFFBQ2hGO0FBQUEsTUFDSjtBQUNBLGVBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxXQUFXLFFBQVEsS0FBSztBQUNqRCxjQUFNLFdBQVcsV0FBVyxXQUFXLENBQUMsRUFBRSxTQUFTO0FBQ25ELFlBQUksVUFBVTtBQUNWLGdCQUFNLGNBQWMsV0FBVyxXQUFXLENBQUM7QUFDM0MsbUJBQVMsV0FBVyxDQUFDLElBQUksT0FBTyxPQUFPLFVBQVUsUUFBUSxZQUFZLE1BQU0sWUFBWSxPQUFPLFlBQVksSUFBSSxHQUFHLFdBQVc7QUFBQSxRQUNoSSxPQUFPO0FBQ0gsbUJBQVMsV0FBVyxDQUFDLElBQUksYUFBYSxXQUFXLFdBQVcsQ0FBQyxDQUFDO0FBQUEsUUFDbEU7QUFBQSxNQUNKO0FBQ0EsYUFBTztBQUFBLElBQ1g7QUFDQSxhQUFTLElBQUksR0FBRyxJQUFJLFNBQVMsUUFBUSxRQUFRLEtBQUs7QUFDOUMsWUFBTSxTQUFTLE9BQU8sT0FBTyxJQUFJLFlBQVksQ0FBQyxHQUFHLFNBQVMsUUFBUSxDQUFDLENBQUM7QUFDcEUsU0FBRyxRQUFRLENBQUMsSUFBSTtBQUNoQixlQUFTLElBQUksR0FBRyxJQUFJLE9BQU8sVUFBVSxRQUFRLEtBQUs7QUFDOUMsY0FBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLEVBQUUsVUFBVSxDQUFDO0FBQzFDLGNBQU0sU0FBUyxPQUFPLE9BQU8sVUFBVSxRQUFRLFNBQVMsTUFBTSxTQUFTLE9BQU8sU0FBUyxJQUFJLEdBQUcsUUFBUTtBQUN0RyxXQUFHLFFBQVEsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxJQUFJO0FBQUEsTUFDakM7QUFDQSxlQUFTLElBQUksR0FBRyxJQUFJLE9BQU8sUUFBUSxRQUFRLEtBQUs7QUFDNUMsY0FBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDO0FBQzFDLGNBQU0sV0FBVyxhQUFhLFVBQVU7QUFDeEMsV0FBRyxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUMsSUFBSTtBQUFBLE1BQy9CO0FBQ0EsZUFBUyxJQUFJLEdBQUcsSUFBSSxPQUFPLFdBQVcsUUFBUSxLQUFLO0FBQy9DLGNBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxFQUFFLFdBQVcsQ0FBQztBQUM3QyxjQUFNLFdBQVcsYUFBYSxVQUFVO0FBQ3hDLFdBQUcsUUFBUSxDQUFDLEVBQUUsV0FBVyxDQUFDLElBQUk7QUFBQSxNQUNsQztBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQUEsRUFFQSxNQUFNLFFBQVEsS0FBcUI7QUFDL0IsUUFBSSxNQUFNO0FBRVYsVUFBTSxTQUFTLElBQUksVUFBVSxvQkFBb0I7QUFDakQsVUFBTSxlQUFlLElBQUksVUFBVSxxQkFBcUI7QUFFeEQsVUFBTSxXQUEwQixDQUFDO0FBRWpDLFVBQU0sV0FBVyxPQUFPLFNBQVMsVUFBVSxFQUFFLE1BQU0saUJBQWlCLEtBQUssQ0FBRTtBQUMzRSxVQUFNLGVBQWUsT0FBTyxTQUFTLFVBQVUsRUFBRSxNQUFNLFVBQVUsS0FBSyxDQUFFO0FBQ3hFLFVBQU0sa0JBQWtCLE9BQU8sU0FBUyxVQUFVLEVBQUUsTUFBTSxhQUFhLEtBQUssQ0FBRTtBQUM5RSxVQUFNLFVBQVUsT0FBTyxTQUFTLFVBQVUsRUFBRSxNQUFNLFNBQVMsS0FBSyxDQUFFO0FBQ2xFLFVBQU0sYUFBYSxPQUFPLFNBQVMsVUFBVSxFQUFFLE1BQU0sZ0JBQVMsQ0FBRTtBQUNoRSxlQUFXLFlBQVk7QUFDdkIsZUFBVyxVQUFVLFlBQVk7QUFDN0IsaUJBQVcsV0FBVztBQUN0QixpQkFBVyxjQUFjO0FBQ3pCLFlBQU0sV0FBTyxnQ0FBYyxLQUFLLElBQUksUUFBUSxnQkFBZ0IsMkNBQTJDO0FBQ3ZHLFlBQU0sT0FBTyxLQUFLLFVBQVUsSUFBSSxTQUFTLEtBQUssSUFBSSxRQUFRLFVBQVUsT0FBTyxDQUFDO0FBQzVFLFlBQU0sS0FBSyxJQUFJLElBQUksTUFBTSxRQUFRLE1BQU0sTUFBTSxJQUFJO0FBQ2pELGlCQUFXLFdBQVc7QUFDdEIsaUJBQVcsY0FBYztBQUFBLElBQzdCO0FBRUEsYUFBUyxZQUFZO0FBQ3JCLGlCQUFhLFlBQVk7QUFDekIsb0JBQWdCLFlBQVk7QUFDNUIsWUFBUSxZQUFZO0FBRXBCLGFBQVMsS0FBSyxRQUFRO0FBQ3RCLGFBQVMsS0FBSyxZQUFZO0FBQzFCLGFBQVMsS0FBSyxlQUFlO0FBQzdCLGFBQVMsS0FBSyxPQUFPO0FBRXJCLGFBQVMsS0FBSyxXQUFXLEVBQUUsWUFBWTtBQUN2QyxTQUFLLEtBQUssS0FBSyxXQUFXLEVBQUUsTUFBTSxZQUFZO0FBRTlDLFVBQU0sY0FBYyxPQUFPLFVBQWtCO0FBQ3pDLGVBQVMsS0FBSyxXQUFXLEVBQUUsWUFBWTtBQUN2QyxZQUFNLEtBQUssS0FBSyxLQUFLLFdBQVcsRUFBRSxRQUFRLFlBQVk7QUFDdEQsV0FBSyxjQUFjO0FBQ25CLGVBQVMsS0FBSyxXQUFXLEVBQUUsWUFBWTtBQUN2QyxXQUFLLEtBQUssS0FBSyxXQUFXLEVBQUUsTUFBTSxZQUFZO0FBQUEsSUFDbEQ7QUFFQSxTQUFLLGNBQWM7QUFFbkIsYUFBUyxVQUFVLE1BQU07QUFDckIsa0JBQVksQ0FBQztBQUFBLElBQ2pCO0FBQ0EsaUJBQWEsVUFBVSxNQUFNO0FBQ3pCLGtCQUFZLENBQUM7QUFBQSxJQUNqQjtBQUNBLG9CQUFnQixVQUFVLE1BQU07QUFDNUIsa0JBQVksQ0FBQztBQUFBLElBQ2pCO0FBQ0EsWUFBUSxVQUFVLE1BQU07QUFDcEIsa0JBQVksQ0FBQztBQUFBLElBQ2pCO0FBQUEsRUFDSjtBQUNKO0FBRU8sSUFBTSxnQkFBTixNQUFvQjtBQUFBLEVBR3ZCLFlBQVksS0FBVSxTQUFrQjtBQUNwQyxTQUFLLE1BQU07QUFDWCxTQUFLLFVBQVU7QUFBQSxFQUNuQjtBQUNKO0FBRU8sSUFBTSxXQUFOLE1BQWU7QUFBQSxFQUVsQixZQUFZLFVBQXlCLENBQUMsR0FBRztBQUNyQyxTQUFLLFVBQVU7QUFBQSxFQUNuQjtBQUNKOzs7QUR6TU8sSUFBTSwwQkFBMEI7QUFLaEMsSUFBTSxZQUFOLGNBQXdCLDBCQUFTO0FBQUEsRUFHcEMsWUFBWSxNQUFxQixhQUFxQjtBQUNsRCxVQUFNLElBQUk7QUFDVixTQUFLLGNBQWM7QUFBQSxFQUN2QjtBQUFBLEVBRUEsY0FBYztBQUNWLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFQSxpQkFBaUI7QUFDYixXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ1gsVUFBTSxTQUFTLEtBQUssWUFBWSxTQUFTLENBQUM7QUFDMUMsV0FBTyxNQUFNO0FBRWIsVUFBTSxVQUFVLE9BQU8sVUFBVSxnQkFBZ0I7QUFDakQsVUFBTSxjQUFjLFFBQVEsVUFBVSxnQkFBZ0I7QUFFdEQsZ0JBQVksV0FBVztBQUN2QixnQkFBWSxNQUFNO0FBRWxCLGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUU7QUFDeEQsVUFBTSxZQUFZLFlBQVksU0FBUyxTQUFTLEVBQUUsTUFBTSxRQUFRLE9BQU8sS0FBSyxZQUFZLENBQUU7QUFDMUYsVUFBTSxlQUFlLFlBQVksU0FBUyxVQUFVLEVBQUUsTUFBTSxPQUFPLENBQUU7QUFFckUsVUFBTSxXQUFXLFlBQVk7QUFDekIsWUFBTSxpQkFBYSxnQ0FBYyxVQUFVLEtBQUs7QUFDaEQsWUFBTSxXQUFXLGFBQWE7QUFDOUIsV0FBSyxVQUFVLElBQUksUUFBUSxLQUFLLEdBQUc7QUFDbkMsV0FBSyxRQUFRLGdCQUFnQjtBQUM3QixVQUFJLENBQUMsTUFBTSxLQUFLLElBQUksTUFBTSxRQUFRLE9BQU8sUUFBUSxHQUFHO0FBQ2hELGNBQU0sU0FBUyxJQUFJLFNBQVM7QUFFNUIsY0FBTSxZQUFZLFNBQVMsTUFBTSxHQUFHO0FBQ3BDLFlBQUksWUFBWTtBQUNoQixpQkFBUyxJQUFJLEdBQUcsQ0FBRSxNQUFNLEtBQUssSUFBSSxNQUFNLFFBQVEsT0FBTyxRQUFRLEtBQU0sSUFBSSxVQUFVLFFBQVEsS0FBSztBQUMzRixnQkFBTSxTQUFTLE1BQU0sVUFBVSxTQUFTO0FBQ3hDLHVCQUFhLFVBQVUsQ0FBQyxLQUFLLFNBQVMsS0FBSztBQUMzQyxjQUFJLFFBQVE7QUFDUixrQkFBTSxLQUFLLElBQUksTUFBTSxPQUFPLFdBQVcsS0FBSyxVQUFVLE1BQU0sQ0FBQztBQUFBLFVBQ2pFLE9BQU87QUFDSCxrQkFBTSxLQUFLLElBQUksTUFBTSxhQUFhLFNBQVM7QUFBQSxVQUMvQztBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBQ0EsWUFBTSxLQUFLLFFBQVEsS0FBSztBQUN4QixZQUFNLEtBQUssUUFBUSxRQUFRLE9BQU87QUFBQSxJQUN0QztBQUNBLGlCQUFhLFVBQVU7QUFDdkIsZ0JBQVksWUFBWSxDQUFDLE1BQU07QUFDM0IsVUFBSSxFQUFFLFFBQVEsU0FBUztBQUNuQixvQkFBWSxLQUFLO0FBQ2pCLG9CQUFZLFlBQVksTUFBTTtBQUFBLFFBQUM7QUFDL0IsaUJBQVM7QUFBQSxNQUNiO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUVBLE1BQU0sVUFBVTtBQUNaLFNBQUssUUFBUSxTQUFTLGVBQWU7QUFBQSxFQUN6QztBQUNKOzs7QUR6RUEsSUFBQUcsbUJBQThFO0FBUzlFLElBQU0sbUJBQWtDO0FBQUEsRUFDdkMsYUFBYTtBQUNkO0FBRUEsSUFBcUIsUUFBckIsY0FBbUMsd0JBQU87QUFBQSxFQUd6QyxNQUFNLFNBQVM7QUFDZCxVQUFNLEtBQUssYUFBYTtBQUV4QixTQUFLO0FBQUEsTUFDSjtBQUFBLE1BQ0EsQ0FBQyxTQUFTLElBQUksVUFBVSxNQUFNLEtBQUssU0FBUyxXQUFXO0FBQUEsSUFDeEQ7QUFFQSxTQUFLLGNBQWMsU0FBUyxjQUFjLE1BQU07QUFDL0MsV0FBSyxhQUFhLHVCQUF1QjtBQUFBLElBQzFDLENBQUM7QUFFRCxTQUFLLFdBQVc7QUFBQSxNQUNmLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsTUFBTTtBQUNmLGFBQUssYUFBYSx1QkFBdUI7QUFBQSxNQUMxQztBQUFBLElBQ0QsQ0FBQztBQUdELFNBQUssY0FBYyxJQUFJLGlCQUFpQixLQUFLLEtBQUssSUFBSSxDQUFDO0FBQUEsRUFDeEQ7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUVYO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ2xDO0FBQUEsRUFFQSxhQUFhLFdBQW1CO0FBQy9CLFFBQUksT0FBNkI7QUFFakMsV0FBTyxLQUFLLElBQUksVUFBVSxRQUFRLEtBQUs7QUFDdkMsUUFBSSxTQUFTLE1BQU07QUFDbEIsVUFBSSx3QkFBTyxnREFBZ0Q7QUFDM0Q7QUFBQSxJQUNEO0FBQ0EsU0FBSyxhQUFhLEVBQUUsTUFBTSxXQUFXLFFBQVEsS0FBSyxDQUFDO0FBQUEsRUFDcEQ7QUFDRDtBQUVBLElBQU0sbUJBQU4sY0FBK0Isa0NBQWlCO0FBQUEsRUFHL0MsWUFBWSxLQUFVLFFBQWU7QUFDcEMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDZjtBQUFBLEVBRUEsVUFBZ0I7QUFDZixVQUFNLEVBQUMsWUFBVyxJQUFJO0FBRXRCLGdCQUFZLE1BQU07QUFFbEIsUUFBSSx5QkFBUSxXQUFXLEVBQ3JCLFFBQVEscUJBQXFCLEVBQzdCLFFBQVEsNkRBQTZELEVBQ3JFLFFBQVEsVUFBUSxLQUNmLGVBQWUscUJBQXFCLEVBQ3BDLFNBQVMsS0FBSyxPQUFPLFNBQVMsV0FBVyxFQUN6QyxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxjQUFjO0FBQ25DLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFBQSxFQUNMO0FBQ0Q7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJBUyIsICJBRkkiLCAiQUZSSSIsICJhZGRCdXR0b24iLCAib2JqQXJyIiwgImltcG9ydF9vYnNpZGlhbiJdCn0K
