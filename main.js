/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GEOD3
});
module.exports = __toCommonJS(main_exports);

// classes/geod3-view.ts
var import_obsidian5 = require("obsidian");

// classes/project.ts
var import_obsidian4 = require("obsidian");

// classes/tabs/file-manager.ts
var import_obsidian3 = require("obsidian");

// classes/tabs/tab.ts
var Tab = class {
  /**
   * @param anp a reference to the obsidian app to read and write files as well as the geod3 project this tab should look at
   */
  constructor(anp) {
    this.anp = anp;
  }
};

// classes/tabs/file-types/geod3-file.ts
var import_obsidian = require("obsidian");
var GEOD3File = class {
  getParent(manager) {
    return manager.GetFile(this.parentPath);
  }
  get name() {
    const pathParts = this.path.valueOf().split("/");
    if (this.path.valueOf() === "/") {
      return "root";
    }
    return pathParts[pathParts.length - 1];
  }
  constructor(path, parentPath) {
    this.parentPath = parentPath;
    this.path = path;
  }
  async GrabDependencies(anp) {
  }
  async DisplayThumbnail(anp, thumbnailDiv) {
    const manager = anp.project.fileManager;
    thumbnailDiv.empty();
    thumbnailDiv.onclick = async () => {
      this.getParent(manager).SelectFile(anp, this, thumbnailDiv);
    };
    thumbnailDiv.createEl("div", { text: this.name });
    thumbnailDiv.createEl("div", { text: "Type: " + this.type });
  }
  async Open(anp) {
    const manager = anp.project.fileManager;
    manager.fileDiv.empty();
    manager.fileDiv.className = "vbox";
    const backButton = manager.fileDiv.createEl("button", { text: "Go back to " + this.getParent(manager).name });
    backButton.onclick = async () => {
      this.getParent(manager).Open(anp);
    };
  }
  async DisplayProperties(anp, thumbnailDiv) {
    const manager = anp.project.fileManager;
    manager.propertiesDiv.empty();
    const nameInput = manager.propertiesDiv.createEl("input", { type: "text", value: this.name });
    manager.propertiesDiv.createEl("div", { text: "Type: " + this.type });
    const vault = anp.app.vault;
    const project = anp.project;
    nameInput.onchange = async () => {
      const originalPath = this.path;
      const tFile = vault.getFileByPath(project.pathToProject + originalPath + ".md");
      const currName = this.name;
      const newPath = this.path.slice(0, -currName.length) + nameInput.value;
      if (tFile !== null) {
        vault.rename(tFile, project.pathToProject + newPath + ".md");
      }
      this.path = newPath;
      this.DisplayThumbnail(anp, thumbnailDiv);
    };
  }
  async Save(anp) {
    const path = (0, import_obsidian.normalizePath)(anp.project.pathToProject + this.path + ".md");
    anp.app.vault.adapter.write(path, JSON.stringify(this.data));
  }
};

// classes/tabs/file-types/geod3-folder.ts
var GEOD3Folder = class extends GEOD3File {
  constructor(path, parentPath) {
    super(path, parentPath);
    this.type = "\u{1F4C1}Folder";
    this.files = [];
  }
  get data() {
    return this.files;
  }
  async Open(anp) {
    const manager = anp.project.fileManager;
    super.Open(anp);
    const vault = anp.app.vault;
    const project = anp.project;
    const createDiv = manager.fileDiv.createDiv("hbox");
    const typeDropdown = createDiv.createEl("select");
    for (let i = 0; i < GEOD3FileManager.KNOWN_FILE_TYPES.length; i++) {
      const currType = GEOD3FileManager.KNOWN_FILE_TYPES[i];
      typeDropdown.createEl("option", { text: currType, value: currType });
    }
    typeDropdown.value = GEOD3FileManager.KNOWN_FILE_TYPES[0];
    const nameInput = createDiv.createEl("input", { type: "text", value: "Unnamed" });
    const addButton = createDiv.createEl("button", { text: "+" });
    addButton.onclick = async () => {
      const newRelPath = this.path + (this.path.valueOf() === "/" ? "" : "/") + nameInput.value;
      const newPath = project.pathToProject + newRelPath;
      const newGEOD3File = GEOD3FileManager.CreateFileOfType(newRelPath, this.path, typeDropdown.value);
      if (typeDropdown.value === "\u{1F4C1}Folder") {
        vault.createFolder(newPath);
      } else {
        vault.create(newPath + ".md", JSON.stringify(newGEOD3File));
      }
      manager.files.push(newGEOD3File);
      this.files.push(newGEOD3File);
      this.Open(anp);
    };
    this.selectedThumbnail = void 0;
    const folderDiv = manager.fileDiv.createDiv("geod3-folder");
    for (let i = 0; i < this.files.length; i++) {
      this.files[i].DisplayThumbnail(anp, folderDiv.createDiv("geod3-file-thumbnail pointer-hover"));
    }
  }
  SelectFile(anp, newSelectedFile, thumbnailDiv) {
    if (this.selectedThumbnail !== void 0 && this.selectedThumbnail[0] === newSelectedFile && this.selectedThumbnail[1] === thumbnailDiv) {
      this.selectedThumbnail[0].Open(anp);
    } else {
      if (this.selectedThumbnail !== void 0) {
        this.selectedThumbnail[1].className = "geod3-file-thumbnail pointer-hover";
      }
      this.selectedThumbnail = [newSelectedFile, thumbnailDiv];
      this.selectedThumbnail[1].className = "geod3-file-thumbnail selected pointer-hover";
      this.selectedThumbnail[0].DisplayProperties(anp, thumbnailDiv);
    }
  }
  async DisplayProperties(anp, thumbnailDiv) {
    const manager = anp.project.fileManager;
    manager.propertiesDiv.empty();
    const nameInput = manager.propertiesDiv.createEl("input", { type: "text", value: this.name });
    manager.propertiesDiv.createEl("div", { text: "Type: " + this.type });
    const vault = anp.app.vault;
    const project = anp.project;
    nameInput.onchange = async () => {
      const originalPath = this.path;
      const tFile = vault.getFolderByPath(project.pathToProject + originalPath);
      const currName = this.name;
      const newPath = this.path.slice(0, -currName.length) + nameInput.value;
      if (tFile !== null) {
        vault.rename(tFile, project.pathToProject + newPath);
      }
      this.path = newPath;
      const folderStack = [];
      const GFindex = 0;
      const CFindex = 1;
      folderStack.push([this, 0]);
      let depth = 0;
      while (folderStack[0][CFindex] < this.files.length) {
        const currFolder = folderStack[depth];
        const currIndex = currFolder[CFindex];
        const currFile = currFolder[GFindex].files[currIndex];
        currFile.path = currFile.path.replace(originalPath.valueOf(), newPath);
        if (currFile instanceof GEOD3Folder) {
          folderStack.push([currFile, 0]);
          depth++;
        } else {
          currFolder[CFindex]++;
        }
        if (folderStack[depth][CFindex] >= folderStack[depth][GFindex].files.length) {
          while (depth > 0 && folderStack[depth][CFindex] >= folderStack[depth][GFindex].files.length) {
            depth--;
            folderStack.pop();
            if (depth >= 0) {
              folderStack[depth][CFindex]++;
            }
          }
        }
      }
      this.DisplayThumbnail(anp, thumbnailDiv);
    };
  }
};

// classes/tabs/file-types/real-file.ts
var import_obsidian2 = require("obsidian");
var RealFile = class extends GEOD3File {
  constructor(path, parentPath) {
    super(path, parentPath);
    this.src = "";
  }
  get data() {
    return this.src;
  }
  async Open(anp) {
    const manager = anp.project.fileManager;
    super.Open(anp);
    this.DisplayActualFile(manager.fileDiv);
  }
  async GrabDependencies(anp) {
    try {
      const app = anp.app;
      const vault = app.vault;
      const project = anp.project;
      const pathToActualFile = project.pathToProject + this.path + ".actual-file";
      const tFile = vault.getFileByPath(pathToActualFile);
      if (tFile === null) {
        throw new Error("");
      }
      const arrayBuffer = await vault.readBinary(tFile);
      const blob = new Blob([arrayBuffer]);
      this.src = URL.createObjectURL(blob);
    } catch (e) {
    }
  }
  async DisplayProperties(anp, thumbnailDiv) {
    const manager = anp.project.fileManager;
    manager.propertiesDiv.empty();
    const nameInput = manager.propertiesDiv.createEl("input", { type: "text", value: this.name });
    manager.propertiesDiv.createEl("div", { text: "Type: " + this.type });
    const currFileDiv = manager.propertiesDiv.createDiv();
    this.DisplayActualFile(currFileDiv);
    const fileInput = manager.propertiesDiv.createEl("input", { type: "file" });
    const vault = anp.app.vault;
    const project = anp.project;
    nameInput.onchange = async () => {
      const originalPath = this.path;
      const tFile1 = vault.getFileByPath(project.pathToProject + originalPath + ".md");
      const tFile2 = vault.getFileByPath(project.pathToProject + originalPath + ".actual-file");
      const currName = this.name;
      const newPath = this.path.slice(0, -currName.length) + nameInput.value;
      if (tFile1 !== null) {
        vault.rename(tFile1, project.pathToProject + newPath + ".md");
      }
      if (tFile2 !== null) {
        vault.rename(tFile2, project.pathToProject + newPath + ".actual-file");
      }
      this.path = newPath;
      this.DisplayThumbnail(anp, thumbnailDiv);
    };
    fileInput.onchange = async () => {
      const fileArray = fileInput.files;
      if (fileArray !== null) {
        const arrayBuffer = await fileArray[0].arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        this.src = URL.createObjectURL(blob);
        const pathToMDFile = (0, import_obsidian2.normalizePath)(anp.project.pathToProject + this.path + ".md");
        const pathToActualFile = (0, import_obsidian2.normalizePath)(anp.project.pathToProject + this.path + ".actual-file");
        await anp.app.vault.adapter.write(pathToMDFile, JSON.stringify(this));
        await anp.app.vault.adapter.writeBinary(pathToActualFile, arrayBuffer);
      }
      currFileDiv.empty();
      this.DisplayActualFile(currFileDiv);
    };
  }
  async Save(anp) {
    await super.Save(anp);
    try {
      const response = await fetch(this.data);
      const arrayBuffer = await response.arrayBuffer();
      const pathToActualFile = (0, import_obsidian2.normalizePath)(anp.project.pathToProject + this.path + ".actual-file");
      await anp.app.vault.adapter.writeBinary(pathToActualFile, arrayBuffer);
    } catch (e) {
      console.log("Error converting " + this.path.valueOf() + " to an actual file");
    }
  }
};
var ImageFile = class extends RealFile {
  constructor() {
    super(...arguments);
    this.type = "\u{1F5BC}\uFE0FImage";
  }
  async DisplayActualFile(div) {
    const img = div.createEl("img");
    img.style.objectFit = "contain";
    img.src = this.src;
    return img;
  }
};
var SoundFile = class extends RealFile {
  constructor() {
    super(...arguments);
    this.type = "\u{1F50A}Sound";
  }
  async DisplayActualFile(div) {
    const el = div.createEl("audio");
    el.src = this.src;
    return el;
  }
};
var VideoFile = class extends RealFile {
  constructor() {
    super(...arguments);
    this.type = "\u{1F39E}\uFE0FVideo";
  }
  async DisplayActualFile(div) {
    const vid = div.createEl("video");
    vid.style.objectFit = "contain";
    vid.src = this.src;
    return vid;
  }
};

// classes/tabs/file-manager.ts
var GEOD3FileManager = class extends Tab {
  constructor(anp) {
    super(anp);
    this.files = [];
  }
  get imageFiles() {
    const output = [];
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i] instanceof ImageFile) {
        output.push(this.files[i]);
      }
    }
    return output;
  }
  get soundFiles() {
    const output = [];
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i] instanceof SoundFile) {
        output.push(this.files[i]);
      }
    }
    return output;
  }
  get videoFiles() {
    const output = [];
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i] instanceof VideoFile) {
        output.push(this.files[i]);
      }
    }
    return output;
  }
  GetFile(path) {
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i].path === path) {
        return this.files[i];
      }
    }
    throw new Error("Path " + path + " not found");
  }
  GetFileByPrimitivePath(path) {
    for (let i = 0; i < this.files.length; i++) {
      if (this.files[i].path.valueOf() === path) {
        return this.files[i];
      }
    }
    throw new Error("Path " + path + " not found");
  }
  AssignObjectFromFileType(plainObj, path, parentPath) {
    plainObj.path = path;
    plainObj.parentPath = parentPath;
    switch (plainObj.type) {
      case "\u{1F4C1}Folder":
      default:
        return Object.assign(new GEOD3Folder(path, parentPath), plainObj);
      case "\u{1F5BC}\uFE0FImage":
        return Object.assign(new ImageFile(path, parentPath), plainObj);
      case "\u{1F50A}Sound":
        return Object.assign(new SoundFile(path, parentPath), plainObj);
      case "\u{1F39E}\uFE0FVideo":
        return Object.assign(new VideoFile(path, parentPath), plainObj);
    }
  }
  static CreateFileOfType(path, parentPath, type) {
    switch (type) {
      case "\u{1F4C1}Folder":
      default:
        return new GEOD3Folder(path, parentPath);
      case "\u{1F5BC}\uFE0FImage":
        return new ImageFile(path, parentPath);
      case "\u{1F50A}Sound":
        return new SoundFile(path, parentPath);
      case "\u{1F39E}\uFE0FVideo":
        return new VideoFile(path, parentPath);
    }
  }
  async LoadFiles(anp) {
    this.files = [];
    const app = anp.app;
    const vault = app.vault;
    const project = anp.project;
    const projectFolder = vault.getFolderByPath(project.pathToProject);
    if (projectFolder === null) {
      throw new Error("Project folder does not exist");
    }
    const folderStack = [];
    const TFindex = 0;
    const GFindex = 1;
    const CFindex = 2;
    const rootPath = new String("/");
    const root = new GEOD3Folder(rootPath, rootPath);
    folderStack.push([projectFolder, root, 0]);
    this.files.push(root);
    let depth = 0;
    while (folderStack[0][CFindex] < projectFolder.children.length) {
      const currFolder = folderStack[depth];
      const currIndex = currFolder[CFindex];
      const currFile = currFolder[TFindex].children[currIndex];
      const relativePath = currFile.path.replace(project.pathToProject, "");
      if (currFile.name !== "RESERVED FOLDER DO NOT RENAME") {
        if (currFile instanceof import_obsidian3.TFolder) {
          const newGEOD3Folder = new GEOD3Folder(relativePath, currFolder[GFindex].path);
          this.files.push(newGEOD3Folder);
          currFolder[GFindex].files.push(newGEOD3Folder);
          folderStack.push([currFile, newGEOD3Folder, 0]);
          depth++;
        } else if (currFile instanceof import_obsidian3.TFile) {
          if (currFile.extension === "md") {
            const data = await vault.cachedRead(currFile);
            const plainObj = JSON.parse(data);
            const newFile = this.AssignObjectFromFileType(plainObj, relativePath.slice(0, -3), currFolder[GFindex].path);
            currFolder[GFindex].files.push(newFile);
            this.files.push(newFile);
          }
          currFolder[CFindex]++;
        }
      } else {
        currFolder[CFindex]++;
      }
      if (folderStack[depth][CFindex] >= folderStack[depth][TFindex].children.length) {
        while (depth > 0 && folderStack[depth][CFindex] >= folderStack[depth][TFindex].children.length) {
          depth--;
          folderStack.pop();
          if (depth >= 0) {
            folderStack[depth][CFindex]++;
          }
        }
      }
    }
  }
  async Focus(div) {
    div.empty();
    this.mainDiv = div;
    this.mainDiv.className = "geod3-tab-container hbox";
    this.fileDiv = div.createDiv("vbox");
    this.propertiesDiv = div.createDiv("geod3-file-properties vbox");
    this.fileDiv.style.width = "70%";
    this.propertiesDiv.style.width = "30%";
    this.files[0].Open(this.anp);
  }
  UnFocus(div) {
    div.empty();
  }
};
GEOD3FileManager.icon = "\u{1F4C1}";
GEOD3FileManager.KNOWN_FILE_TYPES = [
  "\u{1F4C1}Folder",
  "\u{1F5BC}\uFE0FImage",
  "\u{1F50A}Sound",
  "\u{1F39E}\uFE0FVideo"
];

// colors.ts
var BG_COLOR_2 = "rgb(18, 18, 24)";
var BG_COLOR_3 = "rgb(5, 5, 8)";
var ACCENT_COLOR_1 = "rgb(223, 236, 255)";
var ACCENT_COLOR_2 = "rgb(160, 169, 184)";
var ACCENT_COLOR_3 = "rgb(100, 109, 123)";
var CENTRAL_COLOR_1 = "rgb(111, 46, 169)";
var CENTRAL_COLOR_2 = "rgb(78, 17, 131)";
var CENTRAL_COLOR_3 = "rgb(29, 0, 54)";

// classes/structs/struct.ts
var AS = /* @__PURE__ */ ((AS2) => {
  AS2[AS2["none"] = 0] = "none";
  AS2[AS2["boolean"] = 1] = "boolean";
  AS2[AS2["number"] = 2] = "number";
  AS2[AS2["string"] = 3] = "string";
  return AS2;
})(AS || {});
var ASHandler = class {
  static Copy(obj) {
    let newObj;
    switch (obj.type) {
      case 0 /* none */:
      case 1 /* boolean */:
      default:
        newObj = new ABooleanI(obj.scope, obj.name);
        break;
      case 2 /* number */:
        newObj = new ANumberI(obj.scope, obj.name);
        break;
      case 3 /* string */:
        newObj = new AStringI(obj.scope, obj.name);
        break;
    }
    newObj.value = obj.value;
    return newObj;
  }
  static CreateI(type, scope, name) {
    switch (type) {
      case 0 /* none */:
      case 1 /* boolean */:
      default:
        return new ABooleanI(scope, name);
      case 2 /* number */:
        return new ANumberI(scope, name);
      case 3 /* string */:
        return new AStringI(scope, name);
    }
  }
  static CreateII(struct, inspectorDiv, color = void 0) {
    switch (struct.type) {
      case 0 /* none */:
      case 1 /* boolean */:
      default:
        return new ABooleanII(struct, inspectorDiv, color);
      case 2 /* number */:
        return new ANumberII(struct, inspectorDiv, color);
      case 3 /* string */:
        return new AStringII(struct, inspectorDiv, color);
    }
  }
};
var ASI = class {
  constructor(scope, name = "") {
    this.name = name;
    this.scope = scope;
  }
};
var ASII = class {
  static AdjustInputWidth(input, div) {
    const tempEl = div.createEl("div", { text: input.value });
    tempEl.style.position = "absolute";
    tempEl.style.visibility = "hidden";
    tempEl.style.whiteSpace = "nowrap";
    tempEl.style.font = "inherit";
    tempEl.style.padding = input instanceof HTMLInputElement ? "1vh" : "2vh";
    input.style.width = tempEl.getBoundingClientRect().width + "px";
    tempEl.remove();
  }
};
var ABooleanI = class extends ASI {
  constructor(scope, name = "") {
    super(scope, name);
    this.type = 1 /* boolean */;
    this.value = false;
  }
};
var ABooleanII = class extends ASII {
  constructor(instance, div, color = void 0) {
    super();
    this.instance = instance;
    const input = div.createEl("input", { type: "checkbox" });
    input.checked = this.instance.value;
    input.style.backgroundColor = color === void 0 ? CENTRAL_COLOR_3 : color;
    input.onclick = () => {
      this.instance.value = input.checked;
      input.style.backgroundColor = input.checked ? CENTRAL_COLOR_1 : CENTRAL_COLOR_3;
    };
  }
};
var ANumberI = class extends ASI {
  constructor(scope, name = "") {
    super(scope, name);
    this.type = 2 /* number */;
    this.value = 0;
  }
};
var ANumberII = class extends ASII {
  constructor(instance, div, color = void 0) {
    super();
    this.instance = instance;
    const input = div.createEl("input", { type: "text", value: this.instance.value + "" });
    ASII.AdjustInputWidth(input, div);
    input.style.backgroundColor = color === void 0 ? CENTRAL_COLOR_3 : color;
    input.oninput = () => {
      ASII.AdjustInputWidth(input, div);
    };
    input.onchange = () => {
      this.instance.value = parseFloat(input.value);
    };
  }
};
var AStringI = class extends ASI {
  constructor(scope, name = "") {
    super(scope, name);
    this.type = 3 /* string */;
    this.value = "";
  }
};
var AStringII = class extends ASII {
  constructor(instance, div, color = void 0) {
    super();
    this.instance = instance;
    const input = div.createEl("input", { type: "text", value: this.instance.value + "" });
    ASII.AdjustInputWidth(input, div);
    input.style.backgroundColor = color === void 0 ? CENTRAL_COLOR_3 : color;
    input.oninput = () => {
      ASII.AdjustInputWidth(input, div);
    };
    input.onchange = () => {
      this.instance.value = input.value;
    };
  }
};

// classes/tabs/geod3-object.ts
var GEOD3ObjectHandler = class {
  static GetVariable(obj, name) {
    for (let i = 0; i < obj.variables.length; i++) {
      if (obj.variables[i].name === name) {
        return obj.variables[i];
      }
    }
    throw new Error("Variable " + name + " not found on object " + obj.idInScene + ": " + obj.name);
  }
  static CreateII(obj, anp, inspectorDiv) {
    return new GEOD3ObjectII(obj, anp, inspectorDiv);
  }
  static CreateRI(obj, anp, objDiv) {
    return new GEOD3ObjectRI(obj, anp, objDiv);
  }
};
var GEOD3Object = class {
  constructor(id) {
    this.idInScene = id;
    this.name = "object";
    this.variables = [];
    this.onStart = [];
    this.onNewFrame = [];
    this.variables.push(ASHandler.CreateI(3 /* string */, 1 /* Public */, "Sprite Path"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Sprite Width"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Sprite Height"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "x"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "y"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "z"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Speed x"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Speed y"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Speed z"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Acceleration x"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Acceleration y"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Acceleration z"));
    this.variables.push(ASHandler.CreateI(1 /* boolean */, 1 /* Public */, "Do Rectangular Hitbox"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Hitbox Radius/Half Width"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Hitbox Half Height"));
    this.variables.push(ASHandler.CreateI(2 /* number */, 1 /* Public */, "Hitbox Half Thickness"));
    this.variables[1].value = 100;
    this.variables[2].value = 100;
  }
};
var GEOD3ObjectII = class {
  constructor(instance, anp, div) {
    this.instance = instance;
    this.anp = anp;
    div.empty();
    const nameDiv = div.createDiv("geod3-inspector-top-bar hbox");
    nameDiv.createEl("div", { text: this.instance.idInScene + ":" });
    const nameInput = nameDiv.createEl("input", { type: "text", value: this.instance.name });
    const editScriptsButton = nameDiv.createEl("button", { text: "Edit Scripts\u{1F4DC}" });
    editScriptsButton.className = "geod3-secondary-button";
    nameInput.onchange = () => {
      this.instance.name = nameInput.value;
    };
    editScriptsButton.onclick = () => {
      anp.project.scriptEditor.currentObject = this.instance;
      anp.project.SwitchToTab(anp.project.scriptEditorTabID);
    };
    const variablesDiv = div.createDiv("geod3-inspector-variable-list vbox");
    for (let i = 0; i < this.instance.variables.length; i++) {
      const asI = this.instance.variables[i];
      const varDiv = variablesDiv.createDiv("geod3-inspector-variable hbox");
      varDiv.createEl("div", { text: asI.name });
      ASHandler.CreateII(asI, varDiv.createDiv());
    }
    const addNewDiv = div.createDiv("geod3-inspector-new-var hbox");
    const variableNameInput = addNewDiv.createEl("input", { type: "text", value: "unnamed" });
    const variableTypeInput = addNewDiv.createEl("select");
    const addVariableButton = addNewDiv.createEl("button", { text: "+" });
    addVariableButton.className = "geod3-add-button";
    for (let i = 1; i < 4; i++) {
      const type = AS[i];
      variableTypeInput.createEl("option", { text: type, value: i + "" });
    }
    variableTypeInput.value = "1";
    addVariableButton.onclick = () => {
      const name = variableNameInput.value;
      for (let i = 0; i < this.instance.variables.length; i++) {
        if (this.instance.variables[i].name === name) {
          return;
        }
      }
      const newVar = ASHandler.CreateI(parseInt(variableTypeInput.value), 1 /* Public */, name);
      this.instance.variables.push(newVar);
      const newVarDiv = variablesDiv.createDiv("geod3-inspector-variable hbox");
      newVarDiv.createEl("div", { text: newVar.name });
      ASHandler.CreateII(newVar, newVarDiv);
    };
  }
};
var GEOD3ObjectRI = class {
  constructor(obj, anp, objDiv) {
    this.idInScene = obj.idInScene;
    this.name = obj.name;
    this.variables = [];
    this.onStart = [];
    this.onNewFrame = [];
    for (let i = 0; i < obj.variables.length; i++) {
      this.variables.push(ASHandler.Copy(obj.variables[i]));
    }
    for (let i = 0; i < obj.onStart.length; i++) {
      this.onStart.push(AFHandler.CreateRI(obj.onStart[i], anp));
    }
    for (let i = 0; i < obj.onNewFrame.length; i++) {
      this.onNewFrame.push(AFHandler.CreateRI(obj.onNewFrame[i], anp));
    }
    this.objDiv = objDiv;
    this.anp = anp;
    this.prevSpritePath = "";
    this.SetObjDivCSSProperties();
  }
  SetObjDivCSSProperties() {
    this.objDiv.style.transform = "translate(-50%, 50%)";
    this.objDiv.style.position = "absolute";
  }
  RefreshSprite() {
    const spritePath = GEOD3ObjectHandler.GetVariable(this, "Sprite Path").value;
    if (this.prevSpritePath !== spritePath) {
      try {
        const mediaFile = this.anp.project.fileManager.GetFileByPrimitivePath(spritePath);
        const spriteSrc = mediaFile.data;
        let mediaEl;
        this.objDiv.empty();
        if (mediaFile instanceof ImageFile) {
          mediaEl = this.objDiv.createEl("img");
        } else {
          mediaEl = this.objDiv.createEl("video");
          mediaEl.controls = false;
          mediaEl.loop = true;
        }
        mediaEl.src = spriteSrc;
        mediaEl.style.width = "100%";
        mediaEl.style.height = "100%";
        this.prevSpritePath = spritePath;
      } catch (e) {
        console.log("failed to find image/video path");
      }
    }
  }
  SetLocationAndWidth() {
    const width = GEOD3ObjectHandler.GetVariable(this, "Sprite Width");
    const height = GEOD3ObjectHandler.GetVariable(this, "Sprite Height");
    const x = GEOD3ObjectHandler.GetVariable(this, "x");
    const y = GEOD3ObjectHandler.GetVariable(this, "y");
    const z = GEOD3ObjectHandler.GetVariable(this, "z");
    const xVel = GEOD3ObjectHandler.GetVariable(this, "Speed x");
    const yVel = GEOD3ObjectHandler.GetVariable(this, "Speed y");
    const zVel = GEOD3ObjectHandler.GetVariable(this, "Speed z");
    const xAccel = GEOD3ObjectHandler.GetVariable(this, "Acceleration x");
    const yAccel = GEOD3ObjectHandler.GetVariable(this, "Acceleration y");
    const zAccel = GEOD3ObjectHandler.GetVariable(this, "Acceleration z");
    this.objDiv.style.width = width.value + "px";
    this.objDiv.style.height = height.value + "px";
    xVel.value += xAccel.value;
    yVel.value += yAccel.value;
    zVel.value += zAccel.value;
    x.value += xVel.value;
    y.value += yVel.value;
    z.value += zVel.value;
    this.objDiv.style.left = x.value + "px";
    this.objDiv.style.bottom = y.value + "px";
  }
  Render() {
    this.RefreshSprite();
    this.SetLocationAndWidth();
  }
  OnStart() {
    for (let i = 0; i < this.onStart.length; i++) {
      this.onStart[i].Execute();
    }
  }
  OnNewFrame() {
    for (let i = 0; i < this.onNewFrame.length; i++) {
      this.onNewFrame[i].Execute();
    }
  }
};

// classes/functions/function.ts
var AFHandler = class {
  static Copy(obj) {
    const newParams = [];
    for (let i = 0; i < obj.parameters.length; i++) {
      const currParam = obj.parameters[i];
      if (currParam instanceof AFI2) {
        newParams.push(this.Copy(currParam));
      } else {
        newParams.push(ASHandler.Copy(currParam));
      }
    }
    switch (obj.type) {
      case 0 /* none */:
      default:
        return new ADoNothingI();
      case 1 /* chain */:
        return new AChainI(newParams);
      case 2 /* get */:
        return new AGetI(newParams);
      case 3 /* set */:
        return new ASetI(newParams);
      case 4 /* if */:
        return new AIfI(newParams);
      case 5 /* ifelse */:
        return new AIfElseI(newParams);
      case 6 /* compare */:
        return new ACompareI(newParams);
      case 7 /* keydown */:
        return new AKeydownI(newParams);
      case 8 /* add */:
        return new AAddI(newParams);
    }
  }
  static CreateI(type, parameters) {
    switch (type) {
      case 0 /* none */:
      default:
        return new ADoNothingI();
      case 1 /* chain */:
        return new AChainI(parameters);
      case 2 /* get */:
        return new AGetI(parameters);
      case 3 /* set */:
        return new ASetI(parameters);
      case 4 /* if */:
        return new AIfI(parameters);
      case 5 /* ifelse */:
        return new AIfElseI(parameters);
      case 6 /* compare */:
        return new ACompareI(parameters);
      case 7 /* keydown */:
        return new AKeydownI(parameters);
      case 8 /* add */:
        return new AAddI(parameters);
    }
  }
  static CreateEI(obj, blockDiv, anp) {
    switch (obj.type) {
      case 0 /* none */:
      default:
        return new ADoNothingEI(obj, blockDiv, anp);
      case 1 /* chain */:
        return new AChainEI(obj, blockDiv, anp);
      case 2 /* get */:
        return new AGetEI(obj, blockDiv, anp);
      case 3 /* set */:
        return new ASetEI(obj, blockDiv, anp);
      case 4 /* if */:
        return new AIfEI(obj, blockDiv, anp);
      case 5 /* ifelse */:
        return new AIfElseEI(obj, blockDiv, anp);
      case 6 /* compare */:
        return new ACompareEI(obj, blockDiv, anp);
      case 7 /* keydown */:
        return new AKeydownEI(obj, blockDiv, anp);
      case 8 /* add */:
        return new AAddEI(obj, blockDiv, anp);
    }
  }
  static CreateRI(obj, anp) {
    switch (obj.type) {
      case 0 /* none */:
      default:
        return new ADoNothingRI(obj, anp);
      case 1 /* chain */:
        return new AChainRI(obj, anp);
      case 2 /* get */:
        return new AGetRI(obj, anp);
      case 3 /* set */:
        return new ASetRI(obj, anp);
      case 4 /* if */:
        return new AIfRI(obj, anp);
      case 5 /* ifelse */:
        return new AIfElseRI(obj, anp);
      case 6 /* compare */:
        return new ACompareRI(obj, anp);
      case 7 /* keydown */:
        return new AKeydownRI(obj, anp);
      case 8 /* add */:
        return new AAddRI(obj, anp);
    }
  }
};
var AFI2 = class {
  constructor() {
    this.defaultParameters = [];
    this.parameters = [];
  }
};
var AFEI = class {
  constructor(instance, blockDiv, anp) {
    this.instance = instance;
    this.div = blockDiv;
    this.anp = anp;
    this.DisplayBlock();
  }
  static AdjustInputWidth(input, div) {
    const tempEl = div.createEl("div", { text: input.value });
    tempEl.style.position = "absolute";
    tempEl.style.visibility = "hidden";
    tempEl.style.whiteSpace = "nowrap";
    tempEl.style.font = "inherit";
    tempEl.style.padding = "1vh";
    input.style.width = tempEl.getBoundingClientRect().width + "px";
    tempEl.remove();
  }
  CreateASIOrAFIParameterDiv(index, paramDiv, backgroundColor) {
    const param = this.instance.parameters[index];
    if (param instanceof ASI) {
      return this.CreateASIParameterDiv(index, paramDiv, backgroundColor);
    } else {
      return this.CreateAFIParameterDiv(index, paramDiv, backgroundColor);
    }
  }
  CreateASIParameterDiv(index, paramDiv, backgroundColor) {
    AFEI.SetParameterDiv(this.anp, this, paramDiv, index);
    const param = this.instance.parameters[index];
    ASHandler.CreateII(param, paramDiv, backgroundColor);
  }
  CreateAFIParameterDiv(index, paramDiv, backgroundColor) {
    AFEI.SetParameterDiv(this.anp, this, paramDiv, index);
    const param = this.instance.parameters[index];
    const paramEI = AFHandler.CreateEI(param, paramDiv, this.anp);
    paramEI.parentEI = this;
    if (paramEI.instance.type === 0 /* none */) {
      paramEI.div.style.backgroundColor = backgroundColor;
    } else {
      AFEI.MakeBlockDraggable(paramEI, this.anp, false);
    }
    return paramEI;
  }
  RemoveParameter(parameter) {
    for (let i = 0; i < this.instance.parameters.length; i++) {
      if (this.instance.parameters[i] === parameter) {
        const currDefaultParam = this.instance.defaultParameters[i];
        this.instance.parameters[i] = currDefaultParam instanceof ASI ? ASHandler.Copy(currDefaultParam) : AFHandler.Copy(currDefaultParam);
      }
    }
  }
  static MakeBlockDraggable(block, anp, isCopy) {
    const scriptEditor = anp.project.scriptEditor;
    block.div.draggable = true;
    block.div.addEventListener("dragstart", (event) => {
      event.stopPropagation();
      if (event.dataTransfer !== null) {
        event.dataTransfer.effectAllowed = "copy";
      }
      scriptEditor.currentlyDraggedBlockIsCopy = isCopy;
      scriptEditor.currentlyDraggedBlock = block;
      scriptEditor.blocksDiv.style.height = "90%";
      scriptEditor.delDiv.style.height = "10%";
    });
    block.div.addEventListener("dragend", (event) => {
      event.stopPropagation();
      event.preventDefault();
      scriptEditor.blocksDiv.style.height = "100%";
      scriptEditor.delDiv.style.height = "0%";
    });
  }
  static SetParameterDiv(anp, afei, paramDiv, paramIndex) {
    const scriptEditor = anp.project.scriptEditor;
    paramDiv.addEventListener("dragover", (event) => {
      event.stopPropagation();
      event.preventDefault();
      if (event.dataTransfer !== null) {
        event.dataTransfer.dropEffect = "copy";
      }
      paramDiv.style.borderStyle = "solid";
      paramDiv.style.borderColor = ACCENT_COLOR_1;
    });
    paramDiv.addEventListener("dragleave", (event) => {
      event.stopPropagation();
      paramDiv.style.borderStyle = "";
    });
    paramDiv.addEventListener("drop", (event) => {
      event.stopPropagation();
      if (scriptEditor.currentlyDraggedBlock === void 0) {
        return;
      }
      const shouldCopy = scriptEditor.currentlyDraggedBlockIsCopy;
      const droppedBlock = scriptEditor.currentlyDraggedBlock;
      const newInstance = shouldCopy ? AFHandler.Copy(droppedBlock.instance) : droppedBlock.instance;
      afei.instance.parameters[paramIndex] = newInstance;
      if (!(droppedBlock.parentEI === void 0 || shouldCopy)) {
        const parentEI = droppedBlock.parentEI;
        parentEI.RemoveParameter(droppedBlock.instance);
        parentEI.DisplayBlock();
      }
      afei.DisplayBlock();
      event.preventDefault();
      scriptEditor.currentlyDraggedBlock = void 0;
    });
  }
};
var AFRI2 = class {
  constructor(ogFunction, anp) {
    this.type = ogFunction.type;
    this.parameters = [];
    this.anp = anp;
    for (let i = 0; i < ogFunction.parameters.length; i++) {
      const ogParam = ogFunction.parameters[i];
      let copy;
      if (ogParam instanceof ASI) {
        copy = ASHandler.Copy(ogParam);
      } else {
        copy = AFHandler.CreateRI(ogParam, anp);
      }
      this.parameters.push(copy);
    }
  }
};
var ADoNothingI = class extends AFI2 {
  constructor() {
    super(...arguments);
    this.type = 0 /* none */;
  }
};
var ADoNothingEI = class extends AFEI {
  DisplayBlock() {
    this.div.className = "geod3-script-block";
    this.div.style.backgroundColor = BG_COLOR_3;
  }
  RemoveParameter(parameter) {
  }
};
var ADoNothingRI = class extends AFRI2 {
  async Execute() {
  }
};
var AChainI = class extends AFI2 {
  constructor(parameters = void 0) {
    super();
    this.type = 1 /* chain */;
    const doNothing = new ADoNothingI();
    this.defaultParameters.push(doNothing);
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(AFHandler.Copy(doNothing));
    }
  }
};
var AChainEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block vbox";
    div.style.backgroundColor = BG_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    div.style.width = "fit-content";
    div.style.padding = "1vh";
    div.style.gap = "1vh";
    for (let i = 0; i < this.instance.parameters.length; i++) {
      const index = i;
      const currBlockDiv = div.createDiv("geod3-script-block-inner-section hbox");
      const deleteButton = currBlockDiv.createEl("button", { text: "-" });
      const addButton2 = currBlockDiv.createEl("button", { text: "+" });
      deleteButton.className = "geod3-remove-button";
      addButton2.className = "geod3-add-button";
      deleteButton.onclick = () => {
        this.instance.parameters.splice(index, 1);
        this.DisplayBlock();
      };
      addButton2.onclick = () => {
        this.instance.parameters.splice(index, 0, new ADoNothingI());
        this.DisplayBlock();
      };
      this.CreateAFIParameterDiv(index, currBlockDiv.createDiv(), BG_COLOR_3);
    }
    const addButton = div.createEl("button", { text: "+" });
    addButton.className = "geod3-add-button";
    addButton.onclick = () => {
      this.instance.parameters.splice(this.instance.parameters.length, 0, new ADoNothingI());
      this.DisplayBlock();
    };
  }
  RemoveParameter(parameter) {
    for (let i = 0; i < this.instance.parameters.length; i++) {
      if (this.instance.parameters[i] === parameter) {
        this.instance.parameters[i] = AFHandler.Copy(this.instance.defaultParameters[0]);
      }
    }
  }
};
var AChainRI = class extends AFRI2 {
  async Execute() {
    for (let i = 0; i < this.parameters.length; i++) {
      await this.parameters[i].Execute();
    }
  }
};
var AGetI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 2 /* get */;
    const objIndex = new ANumberI(0 /* Value */, "Object Index");
    const varName = new AStringI(0 /* Value */, "Variable Name");
    objIndex.value = 0;
    varName.value = "Sprite Path";
    this.defaultParameters = [varName, objIndex];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(varName));
      this.parameters.push(ASHandler.Copy(objIndex));
    }
  }
};
var AGetEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const anp = this.anp;
    const varName = this.instance.parameters[0];
    const objID = this.instance.parameters[1];
    div.createEl("div", { text: "Get" });
    const varDiv = div.createDiv();
    div.createEl("div", { text: "from" });
    const objDiv = div.createDiv();
    const objIDInput = objDiv.createEl("select");
    const varNameInput = varDiv.createEl("select");
    objIDInput.style.backgroundColor = CENTRAL_COLOR_3;
    varNameInput.style.backgroundColor = CENTRAL_COLOR_3;
    objIDInput.style.paddingRight = "0";
    varNameInput.style.paddingRight = "0";
    const objArr = anp.project.sceneView.objects;
    for (let i = 0; i < objArr.length; i++) {
      objIDInput.createEl("option", { text: i + ": " + objArr[i].name, value: i + ": " + objArr[i].name });
    }
    const GetAllVarNames = () => {
      varNameInput.empty();
      const objArr2 = anp.project.sceneView.objects;
      const varArr = objArr2[this.instance.parameters[1].value].variables;
      for (let i = 0; i < varArr.length; i++) {
        varNameInput.createEl("option", { text: varArr[i].name, value: varArr[i].name });
      }
    };
    objIDInput.onchange = () => {
      this.instance.parameters[1].value = parseInt(objIDInput.value.split(":")[0]);
      AFEI.AdjustInputWidth(objIDInput, div);
      GetAllVarNames();
    };
    varNameInput.onchange = () => {
      this.instance.parameters[0].value = varNameInput.value;
      AFEI.AdjustInputWidth(varNameInput, div);
    };
    GetAllVarNames();
    objIDInput.value = objID.value + ": " + objArr[objID.value].name;
    varNameInput.value = varName.value;
    AFEI.AdjustInputWidth(objIDInput, div);
    AFEI.AdjustInputWidth(varNameInput, div);
  }
};
var AGetRI = class extends AFRI2 {
  async Execute() {
    const varName = this.parameters[0];
    const objIndex = this.parameters[1];
    const obj = this.anp.project.gameView.objects[objIndex.value];
    return GEOD3ObjectHandler.GetVariable(obj, varName.value);
  }
};
var ASetI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 3 /* set */;
    const varName = new AStringI(0 /* Value */, "Variable Name");
    const objIndex = new ANumberI(0 /* Value */, "Object Index");
    varName.value = "Sprite Path";
    objIndex.value = 0;
    this.defaultParameters = [varName, objIndex];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(varName));
      this.parameters.push(ASHandler.Copy(objIndex));
      this.parameters.push(ASHandler.CreateI(2 /* number */, 0 /* Value */, ""));
    }
  }
};
var ASetEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const anp = this.anp;
    const varName = this.instance.parameters[0];
    const objID = this.instance.parameters[1];
    div.createEl("div", { text: "Set" });
    const varDiv = div.createDiv();
    div.createEl("div", { text: "from" });
    const objDiv = div.createDiv();
    div.createEl("div", { text: "to" });
    const valueDiv = div.createDiv();
    const objIDInput = objDiv.createEl("select");
    const varNameInput = varDiv.createEl("select");
    objIDInput.style.backgroundColor = CENTRAL_COLOR_3;
    varNameInput.style.backgroundColor = CENTRAL_COLOR_3;
    objIDInput.style.paddingRight = "0";
    varNameInput.style.paddingRight = "0";
    const objArr = anp.project.sceneView.objects;
    for (let i = 0; i < objArr.length; i++) {
      objIDInput.createEl("option", { text: i + ": " + objArr[i].name, value: i + ": " + objArr[i].name });
    }
    const GetAllVarNames = () => {
      varNameInput.empty();
      const objArr2 = anp.project.sceneView.objects;
      const varArr = objArr2[this.instance.parameters[1].value].variables;
      for (let i = 0; i < varArr.length; i++) {
        varNameInput.createEl("option", { text: varArr[i].name, value: varArr[i].name });
      }
      valueDiv.empty();
      if (this.instance.parameters[2] instanceof AFI2) {
        this.CreateAFIParameterDiv(2, valueDiv, CENTRAL_COLOR_3);
      } else {
        this.CreateASIParameterDiv(2, valueDiv, CENTRAL_COLOR_3);
      }
    };
    objIDInput.onchange = () => {
      this.instance.parameters[1].value = parseInt(objIDInput.value.split(":")[0]);
      AFEI.AdjustInputWidth(objIDInput, div);
      GetAllVarNames();
    };
    varNameInput.onchange = () => {
      this.instance.parameters[0].value = varNameInput.value;
      AFEI.AdjustInputWidth(varNameInput, div);
    };
    GetAllVarNames();
    objIDInput.value = objID.value + ": " + objArr[objID.value].name;
    varNameInput.value = varName.value;
    AFEI.AdjustInputWidth(objIDInput, div);
    AFEI.AdjustInputWidth(varNameInput, div);
    console.log("displayed set");
  }
  RemoveParameter(parameter) {
    if (this.instance.parameters[2] === parameter) {
      const defaultParam = ASHandler.CreateI(this.instance.parameters[0].type, 0 /* Value */, "");
      this.instance.parameters[2] = defaultParam;
    }
  }
};
var ASetRI = class extends AFRI2 {
  async Execute() {
    const varName = this.parameters[0];
    const objIndex = this.parameters[1];
    const val = this.parameters[2];
    const obj = this.anp.project.gameView.objects[objIndex.value];
    const varToSet = GEOD3ObjectHandler.GetVariable(obj, varName.value);
    varToSet.value = val instanceof AFRI2 ? (await val.Execute()).value : val.value;
  }
};
var AIfI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 4 /* if */;
    const condition = new ABooleanI(0 /* Value */, "condition");
    const doNothing = new ADoNothingI();
    condition.value = false;
    this.defaultParameters = [condition, doNothing];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(condition));
      this.parameters.push(AFHandler.Copy(doNothing));
    }
  }
};
var AIfEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block vbox";
    div.style.backgroundColor = ACCENT_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const topDiv = div.createDiv("geod3-script-block-inner-section hbox");
    topDiv.createEl("div", { text: "If" });
    const conditionDiv = topDiv.createDiv();
    const functionDiv = div.createDiv();
    this.CreateASIOrAFIParameterDiv(0, conditionDiv, ACCENT_COLOR_3);
    this.CreateAFIParameterDiv(1, functionDiv, ACCENT_COLOR_3);
  }
};
var AIfRI = class extends AFRI2 {
  async Execute() {
    const param1 = this.parameters[0];
    const param1IsAFRI = param1 instanceof AFRI2;
    const condition = param1IsAFRI ? (await param1.Execute()).value : param1.value;
    if (condition) {
      const param2 = this.parameters[1];
      await param2.Execute();
    }
  }
};
var AIfElseI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 5 /* ifelse */;
    const condition = new ABooleanI(0 /* Value */, "condition");
    const doNothing = new ADoNothingI();
    const doNothing2 = new ADoNothingI();
    condition.value = false;
    this.defaultParameters = [condition, doNothing, doNothing2];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(condition));
      this.parameters.push(AFHandler.Copy(doNothing));
      this.parameters.push(AFHandler.Copy(doNothing2));
    }
  }
};
var AIfElseEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block vbox";
    div.style.backgroundColor = ACCENT_COLOR_2;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const topDiv = div.createDiv("geod3-script-block-inner-section hbox");
    topDiv.createEl("div", { text: "If" });
    const conditionDiv = topDiv.createDiv();
    const function1Div = div.createDiv();
    div.createEl("div", { text: "Else" });
    const function2Div = div.createDiv();
    this.CreateASIOrAFIParameterDiv(0, conditionDiv, ACCENT_COLOR_3);
    this.CreateAFIParameterDiv(1, function1Div, ACCENT_COLOR_3);
    this.CreateAFIParameterDiv(2, function2Div, ACCENT_COLOR_3);
  }
};
var AIfElseRI = class extends AFRI2 {
  async Execute() {
    const param1 = this.parameters[0];
    const param1IsAFRI = param1 instanceof AFRI2;
    const condition = param1IsAFRI ? (await param1.Execute()).value : param1.value;
    if (condition) {
      const param2 = this.parameters[1];
      await param2.Execute();
    } else {
      const param3 = this.parameters[2];
      await param3.Execute();
    }
  }
};
var ACompareI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 6 /* compare */;
    const val1 = new ANumberI(0 /* Value */, "val1");
    const type = new AStringI(0 /* Value */, "comparison type");
    const val2 = new ANumberI(0 /* Value */, "val2");
    val1.value = 0;
    type.value = "=";
    val2.value = 0;
    this.defaultParameters = [val1, type, val2];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(val1));
      this.parameters.push(ASHandler.Copy(type));
      this.parameters.push(ASHandler.Copy(val2));
    }
  }
};
var ACompareEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_1;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const val1Div = div.createDiv();
    const typeSelect = div.createEl("select");
    const val2Div = div.createDiv();
    this.CreateASIOrAFIParameterDiv(0, val1Div, CENTRAL_COLOR_3);
    this.CreateASIOrAFIParameterDiv(2, val2Div, CENTRAL_COLOR_3);
    typeSelect.createEl("option", { text: "=", value: "=" });
    typeSelect.createEl("option", { text: "!=", value: "!=" });
    typeSelect.createEl("option", { text: "<", value: "<" });
    typeSelect.createEl("option", { text: ">", value: ">" });
    typeSelect.createEl("option", { text: "<=", value: "<=" });
    typeSelect.createEl("option", { text: ">=", value: ">=" });
    typeSelect.value = this.instance.parameters[1].value;
    AFEI.AdjustInputWidth(typeSelect, div);
    typeSelect.onchange = () => {
      this.instance.parameters[1].value = typeSelect.value;
      AFEI.AdjustInputWidth(typeSelect, div);
    };
    typeSelect.style.backgroundColor = CENTRAL_COLOR_3;
    typeSelect.style.paddingRight = "0";
  }
};
var ACompareRI = class extends AFRI2 {
  async Execute() {
    const param1 = this.parameters[0];
    const param2 = this.parameters[1];
    const param3 = this.parameters[2];
    const param1IsAFRI = param1 instanceof AFRI2;
    const param3IsAFRI = param3 instanceof AFRI2;
    const val1 = param1IsAFRI ? (await param1.Execute()).value : param1.value;
    const val2 = param3IsAFRI ? (await param3.Execute()).value : param3.value;
    const output = new ABooleanI(0 /* Value */, "output");
    switch (param2.value) {
      case "=":
      default:
        output.value = val1 === val2;
        break;
      case "!=":
        output.value = val1 !== val2;
        break;
      case "<":
        output.value = val1 < val2;
        break;
      case ">":
        output.value = val1 > val2;
        break;
      case "<=":
        output.value = val1 <= val2;
        break;
      case ">=":
        output.value = val1 >= val2;
        break;
    }
    return output;
  }
};
var AKeydownI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 7 /* keydown */;
    const key = new AStringI(0 /* Value */, "key");
    key.value = "Any";
    this.defaultParameters = [key];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(key));
    }
  }
};
AKeydownI.keylist = [
  "Any",
  "Space",
  "Up Arrow",
  "Down Arrow",
  "Left Arrow",
  "Right Arrow",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z"
];
var AKeydownEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_1;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const keySelect = div.createEl("select");
    div.createEl("div", { text: "Key Down?" });
    for (let i = 0; i < AKeydownI.keylist.length; i++) {
      const currKey = AKeydownI.keylist[i];
      keySelect.createEl("option", { text: currKey, value: currKey });
    }
    keySelect.value = this.instance.parameters[0].value;
    AFEI.AdjustInputWidth(keySelect, div);
    keySelect.onchange = () => {
      this.instance.parameters[0].value = keySelect.value;
      AFEI.AdjustInputWidth(keySelect, div);
    };
    keySelect.style.backgroundColor = CENTRAL_COLOR_3;
    keySelect.style.paddingRight = "0";
  }
};
var AKeydownRI = class extends AFRI2 {
  async Execute() {
    const key = this.parameters[0];
    const output = new ABooleanI(0 /* Value */, "output");
    const isKeyDown = this.anp.project.gameView.pressedKeys.get(key.value);
    output.value = isKeyDown === void 0 ? false : isKeyDown;
    console.log(isKeyDown);
    return output;
  }
};
var AAddI = class extends AFI2 {
  constructor(parameters) {
    super();
    this.type = 8 /* add */;
    const num1 = new ANumberI(0 /* Value */, "num1");
    const num2 = new ANumberI(0 /* Value */, "num2");
    num1.value = 0;
    num2.value = 0;
    this.defaultParameters = [num1, num2];
    if (parameters !== void 0) {
      this.parameters = parameters;
    } else {
      this.parameters.push(ASHandler.Copy(num1));
      this.parameters.push(ASHandler.Copy(num2));
    }
  }
};
var AAddEI = class extends AFEI {
  DisplayBlock() {
    this.div.empty();
    const div = this.div;
    div.className = "geod3-script-block hbox";
    div.style.backgroundColor = CENTRAL_COLOR_1;
    div.style.borderStyle = "solid";
    div.style.borderColor = ACCENT_COLOR_3;
    const num1Div = div.createDiv();
    div.createEl("div", { text: "+" });
    const num2Div = div.createDiv();
    this.CreateASIOrAFIParameterDiv(0, num1Div, CENTRAL_COLOR_3);
    this.CreateASIOrAFIParameterDiv(1, num2Div, CENTRAL_COLOR_3);
  }
};
var AAddRI = class extends AFRI2 {
  async Execute() {
    const param1 = this.parameters[0];
    const param2 = this.parameters[1];
    const param1IsAFRI = param1 instanceof AFRI2;
    const param2IsAFRI = param2 instanceof AFRI2;
    const num1 = param1IsAFRI ? (await param1.Execute()).value : param1.value;
    const num2 = param2IsAFRI ? (await param2.Execute()).value : param2.value;
    const output = new ANumberI(0 /* Value */, "sum");
    output.value = num1 + num2;
    return output;
  }
};

// classes/tabs/game-view.ts
var GameView = class extends Tab {
  get pressedKeysArray() {
    return Array.from(this.pressedKeys.entries());
  }
  async Focus(div) {
    div.empty();
    div.className = "geod3-game-view-main-div geod3-tab-container";
    const gameWrapper = div.createDiv("geod3-game-wrapper");
    this.gameDiv = gameWrapper.createDiv("geod3-game");
    this.stillRunning = true;
    this.objects = [];
    this.pressedKeys = /* @__PURE__ */ new Map();
    this.ListenForKeyPresses();
    await this.OnStart();
    while (this.stillRunning) {
      this.OnNewFrame();
      await sleep(15);
    }
  }
  UnFocus(div) {
    div.empty();
    this.stillRunning = false;
  }
  ListenForKeyPresses() {
    this.gameDiv.tabIndex = -1;
    this.gameDiv.focus();
    for (let i = 0; i < AKeydownI.keylist.length; i++) {
      const currKey = AKeydownI.keylist[i];
      this.pressedKeys.set(currKey, false);
    }
    this.gameDiv.onkeydown = (event) => {
      console.log(event.key);
      this.pressedKeys.set("Any", true);
      switch (event.key) {
        case " ":
          this.pressedKeys.set("Space", true);
          return;
        case "ArrowUp":
          this.pressedKeys.set("Up Arrow", true);
          return;
        case "ArrowDown":
          this.pressedKeys.set("Down Arrow", true);
          return;
        case "ArrowLeft":
          this.pressedKeys.set("Left Arrow", true);
          return;
        case "ArrowRight":
          this.pressedKeys.set("Right Arrow", true);
          return;
        case "A":
        case "a":
          this.pressedKeys.set("A", true);
          return;
        case "B":
        case "b":
          this.pressedKeys.set("B", true);
          return;
        case "C":
        case "c":
          this.pressedKeys.set("C", true);
          return;
        case "D":
        case "d":
          this.pressedKeys.set("D", true);
          return;
        case "E":
        case "e":
          this.pressedKeys.set("E", true);
          return;
        case "F":
        case "f":
          this.pressedKeys.set("F", true);
          return;
        case "G":
        case "g":
          this.pressedKeys.set("G", true);
          return;
        case "H":
        case "h":
          this.pressedKeys.set("H", true);
          return;
        case "I":
        case "i":
          this.pressedKeys.set("I", true);
          return;
        case "J":
        case "j":
          this.pressedKeys.set("J", true);
          return;
        case "K":
        case "k":
          this.pressedKeys.set("K", true);
          return;
        case "L":
        case "l":
          this.pressedKeys.set("L", true);
          return;
        case "M":
        case "m":
          this.pressedKeys.set("M", true);
          return;
        case "N":
        case "n":
          this.pressedKeys.set("N", true);
          return;
        case "O":
        case "o":
          this.pressedKeys.set("O", true);
          return;
        case "P":
        case "p":
          this.pressedKeys.set("P", true);
          return;
        case "Q":
        case "q":
          this.pressedKeys.set("Q", true);
          return;
        case "R":
        case "r":
          this.pressedKeys.set("R", true);
          return;
        case "S":
        case "s":
          this.pressedKeys.set("S", true);
          return;
        case "T":
        case "t":
          this.pressedKeys.set("T", true);
          return;
        case "U":
        case "u":
          this.pressedKeys.set("U", true);
          return;
        case "V":
        case "v":
          this.pressedKeys.set("V", true);
          return;
        case "W":
        case "w":
          this.pressedKeys.set("W", true);
          return;
        case "X":
        case "x":
          this.pressedKeys.set("X", true);
          return;
        case "Y":
        case "y":
          this.pressedKeys.set("Y", true);
          return;
        case "Z":
        case "z":
          this.pressedKeys.set("Z", true);
          return;
      }
    };
    this.gameDiv.onkeyup = (event) => {
      switch (event.key) {
        case " ":
          this.pressedKeys.set("Space", false);
          break;
        case "ArrowUp":
          this.pressedKeys.set("Up Arrow", false);
          break;
        case "ArrowDown":
          this.pressedKeys.set("Down Arrow", false);
          break;
        case "ArrowLeft":
          this.pressedKeys.set("Left Arrow", false);
          break;
        case "ArrowRight":
          this.pressedKeys.set("Right Arrow", false);
          break;
        case "A":
        case "a":
          this.pressedKeys.set("A", false);
          break;
        case "B":
        case "b":
          this.pressedKeys.set("B", false);
          break;
        case "C":
        case "c":
          this.pressedKeys.set("C", false);
          break;
        case "D":
        case "d":
          this.pressedKeys.set("D", false);
          break;
        case "E":
        case "e":
          this.pressedKeys.set("E", false);
          break;
        case "F":
        case "f":
          this.pressedKeys.set("F", false);
          break;
        case "G":
        case "g":
          this.pressedKeys.set("G", false);
          break;
        case "H":
        case "h":
          this.pressedKeys.set("H", false);
          break;
        case "I":
        case "i":
          this.pressedKeys.set("I", false);
          break;
        case "J":
        case "j":
          this.pressedKeys.set("J", false);
          break;
        case "K":
        case "k":
          this.pressedKeys.set("K", false);
          break;
        case "L":
        case "l":
          this.pressedKeys.set("L", false);
          break;
        case "M":
        case "m":
          this.pressedKeys.set("M", false);
          break;
        case "N":
        case "n":
          this.pressedKeys.set("N", false);
          break;
        case "O":
        case "o":
          this.pressedKeys.set("O", false);
          break;
        case "P":
        case "p":
          this.pressedKeys.set("P", false);
          break;
        case "Q":
        case "q":
          this.pressedKeys.set("Q", false);
          break;
        case "R":
        case "r":
          this.pressedKeys.set("R", false);
          break;
        case "S":
        case "s":
          this.pressedKeys.set("S", false);
          break;
        case "T":
        case "t":
          this.pressedKeys.set("T", false);
          break;
        case "U":
        case "u":
          this.pressedKeys.set("U", false);
          break;
        case "V":
        case "v":
          this.pressedKeys.set("V", false);
          break;
        case "W":
        case "w":
          this.pressedKeys.set("W", false);
          break;
        case "X":
        case "x":
          this.pressedKeys.set("X", false);
          break;
        case "Y":
        case "y":
          this.pressedKeys.set("Y", false);
          break;
        case "Z":
        case "z":
          this.pressedKeys.set("Z", false);
          break;
      }
      const pressedKeysArray = this.pressedKeysArray;
      for (let i = 1; i < pressedKeysArray.length; i++) {
        if (pressedKeysArray[i][1]) {
          return;
        }
      }
      this.pressedKeys.set("Any", false);
    };
  }
  async OnStart() {
    const objInstances = this.anp.project.sceneView.objects;
    for (let i = 0; i < objInstances.length; i++) {
      this.objects.push(GEOD3ObjectHandler.CreateRI(objInstances[i], this.anp, this.gameDiv.createDiv()));
    }
    for (let i = 0; i < this.objects.length; i++) {
      this.objects[i].OnStart();
    }
  }
  async OnNewFrame() {
    this.gameDiv.focus();
    const renderingOrder = [];
    for (let i = 0; i < this.objects.length; i++) {
      const currObj = this.objects[i];
      currObj.Render();
      this.PlaceIntoSpriteArray(renderingOrder, currObj);
    }
    for (let i = 0; i < renderingOrder.length; i++) {
      const currSprite = renderingOrder[i];
      currSprite.objDiv.style.zIndex = i + "";
    }
    for (let i = 0; i < this.objects.length; i++) {
      this.objects[i].OnNewFrame();
    }
  }
  PlaceIntoSpriteArray(arr, newItem) {
    let low = 0;
    let high = arr.length;
    const newZ = GEOD3ObjectHandler.GetVariable(newItem, "z");
    while (low < high) {
      const mid = Math.floor((low + high) / 2);
      const midZ = GEOD3ObjectHandler.GetVariable(arr[mid], "z");
      if (midZ < newZ) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    arr.splice(low, 0, newItem);
  }
};
GameView.icon = "\u25B6\uFE0F";

// classes/tabs/scene-view.ts
var SceneView = class extends Tab {
  constructor(anp) {
    super(anp);
    this.objects = [];
  }
  Focus(div) {
    div.empty();
    div.className = "geod3-tab-container hbox";
    this.hierarchyDiv = div.createDiv("geod3-object-list vbox");
    const sceneScrollWrapper = div.createDiv("geod3-scene-scroll-wrapper");
    const sceneWrapper = sceneScrollWrapper.createDiv("geod3-scene-wrapper");
    this.sceneDiv = sceneWrapper.createDiv("geod3-scene");
    this.inspectorDiv = div.createDiv("geod3-inspector vbox");
    const listDiv = this.hierarchyDiv.createDiv("vbox");
    for (let i = 0; i < this.objects.length; i++) {
      const objectDiv = listDiv.createDiv("geod3-object-in-list hbox pointer-hover");
      const currObj = this.objects[i];
      objectDiv.textContent = currObj.idInScene + ": " + currObj.name;
      objectDiv.onclick = () => {
        GEOD3ObjectHandler.CreateII(currObj, this.anp, this.inspectorDiv);
      };
    }
    const buttonsDiv = this.hierarchyDiv.createDiv("hbox");
    const refreshButton = buttonsDiv.createEl("button", { text: "\u27F3" });
    const addObjButton = buttonsDiv.createEl("button", { text: "+" });
    refreshButton.className = "geod3-secondary-button";
    addObjButton.className = "geod3-add-button";
    refreshButton.style.width = "50%";
    addObjButton.style.width = "50%";
    refreshButton.onclick = () => {
      this.sceneDiv.empty();
      for (let i = 0; i < this.objects.length; i++) {
        const currObj = GEOD3ObjectHandler.CreateRI(this.objects[i], this.anp, this.sceneDiv.createDiv());
        currObj.Render();
      }
    };
    addObjButton.onclick = () => {
      const index = this.objects.length;
      const newObj = new GEOD3Object(index);
      const objectDiv = listDiv.createDiv("geod3-object-in-list hbox pointer-hover");
      objectDiv.createEl("div", { text: newObj.idInScene + ": " + newObj.name });
      this.objects.push(newObj);
      objectDiv.onclick = () => {
        GEOD3ObjectHandler.CreateII(newObj, this.anp, this.inspectorDiv);
      };
    };
  }
  UnFocus(div) {
    div.empty();
  }
};
SceneView.icon = "\u{1F310}";

// classes/tabs/script-editor.ts
var ScriptEditor = class extends Tab {
  async Focus(div) {
    div.empty();
    const objs = this.anp.project.sceneView.objects;
    if (this.currentObject === void 0) {
      if (objs.length > 0) {
        this.currentObject = objs[0];
      } else {
        div.createEl("h1", { text: "Create Objects in the Scene View first!" });
        return;
      }
    }
    div.className = "geod3-tab-container hbox";
    const leftSide = div.createDiv("geod3-script-wrapper vbox");
    const topDiv = leftSide.createDiv("geod3-script-navigator hbox");
    const objIDInput = topDiv.createEl("select");
    const clusterTypeInput = topDiv.createEl("select");
    const clusterNumberInput = topDiv.createEl("input", { type: "number", value: "0" });
    for (let i = 0; i < objs.length; i++) {
      const currObj = objs[i];
      objIDInput.createEl("option", { text: currObj.idInScene + ": " + currObj.name, value: i + "" });
    }
    objIDInput.value = this.currentObject.idInScene + "";
    clusterTypeInput.createEl("option", { text: "On Start", value: "On Start" });
    clusterTypeInput.createEl("option", { text: "On New Frame", value: "On New Frame" });
    clusterTypeInput.value = "On Start";
    clusterNumberInput.min = "0";
    this.scriptDiv = leftSide.createDiv("geod3-script");
    const blockPool = div.createDiv("geod3-block-pool");
    this.blocksDiv = blockPool.createDiv("geod3-blocks-list vbox");
    this.delDiv = blockPool.createDiv("geod3-block-delete-div");
    const LoadScript = () => {
      this.scriptDiv.empty();
      const obj = this.currentObject;
      const scriptType = clusterTypeInput.value === "On Start" ? obj.onStart : obj.onNewFrame;
      const index = parseInt(clusterNumberInput.value);
      if (index >= scriptType.length) {
        scriptType.push(new AChainI([new ADoNothingI()]));
        clusterNumberInput.max = scriptType.length + "";
      }
      AFHandler.CreateEI(scriptType[index], this.scriptDiv.createDiv(), this.anp);
    };
    this.CreateBlockPool();
    LoadScript();
    objIDInput.onchange = () => {
      this.currentObject = objs[parseInt(objIDInput.value)];
      const obj = this.currentObject;
      const scriptType = clusterTypeInput.value === "On Start" ? obj.onStart : obj.onNewFrame;
      clusterNumberInput.value = "0";
      clusterNumberInput.max = scriptType.length + "";
      LoadScript();
    };
    clusterTypeInput.onchange = () => {
      const obj = this.currentObject;
      const scriptType = clusterTypeInput.value === "On Start" ? obj.onStart : obj.onNewFrame;
      clusterNumberInput.value = "0";
      clusterNumberInput.max = scriptType.length + "";
      LoadScript();
    };
    clusterNumberInput.onchange = () => {
      LoadScript();
    };
  }
  CreateBlockPool() {
    this.blocksDiv.empty();
    this.delDiv.addEventListener("dragover", (event) => {
      event.preventDefault();
      if (event.dataTransfer !== null) {
        event.dataTransfer.dropEffect = "copy";
      }
      this.delDiv.className = "geod3-block-delete-div-hover";
    });
    this.delDiv.addEventListener("dragleave", (event) => {
      event.stopPropagation();
      this.delDiv.className = "geod3-block-delete-div";
    });
    this.delDiv.addEventListener("drop", (event) => {
      if (!(this.currentlyDraggedBlock === void 0 || this.currentlyDraggedBlockIsCopy)) {
        this.currentlyDraggedBlock.div.remove();
        const parentEI = this.currentlyDraggedBlock.parentEI;
        if (parentEI !== void 0) {
          parentEI.RemoveParameter(this.currentlyDraggedBlock.instance);
          parentEI.DisplayBlock();
        }
      }
    });
    const chainI = AFHandler.CreateI(1 /* chain */, void 0);
    const getI = AFHandler.CreateI(2 /* get */, void 0);
    const setI = AFHandler.CreateI(3 /* set */, void 0);
    const ifI = AFHandler.CreateI(4 /* if */, void 0);
    const ifElseI = AFHandler.CreateI(5 /* ifelse */, void 0);
    const compareI = AFHandler.CreateI(6 /* compare */, void 0);
    const keydownI = AFHandler.CreateI(7 /* keydown */, void 0);
    const addI = AFHandler.CreateI(8 /* add */, void 0);
    const chainBlock = AFHandler.CreateEI(chainI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const getBlock = AFHandler.CreateEI(getI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const setBlock = AFHandler.CreateEI(setI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const ifBlock = AFHandler.CreateEI(ifI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const ifElseBlock = AFHandler.CreateEI(ifElseI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const compareBlock = AFHandler.CreateEI(compareI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const keydownBlock = AFHandler.CreateEI(keydownI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    const addBlock = AFHandler.CreateEI(addI, this.blocksDiv.createDiv("geod3-script-block"), this.anp);
    AFEI.MakeBlockDraggable(chainBlock, this.anp, true);
    AFEI.MakeBlockDraggable(getBlock, this.anp, true);
    AFEI.MakeBlockDraggable(setBlock, this.anp, true);
    AFEI.MakeBlockDraggable(ifBlock, this.anp, true);
    AFEI.MakeBlockDraggable(ifElseBlock, this.anp, true);
    AFEI.MakeBlockDraggable(compareBlock, this.anp, true);
    AFEI.MakeBlockDraggable(keydownBlock, this.anp, true);
    AFEI.MakeBlockDraggable(addBlock, this.anp, true);
  }
  UnFocus(div) {
    div.empty();
  }
};
ScriptEditor.icon = "\u{1F4DC}";

// classes/project.ts
var Project = class {
  get fileManager() {
    return this.tabs[0];
  }
  get sceneView() {
    return this.tabs[1];
  }
  get scriptEditor() {
    return this.tabs[2];
  }
  get gameView() {
    return this.tabs[3];
  }
  get fileManagerTabID() {
    return 0;
  }
  get sceneViewTabID() {
    return 1;
  }
  get scriptEditorTabID() {
    return 2;
  }
  get gameViewTabID() {
    return 3;
  }
  constructor(app) {
    this.anp = new AppAndProject(app, this);
    this.tabs = [];
    this.tabs.push(new GEOD3FileManager(this.anp));
    this.tabs.push(new SceneView(this.anp));
    this.tabs.push(new ScriptEditor(this.anp));
    this.tabs.push(new GameView(this.anp));
    this.activeTabID = 0;
  }
  async Load() {
    await this.LoadFiles();
    await this.GrabFileDependencies();
    await this.LoadObjects();
  }
  async LoadFiles() {
    await this.fileManager.LoadFiles(this.anp);
  }
  async GrabFileDependencies() {
    const fm = this.fileManager;
    for (let i = 0; i < fm.files.length; i++) {
      await fm.files[i].GrabDependencies(this.anp);
    }
  }
  async LoadObjects() {
    const sv = this.sceneView;
    const path = (0, import_obsidian4.normalizePath)(this.anp.project.pathToProject + "/RESERVED FOLDER DO NOT RENAME/Objects.md");
    const tFile = this.anp.app.vault.getFileByPath(path);
    if (tFile === null) {
      return;
    }
    const data = await this.anp.app.vault.cachedRead(tFile);
    const plainObj = JSON.parse(data);
    sv.objects = plainObj.objects;
    const loadFunction = (plainFunct) => {
      const newFunct = Object.assign(AFHandler.CreateI(plainFunct.type, plainFunct.parameters), plainFunct);
      for (let i = 0; i < newFunct.defaultParameters.length; i++) {
        const isStruct = plainFunct.defaultParameters[i].name !== void 0;
        if (isStruct) {
          const plainStruct = plainFunct.defaultParameters[i];
          newFunct.defaultParameters[i] = Object.assign(ASHandler.CreateI(plainStruct.type, plainStruct.scope, plainStruct.name), plainStruct);
        } else {
          newFunct.defaultParameters[i] = loadFunction(plainFunct.defaultParameters[i]);
        }
      }
      for (let i = 0; i < newFunct.parameters.length; i++) {
        const isStruct = plainFunct.parameters[i].name !== void 0;
        if (isStruct) {
          const plainStruct = plainFunct.parameters[i];
          newFunct.parameters[i] = Object.assign(ASHandler.CreateI(plainStruct.type, plainStruct.scope, plainStruct.name), plainStruct);
        } else {
          newFunct.parameters[i] = loadFunction(plainFunct.parameters[i]);
        }
      }
      return newFunct;
    };
    for (let i = 0; i < plainObj.objects.length; i++) {
      const newObj = Object.assign(new GEOD3Object(i), plainObj.objects[i]);
      sv.objects[i] = newObj;
      for (let j = 0; j < newObj.variables.length; j++) {
        const plainVar = sv.objects[i].variables[j];
        const newVar = Object.assign(ASHandler.CreateI(plainVar.type, plainVar.scope, plainVar.name), plainVar);
        sv.objects[i].variables[j] = newVar;
      }
      for (let j = 0; j < newObj.onStart.length; j++) {
        const plainFunct = sv.objects[i].onStart[j];
        const newFunct = loadFunction(plainFunct);
        sv.objects[i].onStart[j] = newFunct;
      }
      for (let j = 0; j < newObj.onNewFrame.length; j++) {
        const plainFunct = sv.objects[i].onNewFrame[j];
        const newFunct = loadFunction(plainFunct);
        sv.objects[i].onNewFrame[j] = newFunct;
      }
    }
  }
  async Display(div) {
    div.empty();
    const tabBar = div.createDiv("geod3-tab-bar hbox");
    const tabContainer = div.createDiv("geod3-tab-container");
    const tabIcons = [];
    const filesTab = tabBar.createEl("button", { text: GEOD3FileManager.icon });
    const sceneViewTab = tabBar.createEl("button", { text: SceneView.icon });
    const scriptEditorTab = tabBar.createEl("button", { text: ScriptEditor.icon });
    const gameTab = tabBar.createEl("button", { text: GameView.icon });
    const saveButton = tabBar.createEl("button", { text: "\u{1F4BE}Save" });
    saveButton.className = "geod3-secondary-button";
    saveButton.onclick = async () => {
      saveButton.disabled = true;
      saveButton.textContent = "\u27F3Saving...";
      const path = (0, import_obsidian4.normalizePath)(this.anp.project.pathToProject + "/RESERVED FOLDER DO NOT RENAME/Objects.md");
      const data = JSON.stringify(new SceneDTO(this.anp.project.sceneView.objects));
      await this.anp.app.vault.adapter.write(path, data);
      saveButton.disabled = false;
      saveButton.textContent = "\u{1F4BE}Save";
    };
    filesTab.className = "geod3-tab-icon";
    sceneViewTab.className = "geod3-tab-icon";
    scriptEditorTab.className = "geod3-tab-icon";
    gameTab.className = "geod3-tab-icon";
    tabIcons.push(filesTab);
    tabIcons.push(sceneViewTab);
    tabIcons.push(scriptEditorTab);
    tabIcons.push(gameTab);
    tabIcons[this.activeTabID].className = "geod3-tab-icon-opened";
    this.tabs[this.activeTabID].Focus(tabContainer);
    const switchToTab = async (index) => {
      tabIcons[this.activeTabID].className = "geod3-tab-icon";
      await this.tabs[this.activeTabID].UnFocus(tabContainer);
      this.activeTabID = index;
      tabIcons[this.activeTabID].className = "geod3-tab-icon-opened";
      this.tabs[this.activeTabID].Focus(tabContainer);
    };
    this.SwitchToTab = switchToTab;
    filesTab.onclick = () => {
      switchToTab(0);
    };
    sceneViewTab.onclick = () => {
      switchToTab(1);
    };
    scriptEditorTab.onclick = () => {
      switchToTab(2);
    };
    gameTab.onclick = () => {
      switchToTab(3);
    };
  }
};
var AppAndProject = class {
  constructor(app, project) {
    this.app = app;
    this.project = project;
  }
};
var SceneDTO = class {
  constructor(objects = []) {
    this.objects = objects;
  }
};

// classes/geod3-view.ts
var VIEW_TYPE_GEOD3_PROJECT = "geod3-view";
var GEOD3View = class extends import_obsidian5.ItemView {
  constructor(leaf, defaultPath) {
    super(leaf);
    this.defaultPath = defaultPath;
  }
  getViewType() {
    return VIEW_TYPE_GEOD3_PROJECT;
  }
  getDisplayText() {
    return "GEO:D3";
  }
  async onOpen() {
    const mainEl = this.containerEl.children[1];
    mainEl.empty();
    const mainDiv = mainEl.createDiv("geod3-main-div");
    const mainDivTemp = mainDiv.createDiv("geod3-main-div");
    mainDivTemp.tabIndex = -1;
    mainDivTemp.focus();
    mainDivTemp.createEl("h1", { text: "Path to project:" });
    const pathInput = mainDivTemp.createEl("input", { type: "text", value: this.defaultPath });
    const submitButton = mainDivTemp.createEl("button", { text: "Open" });
    const onSubmit = async () => {
      const folderPath = (0, import_obsidian5.normalizePath)(pathInput.value);
      const dataPath = folderPath + "/RESERVED FOLDER DO NOT RENAME/Objects.md";
      this.project = new Project(this.app);
      this.project.pathToProject = folderPath;
      if (!await this.app.vault.adapter.exists(dataPath)) {
        const newDTO = new SceneDTO();
        const pathParts = dataPath.split("/");
        let pathSoFar = "";
        for (let i = 0; !await this.app.vault.adapter.exists(dataPath) && i < pathParts.length; i++) {
          const isLast = i === pathParts.length - 1;
          pathSoFar += pathParts[i] + (isLast ? "" : "/");
          if (isLast) {
            await this.app.vault.create(pathSoFar, JSON.stringify(newDTO));
          } else {
            await this.app.vault.createFolder(pathSoFar);
          }
        }
      }
      await this.project.Load();
      await this.project.Display(mainDiv);
    };
    submitButton.onclick = onSubmit;
    mainDivTemp.onkeydown = (e) => {
      if (e.key === "Enter") {
        mainDivTemp.blur();
        mainDivTemp.onkeydown = () => {
        };
        onSubmit();
      }
    };
  }
  async onClose() {
    this.project.gameView.stillRunning = false;
  }
};

// main.ts
var import_obsidian6 = require("obsidian");
var DEFAULT_SETTINGS = {
  projectPath: "New GEOD3 Project"
};
var GEOD3 = class extends import_obsidian6.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_GEOD3_PROJECT,
      (leaf) => new GEOD3View(leaf, this.settings.projectPath)
    );
    this.addRibbonIcon("boxes", "Open GEOD3", () => {
      this.activateView(VIEW_TYPE_GEOD3_PROJECT);
    });
    this.addCommand({
      id: "open-geod3-view",
      name: "Open GEOD3",
      callback: () => {
        this.activateView(VIEW_TYPE_GEOD3_PROJECT);
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  activateView(view_type) {
    let leaf = null;
    leaf = this.app.workspace.getLeaf("tab");
    if (leaf === null) {
      new import_obsidian6.Notice("Failed to create view: workspace leaf was null");
      return;
    }
    leaf.setViewState({ type: view_type, active: true });
  }
};
var SampleSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian6.Setting(containerEl).setName("Default Project Folder").setDesc("The vault path to automatically fill in for the project path").addText((text) => text.setPlaceholder("Default Source Path").setValue(this.plugin.settings.projectPath).onChange(async (value) => {
      this.plugin.settings.projectPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
